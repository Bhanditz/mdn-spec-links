{
    "AudioBuffer": [
        {
            "slug": "API/AudioBuffer/AudioBuffer",
            "summary": "The AudioBuffer constructor of the Web Audio API creates a new AudioBuffer object.",
            "support": {
                "chrome": {
                    "notes": "The <code>context</code> parameter was supported up until version 57, but has now been removed.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "The <code>context</code> parameter was supported up until version 57, but has now been removed.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "notes": "The <code>context</code> parameter was supported up until version 44, but has now been removed.",
                    "version_added": "42"
                },
                "opera_android": {
                    "notes": "The <code>context</code> parameter was supported up until version 44, but has now been removed.",
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "The <code>context</code> parameter was supported up until version 57, but has now been removed.",
                    "version_added": "55"
                }
            },
            "title": "AudioBuffer()"
        }
    ],
    "AudioBufferSourceNode": [
        {
            "slug": "API/AudioBufferSourceNode/AudioBufferSourceNode",
            "summary": "The AudioBufferSourceNode() constructor creates a new AudioBufferSourceNode object instance.",
            "support": {
                "chrome": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "AudioBufferSourceNode.AudioBufferSourceNode()"
        }
    ],
    "AudioContext": [
        {
            "slug": "API/AudioContext",
            "summary": "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.",
            "support": {
                "chrome": [
                    {
                        "version_added": "35"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "14",
                        "version_removed": "57"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "35"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "57"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15",
                        "version_removed": "44"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15",
                        "version_removed": "44"
                    }
                ],
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": [
                    {
                        "version_added": true
                    },
                    {
                        "prefix": "webkit",
                        "version_added": true,
                        "version_removed": "7.0"
                    }
                ],
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioContext"
        }
    ],
    "AudioContextOptions": [
        {
            "slug": "API/AudioContextOptions",
            "summary": "The AudioContextOptions dictionary is used to specify configuration options when constructing a new AudioContext object to represent a graph of web audio nodes.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "61"
                },
                "firefox_android": {
                    "version_added": "61"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "AudioContextOptions"
        }
    ],
    "AudioParam": [
        {
            "slug": "API/AudioParam",
            "summary": "The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam"
        }
    ],
    "BaseAudioContext": [
        {
            "slug": "API/BaseAudioContext",
            "summary": "The BaseAudioContext interface acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext"
        }
    ],
    "ConstantSourceNode": [
        {
            "slug": "API/ConstantSourceNode",
            "summary": "The ConstantSourceNode interface\u2014part of the Web Audio API\u2014represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible AudioParam by automating the value of its offset or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "<code>ConstantSourceNode</code> inherited from <code>AudioNode</code> initially, but was changed in Firefox 53 to inherit from <code>AudioScheduledSourceNode</code>.",
                    "version_added": "52"
                },
                "firefox_android": {
                    "notes": "<code>ConstantSourceNode</code> inherited from <code>AudioNode</code> initially, but was changed in Firefox 53 to inherit from <code>AudioScheduledSourceNode</code>.",
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "ConstantSourceNode"
        }
    ],
    "ConvolverNode": [
        {
            "slug": "API/ConvolverNode",
            "summary": "The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ConvolverNode"
        }
    ],
    "DynamicsCompressorNode-section": [
        {
            "slug": "API/DynamicsCompressorNode",
            "summary": "Inherits properties from its parent, AudioNode.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DynamicsCompressorNode"
        }
    ],
    "GainNode": [
        {
            "slug": "API/GainNode",
            "summary": "The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GainNode"
        }
    ],
    "MediaElementAudioSourceNode": [
        {
            "slug": "API/MediaElementAudioSourceNode",
            "summary": "A MediaElementSourceNode has no inputs and exactly one output, and is created using the AudioContext.createMediaElementSource method. The amount of channels in the output equals the number of channels of the audio referenced by the HTMLMediaElement used in the creation of the node, or is 1 if the HTMLMediaElement has no audio.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MediaElementAudioSourceNode"
        }
    ],
    "OfflineAudioCompletionEvent": [
        {
            "slug": "API/OfflineAudioCompletionEvent",
            "summary": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OfflineAudioCompletionEvent"
        }
    ],
    "OfflineAudioContext": [
        {
            "slug": "API/OfflineAudioContext",
            "summary": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OfflineAudioContext"
        }
    ],
    "WaveShaperNode": [
        {
            "slug": "API/WaveShaperNode/WaveShaperNode",
            "summary": "The WaveShaperNode() constructor of the Web Audio API creates a new WaveShaperNode object which is an AudioNode that represents a non-linear distorter.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "WaveShaperNode.WaveShaperNode()"
        }
    ],
    "audiolistener": [
        {
            "slug": "API/AudioListener",
            "summary": "The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioListener"
        }
    ],
    "audionodeoptions": [
        {
            "slug": "API/AudioNodeOptions",
            "summary": "The AudioNodeOptions dictionary of the Web Audio API specifies options that can be used when creating new AudioNode objects.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "AudioNodeOptions"
        }
    ],
    "dictdef-mediastreamaudiosourceoptions": [
        {
            "slug": "API/MediaStreamAudioSourceOptions",
            "summary": "The MediaStreamAudioSourceOptions dictionary provides configuration options used when creating a MediaStreamAudioSourceNode using its constructor.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "MediaStreamAudioSourceOptions"
        }
    ],
    "dom-analysernode": [
        {
            "slug": "API/AnalyserNode/AnalyserNode",
            "summary": "The AnalyserNode constructor of the Web Audio API creates a new AnalyserNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "AnalyserNode.AnalyserNode()"
        }
    ],
    "dom-analysernode-fftsize": [
        {
            "slug": "API/AnalyserNode/fftSize",
            "summary": "The fftSize property of the AnalyserNode interface is an unsigned long value and represents the window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.fftSize"
        }
    ],
    "dom-analysernode-frequencybincount": [
        {
            "slug": "API/AnalyserNode/frequencyBinCount",
            "summary": "The frequencyBinCount read-only property of the AnalyserNode interface is an unsigned integer half that of the AnalyserNode.fftSize. This generally equates to the number of data values you will have to play with for the visualization.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.frequencyBinCount"
        }
    ],
    "dom-analysernode-maxdecibels": [
        {
            "slug": "API/AnalyserNode/maxDecibels",
            "summary": "The maxDecibels property of the AnalyserNode interface is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values \u2014 basically, this specifies the maximum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.maxDecibels"
        }
    ],
    "dom-audiobuffer-getchanneldata": [
        {
            "slug": "API/AudioBuffer/getChannelData",
            "summary": "The getChannelData() method of the AudioBuffer Interface returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel).",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer.getChannelData()"
        }
    ],
    "dom-audiobuffersourcenode-detune": [
        {
            "slug": "API/AudioBufferSourceNode/detune",
            "summary": "The detune property of the AudioBufferSourceNode interface is a k-rate AudioParam representing detuning of oscillation in cents.",
            "support": {
                "chrome": {
                    "version_added": "44"
                },
                "chrome_android": {
                    "version_added": "44"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": {
                    "version_added": "40"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "31"
                },
                "opera_android": {
                    "version_added": "31"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "44"
                }
            },
            "title": "AudioBufferSourceNode.detune"
        }
    ],
    "dom-audiocontext-audiocontext": [
        {
            "slug": "API/AudioContext/AudioContext",
            "summary": "The AudioContext() constructor creates a new AudioContext object which represents an audio-processing graph, built from audio modules linked together, each represented by an AudioNode.",
            "support": {
                "chrome": {
                    "notes": [
                        "Each tab is limited to 6 audio contexts in Chrome; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                        "If <code>latencyHint</code> isn't valid, Chrome throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                    ],
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": [
                        "Each tab is limited to 6 audio contexts in Chrome; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                        "If <code>latencyHint</code> isn't valid, Chrome throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                    ],
                    "version_added": "55"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "25"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "AudioContext()"
        }
    ],
    "dom-audiocontext-baselatency": [
        {
            "slug": "API/AudioContext/baseLatency",
            "summary": "The baseLatency read-only property of the AudioContext interface returns a double that represents the number of seconds of processing latency incurred by the AudioContext passing the audio from the AudioDestinationNode to the audio subsystem.",
            "support": {
                "chrome": {
                    "version_added": "58"
                },
                "chrome_android": {
                    "version_added": "58"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "45"
                },
                "opera_android": {
                    "version_added": "45"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "58"
                }
            },
            "title": "AudioContext.baseLatency"
        }
    ],
    "dom-audiocontext-createmediastreamsource": [
        {
            "slug": "API/AudioContext/createMediaStreamSource",
            "summary": "For more details about media stream audio source nodes, check out the MediaStreamAudioSourceNode reference page.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioContext.createMediaStreamSource()"
        }
    ],
    "dom-audiocontext-createmediastreamtracksource": [
        {
            "slug": "API/AudioContext/createMediaStreamTrackSource",
            "summary": "A MediaStreamTrackAudioSourceNode.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "AudioContext.createMediaStreamTrackSource()"
        }
    ],
    "dom-audiocontext-outputlatency": [
        {
            "slug": "API/AudioContext/outputLatency",
            "summary": "The outputLatency read-only property of the AudioContext Interface provides an estimation of the output latency of the current audio context.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "AudioContext.outputLatency"
        }
    ],
    "dom-audiocontextoptions-latencyhint": [
        {
            "slug": "API/AudioContextOptions/latencyHint",
            "summary": "The AudioContextOptions dictionary (used when instantiating an AudioContext) may contain a property named latencyHint, which indicates the preferred maximum latency in seconds for the audio context.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "61"
                },
                "firefox_android": {
                    "version_added": "61"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "AudioContextOptions.latencyHint"
        }
    ],
    "dom-audiocontextoptions-samplerate": [
        {
            "slug": "API/AudioContextOptions/sampleRate",
            "summary": "The AudioContextOptions dictionary (used when instantiating an AudioContext) may contain a property named sampleRate, which indicates the sample rate to use for the new context.",
            "support": {
                "chrome": {
                    "notes": "See <a href='https://crbug.com/432248' title='Issue 432248 - AudioContext needs to support optional sample rate parameter.'>issue 432248</a> for Chrome support.",
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "61"
                },
                "firefox_android": {
                    "version_added": "61"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "AudioContextOptions.sampleRate"
        }
    ],
    "dom-audioparam-defaultvalue": [
        {
            "slug": "API/AudioParam/defaultValue",
            "summary": "The defaultValue read-only property of the AudioParam interface represents the initial value of the attributes as defined by the specific AudioNode creating the AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.defaultValue"
        }
    ],
    "dom-audioparam-maxvalue": [
        {
            "slug": "API/AudioParam/maxValue",
            "summary": "The maxValue read-only property of the AudioParam interface represents the maximum possible value for the parameter's nominal (effective) range.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioParam.maxValue"
        }
    ],
    "dom-audioparam-minvalue": [
        {
            "slug": "API/AudioParam/minValue",
            "summary": "The minValue read-only property of the AudioParam interface represents the minimum possible value for the parameter's nominal (effective) range.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioParam.minValue"
        }
    ],
    "dom-audioparam-settargetattime": [
        {
            "slug": "API/AudioParam/setTargetAtTime",
            "summary": "The setTargetAtTime() method of the AudioParam interface schedules the start of a gradual change to the AudioParam value. This is useful for decay or release portions of ADSR envelopes.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.setTargetAtTime()"
        }
    ],
    "dom-audioparam-setvalueattime": [
        {
            "slug": "API/AudioParam/setValueAtTime",
            "summary": "The setValueAtTime() method of the AudioParam interface schedules an instant change to the AudioParam value at a precise time, as measured against AudioContext.currentTime. The new value is given in the value parameter.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.setValueAtTime()"
        }
    ],
    "dom-audioparam-setvaluecurveattime": [
        {
            "slug": "API/AudioParam/setValueCurveAtTime",
            "summary": "The setValueCurveAtTime() method of the AudioParam interface schedules the parameter's value to change following a curve defined by a list of values.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.setValueCurveAtTime()"
        }
    ],
    "dom-audioparam-value": [
        {
            "slug": "API/AudioParam/value",
            "summary": "Gets or sets the current value of this AudioParam. Initially, the value is set to AudioParam.defaultValue. Part of the Web Audio API.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.value"
        }
    ],
    "dom-audioscheduledsourcenode-onended": [
        {
            "slug": "API/AudioBufferSourceNode/onended",
            "summary": "The onended event handler of the AudioBufferSourceNode contains the callback associated with the ended event; this lets you run code in response to the audio track finishing playback.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true,
                    "version_removed": "44"
                },
                "opera_android": {
                    "version_added": true,
                    "version_removed": "44"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode.onended"
        },
        {
            "slug": "API/AudioScheduledSourceNode/onended",
            "summary": "The onended event handler for the AudioScheduledSourceNode interface specifies an EventHandler to be executed when the ended event occurs on the node. This event is sent to the node when the concrete interface (such as AudioBufferSourceNode, OscillatorNode, or ConstantSourceNode) determines that it has stopped playing.",
            "support": {
                "chrome": [
                    {
                        "version_added": "57"
                    },
                    {
                        "notes": "Before version 57, this event was implemented on  AudioBufferSourceNode, OscillatorNode, and ConstantSourceNode, which are now children of this class.",
                        "version_added": "14",
                        "version_removed": "56"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "notes": "Before version 57, this event was implemented on  AudioBufferSourceNode, OscillatorNode, and ConstantSourceNode, which are now children of this class.",
                        "version_added": "18",
                        "version_removed": "56"
                    }
                ],
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "25"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "notes": "Before version 57, this event was implemented on  AudioBufferSourceNode, OscillatorNode, and ConstantSourceNode, which are now children of this class.",
                        "version_added": true,
                        "version_removed": "56"
                    }
                ]
            },
            "title": "AudioScheduledSourceNode.onended"
        },
        {
            "slug": "API/ConstantSourceNode/onended",
            "summary": "",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "notes": "This property is still available, but via the inheritance of <code>AudioScheduledSourceNode</code>.",
                    "version_added": "52",
                    "version_removed": "53"
                },
                "firefox_android": {
                    "notes": "This property is still available, but via the inheritance of <code>AudioScheduledSourceNode</code>.",
                    "version_added": "52",
                    "version_removed": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioScheduledSourceNode.onended"
        }
    ],
    "dom-baseaudiocontext-createanalyser": [
        {
            "slug": "API/BaseAudioContext/createAnalyser",
            "summary": "The createAnalyser() method of the BaseAudioContext interface creates an AnalyserNode, which can be used to expose audio time and frequency data and create data visualisations.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createAnalyser()"
        }
    ],
    "dom-baseaudiocontext-createbiquadfilter": [
        {
            "slug": "API/BaseAudioContext/createBiquadFilter",
            "summary": "A BiquadFilterNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createBiquadFilter()"
        }
    ],
    "dom-baseaudiocontext-createbuffer": [
        {
            "slug": "API/BaseAudioContext/createBuffer",
            "summary": "An AudioBuffer configured based on the specified options.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createBuffer()"
        }
    ],
    "dom-baseaudiocontext-createbuffersource": [
        {
            "slug": "API/BaseAudioContext/createBufferSource",
            "summary": "An AudioBufferSourceNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createBufferSource()"
        }
    ],
    "dom-baseaudiocontext-createchannelmerger": [
        {
            "slug": "API/BaseAudioContext/createChannelMerger",
            "summary": "A ChannelMergerNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createChannelMerger()"
        }
    ],
    "dom-baseaudiocontext-createchannelsplitter": [
        {
            "slug": "API/BaseAudioContext/createChannelSplitter",
            "summary": "A ChannelSplitterNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createChannelSplitter()"
        }
    ],
    "dom-baseaudiocontext-createconstantsource": [
        {
            "slug": "API/BaseAudioContext/createConstantSource",
            "summary": "The createConstantSource() property of the BaseAudioContext interface creates a ConstantSourceNode object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value.",
            "support": {
                "chrome": {
                    "version_added": "56"
                },
                "chrome_android": {
                    "version_added": "56"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "43"
                },
                "opera_android": {
                    "version_added": "43"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "56"
                }
            },
            "title": "BaseAudioContext.createConstantSource()"
        }
    ],
    "dom-baseaudiocontext-createconvolver": [
        {
            "slug": "API/BaseAudioContext/createConvolver",
            "summary": "A ConvolverNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createConvolver()"
        }
    ],
    "dom-baseaudiocontext-createdelay": [
        {
            "slug": "API/BaseAudioContext/createDelay",
            "summary": "The createDelay() method of the BaseAudioContext Interface is used to create a DelayNode, which is used to delay the incoming audio signal by a certain amount of time.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createDelay()"
        }
    ],
    "dom-baseaudiocontext-createdynamicscompressor": [
        {
            "slug": "API/BaseAudioContext/createDynamicsCompressor",
            "summary": "Compression lowers the volume of the loudest parts of the signal and raises the volume of the softest parts. Overall, a louder, richer, and fuller sound can be achieved. It is especially important in games and musical applications where large numbers of individual sounds are played simultaneously, where you want to control the overall signal level and help avoid clipping (distorting) of the audio output.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createDynamicsCompressor()"
        }
    ],
    "dom-baseaudiocontext-creategain": [
        {
            "slug": "API/BaseAudioContext/createGain",
            "summary": "A GainNode which takes as input one or more audio sources and outputs audio whose volume has been adjusted in gain (volume) to a level specified by the node's GainNode.gain a-rate parameter.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createGain()"
        }
    ],
    "dom-baseaudiocontext-createoscillator": [
        {
            "slug": "API/BaseAudioContext/createOscillator",
            "summary": "The createOscillator() method of the BaseAudioContext interface creates an OscillatorNode, a source representing a periodic waveform. It basically generates a constant tone.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createOscillator()"
        }
    ],
    "dom-baseaudiocontext-createpanner": [
        {
            "slug": "API/BaseAudioContext/createPanner",
            "summary": "The panner node is spatialized in relation to the AudioContext's AudioListener (defined by the AudioContext.listener attribute), which represents the position and orientation of the person listening to the audio.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createPanner()"
        }
    ],
    "dom-baseaudiocontext-createperiodicwave": [
        {
            "slug": "API/BaseAudioContext/createPeriodicWave",
            "summary": "The createPeriodicWave() method of the BaseAudioContext Interface is used to create a PeriodicWave, which is used to define a periodic waveform that can be used to shape the output of an OscillatorNode.",
            "support": {
                "chrome": [
                    {
                        "notes": "Default values supported",
                        "version_added": "59"
                    },
                    {
                        "version_added": "57"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "10"
                    }
                ],
                "chrome_android": [
                    {
                        "notes": "Default values supported",
                        "version_added": "59"
                    },
                    {
                        "version_added": "57"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "33"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": [
                    {
                        "notes": "Default values supported",
                        "version_added": "59"
                    },
                    {
                        "version_added": "57"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "4.4.3"
                    }
                ]
            },
            "title": "BaseAudioContext.createPeriodicWave()"
        }
    ],
    "dom-baseaudiocontext-createscriptprocessor": [
        {
            "slug": "API/BaseAudioContext/createScriptProcessor",
            "summary": "A ScriptProcessorNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createScriptProcessor()"
        }
    ],
    "dom-baseaudiocontext-createstereopanner": [
        {
            "slug": "API/BaseAudioContext/createStereoPanner",
            "summary": "A StereoPannerNode.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": {
                    "version_added": "37"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createStereoPanner()"
        }
    ],
    "dom-baseaudiocontext-createwaveshaper": [
        {
            "slug": "API/BaseAudioContext/createWaveShaper",
            "summary": "A WaveShaperNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.createWaveShaper()"
        }
    ],
    "dom-baseaudiocontext-currenttime": [
        {
            "slug": "API/BaseAudioContext/currentTime",
            "summary": "The currentTime read-only property of the BaseAudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc. It starts at 0.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.currentTime"
        }
    ],
    "dom-baseaudiocontext-decodeaudiodata": [
        {
            "slug": "API/BaseAudioContext/decodeAudioData",
            "summary": "This is the preferred method of creating an audio source for Web Audio API from an audio track. This method only works on complete file data, not fragments of audio file data.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.decodeAudioData()"
        }
    ],
    "dom-baseaudiocontext-destination": [
        {
            "slug": "API/BaseAudioContext/destination",
            "summary": "An AudioDestinationNode.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.destination"
        }
    ],
    "dom-baseaudiocontext-listener": [
        {
            "slug": "API/BaseAudioContext/listener",
            "summary": "An AudioListener object.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.listener"
        }
    ],
    "dom-baseaudiocontext-onstatechange": [
        {
            "slug": "API/BaseAudioContext/onstatechange",
            "summary": "The following snippet is taken from our AudioContext states demo (see it running live.) The onstatechange hander is used to log the current state to the console every time it changes.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "BaseAudioContext.onstatechange"
        }
    ],
    "dom-baseaudiocontext-resume": [
        {
            "slug": "API/BaseAudioContext/resume",
            "summary": "The resume() method of the BaseAudioContext Interface resumes the progression of time in an audio context that has previously been suspended.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "41"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.resume()"
        }
    ],
    "dom-baseaudiocontext-samplerate": [
        {
            "slug": "API/BaseAudioContext/sampleRate",
            "summary": "The sampleRate property of the BaseAudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context.",
            "support": {
                "chrome": {
                    "prefix": "webkit",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "22"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "15"
                    }
                ],
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "prefix": "webkit",
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BaseAudioContext.sampleRate"
        }
    ],
    "dom-baseaudiocontext-state": [
        {
            "slug": "API/BaseAudioContext/state",
            "summary": "A DOMString. Possible values are:",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "BaseAudioContext.state"
        }
    ],
    "dom-biquadfilternode-biquadfilternode": [
        {
            "slug": "API/BiquadFilterNode/BiquadFilterNode",
            "summary": "The BiquadFilterNode() constructor of the Web Audio API creates a new BiquadFilterNode object, which represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "notes": "Before Opera 46, the default values were not supported.",
                    "version_added": "42"
                },
                "opera_android": {
                    "notes": "Before Opera 46, the default values were not supported.",
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "BiquadFilterNode()"
        }
    ],
    "dom-constantsourcenode-constantsourcenode": [
        {
            "slug": "API/ConstantSourceNode/ConstantSourceNode",
            "summary": "The ConstantSourceNode() constructor creates a new ConstantSourceNode object instance, representing an audio source which constantly outputs samples whose values are always the same.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "ConstantSourceNode()"
        }
    ],
    "dom-convolvernode-convolvernode": [
        {
            "slug": "API/ConvolverNode/ConvolverNode",
            "summary": "The ConvolverNode() constructor of the Web Audio API creates a new ConvolverNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "ConvolverNode()"
        }
    ],
    "dom-delaynode": [
        {
            "slug": "API/DelayNode/DelayNode",
            "summary": "The DelayNode() constructor of the Web Audio API creates a new DelayNode object with a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data, and its propagation to the output.",
            "support": {
                "chrome": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "DelayNode()"
        }
    ],
    "dom-delaynode-delaytime": [
        {
            "slug": "API/DelayNode/delayTime",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DelayNode.delayTime"
        }
    ],
    "dom-gainnode-gainnode": [
        {
            "slug": "API/GainNode/GainNode",
            "summary": "The GainNode() constructor of the Web Audio API creates a new GainNode object which an AudioNode that represents a change in volume.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "GainNode()"
        }
    ],
    "dom-iirfilternode-iirfilternode": [
        {
            "slug": "API/IIRFilterNode/IIRFilterNode",
            "summary": "The IIRFilterNode() constructor of the Web Audio API creates a new IIRFilterNode object which an AudioNode processor which implements a general infinite impulse response filter.",
            "support": {
                "chrome": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "IIRFilterNode()"
        }
    ],
    "dom-mediastreamaudiosourcenode-mediastream": [
        {
            "slug": "API/MediaStreamAudioSourceNode/mediaStream",
            "summary": "The MediaStreamAudioSourceNode interface's read-only mediaStream property indicates the MediaStream that contains the audio track from which the node is receiving audio.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "MediaStreamAudioSourceNode.mediaStream"
        }
    ],
    "dom-mediastreamaudiosourcenode-mediastreamaudiosourcenode": [
        {
            "slug": "API/MediaStreamAudioSourceNode/MediaStreamAudioSourceNode",
            "summary": "The Web Audio API's MediaStreamAudioSourceNode() constructor creates and returns a new MediaStreamAudioSourceNode object which uses the first audio track of a given MediaStream as its source.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "MediaStreamAudioSourceNode()"
        }
    ],
    "dom-mediastreamaudiosourceoptions-mediastream": [
        {
            "slug": "API/MediaStreamAudioSourceOptions/mediaStream",
            "summary": "The MediaStreamAudioSourceOptions dictionary's mediaStream property must specify the MediaStream from which to retrieve audio data when instantiating a MediaStreamAudioSourceNode using the MediaStreamAudioSourceNode() constructor.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "MediaStreamAudioSourceOptions.mediaStream"
        }
    ],
    "dom-offlineaudiocompletionevent-offlineaudiocompletionevent": [
        {
            "slug": "API/OfflineAudioCompletionEvent/OfflineAudioCompletionEvent",
            "summary": "The OfflineAudioCompletionEvent() constructor of the Web Audio API creates a new OfflineAudioCompletionEvent object instance.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "OfflineAudioCompletionEvent.OfflineAudioCompletionEvent()"
        }
    ],
    "dom-offlineaudiocompletionevent-renderedbuffer": [
        {
            "slug": "API/OfflineAudioCompletionEvent/renderedBuffer",
            "summary": "The renderedBuffer read-only property of the OfflineAudioCompletionEvent interface is an AudioBuffer containing the result of processing an OfflineAudioContext.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OfflineAudioCompletionEvent.renderedBuffer"
        }
    ],
    "dom-offlineaudiocontext-offlineaudiocontext": [
        {
            "slug": "API/OfflineAudioContext/OfflineAudioContext",
            "summary": "The OfflineAudioContext() constructor\u2014part of the Web Audio API\u2014creates and returns a new OfflineAudioContext object instance, which can then be used to render audio to an AudioBuffer rather than to an audio output device.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "OfflineAudioContext.OfflineAudioContext()"
        }
    ],
    "dom-oscillatornode-oscillatornode": [
        {
            "slug": "API/OscillatorNode/OscillatorNode",
            "summary": "The OscillatorNode() constructor of the Web Audio API creates a new OscillatorNode object which is an AudioNode that represents a periodic waveform, like a sine wave, optionally setting the node's properties' values to match values in a specified object.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "OscillatorNode.OscillatorNode()"
        }
    ],
    "dom-pannernode-pannernode": [
        {
            "slug": "API/PannerNode/PannerNode",
            "summary": "The PannerNode() constructor of the Web Audio API creates a new PannerNode object instance.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "PannerNode.PannerNode()"
        }
    ],
    "dom-stereopannernode-stereopannernode": [
        {
            "slug": "API/StereoPannerNode/StereoPannerNode",
            "summary": "The StereoPannerNode() constructor of the Web Audio API creates a new StereoPannerNode object which is an AudioNode that represents a simple stereo panner node that can be used to pan an audio stream left or right.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "StereoPannerNode.StereoPannerNode()"
        }
    ],
    "idl-def-AudioScheduledSourceNode": [
        {
            "slug": "API/AudioScheduledSourceNode",
            "summary": "The AudioScheduledSourceNode interface\u2014part of the Web Audio API\u2014is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the start() and stop() methods, as well as the onended event handler.",
            "support": {
                "chrome": [
                    {
                        "version_added": "57"
                    },
                    {
                        "alternative_name": "AudioSourceNode",
                        "version_added": "14",
                        "version_removed": "56"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "alternative_name": "AudioSourceNode",
                        "version_added": "18",
                        "version_removed": "56"
                    }
                ],
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "53"
                    },
                    {
                        "alternative_name": "AudioSourceNode",
                        "version_added": "25",
                        "version_removed": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "53"
                    },
                    {
                        "alternative_name": "AudioSourceNode",
                        "version_added": "25",
                        "version_removed": "52"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "AudioSourceNode",
                        "version_added": "15",
                        "version_removed": "43"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "AudioSourceNode",
                        "version_added": "15",
                        "version_removed": "43"
                    }
                ],
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "7.0"
                },
                "webview_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "alternative_name": "AudioSourceNode",
                        "version_added": true,
                        "version_removed": "56"
                    }
                ]
            },
            "title": "AudioScheduledSourceNode"
        }
    ],
    "idl-def-ChannelMergerNode": [
        {
            "slug": "API/ChannelMergerNode/ChannelMergerNode",
            "summary": "The ChannelMergerNode() constructor creates a new ChannelMergerNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "ChannelMergerNode()"
        }
    ],
    "idl-def-ChannelSplitterNode": [
        {
            "slug": "API/ChannelSplitterNode/ChannelSplitterNode",
            "summary": "The ChannelSplitterNode() constructor of the Web Audio API creates a new ChannelSplitterNode object instance, representing a node that splits the input into a separate output for each of the source node's audio channels.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": {
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "55"
                }
            },
            "title": "ChannelSplitterNode.ChannelSplitterNode()"
        }
    ],
    "idl-def-MediaElementAudioSourceNode": [
        {
            "slug": "API/MediaElementAudioSourceNode/MediaElementAudioSourceNode",
            "summary": "The MediaElementAudioSourceNode() constructor creates a new MediaElementAudioSourceNode object instance.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "MediaElementAudioSourceNode()"
        }
    ],
    "idl-def-MediaStreamAudioDestinationNode": [
        {
            "slug": "API/MediaStreamAudioDestinationNode/MediaStreamAudioDestinationNode",
            "summary": "The MediaStreamAudioDestinationNode() constructor of the Web Audio API creates a new MediaStreamAudioDestinationNode object instance.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "MediaStreamAudioDestinationNode.MediaStreamAudioDestinationNode()"
        }
    ],
    "periodicwave": [
        {
            "slug": "API/PeriodicWave",
            "summary": "PeriodicWave has no inputs or outputs; it is used to define custom oscillators when calling OscillatorNode.setPeriodicWave(). The PeriodicWave itself is created/returned by AudioContext.createPeriodicWave().",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PeriodicWave"
        }
    ],
    "the-analysernode-interface": [
        {
            "slug": "API/AnalyserNode",
            "summary": "The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode"
        }
    ],
    "the-audiobuffer-interface": [
        {
            "slug": "API/AudioBuffer",
            "summary": "The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer"
        }
    ],
    "the-audiobuffersourcenode-interface": [
        {
            "slug": "API/AudioBufferSourceNode",
            "summary": "The AudioBufferSourceNode interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. It's especially useful for playing back audio which has particularly stringent timing accuracy requirements, such as for sounds that must match a specific rhythm and can be kept in memory rather than being played from disk or the network.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode"
        }
    ],
    "the-audiodestinationnode-interface": [
        {
            "slug": "API/AudioDestinationNode",
            "summary": "AudioDestinationNode has no output (as it is the output, no more AudioNode can be linked after it in the audio graph) and one input. The number of channels in the input must be between 0 and the maxChannelCount value or an exception is raised.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioDestinationNode"
        }
    ],
    "the-audionode-interface": [
        {
            "slug": "API/AudioNode",
            "summary": "The AudioNode interface is a generic interface for representing an audio processing module. Examples include:",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode"
        }
    ],
    "the-biquadfilternode-interface": [
        {
            "slug": "API/BiquadFilterNode",
            "summary": "The BiquadFilterNode interface represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BiquadFilterNode"
        }
    ],
    "the-channelmergernode-interface": [
        {
            "slug": "API/ChannelMergerNode",
            "summary": "The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ChannelMergerNode"
        }
    ],
    "the-channelsplitternode-interface": [
        {
            "slug": "API/ChannelSplitterNode",
            "summary": "The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 56, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec.",
                    "version_added": "14"
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 56, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec.",
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "notes": "Starting in Opera 43, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec.",
                    "version_added": "15"
                },
                "opera_android": {
                    "notes": "Starting in Opera 43, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec.",
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Starting in version 56, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec.",
                    "version_added": true
                }
            },
            "title": "ChannelSplitterNode"
        }
    ],
    "the-delaynode-interface": [
        {
            "slug": "API/DelayNode",
            "summary": "The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DelayNode"
        }
    ],
    "the-dynamicscompressornode-interface": [
        {
            "slug": "API/DynamicsCompressorNode/DynamicsCompressorNode",
            "summary": "The DynamicsCompressorNode() constructor creates a new DynamicsCompressorNode object which provides a compression effect, which lowers the volume of the loudest parts of the signal",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before version 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "DynamicsCompressorNode()"
        }
    ],
    "the-iirfilternode-interface": [
        {
            "slug": "API/IIRFilterNode",
            "summary": "The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR)  filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                }
            },
            "title": "IIRFilterNode"
        }
    ],
    "the-mediastreamaudiodestinationnode-interface": [
        {
            "slug": "API/MediaStreamAudioDestinationNode",
            "summary": "Inherits properties from its parent, AudioNode.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MediaStreamAudioDestinationNode"
        }
    ],
    "the-mediastreamaudiosourcenode-interface": [
        {
            "slug": "API/MediaStreamAudioSourceNode",
            "summary": "The MediaStreamAudioSourceNode interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Cqapture and Streams APIs.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MediaStreamAudioSourceNode"
        }
    ],
    "the-oscillatornode-interface": [
        {
            "slug": "API/OscillatorNode",
            "summary": "The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created\u2014in effect, a constant tone.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode"
        }
    ],
    "the-pannernode-interface": [
        {
            "slug": "API/PannerNode",
            "summary": "A PannerNode always has exactly one input and one output: the input can be mono or stereo but the output is always stereo (2 channels); you can't have panning effects without at least two audio channels!",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode"
        }
    ],
    "the-periodicwave-interface": [
        {
            "slug": "API/PeriodicWave/PeriodicWave",
            "summary": "The PeriodicWave() constructor of the Web Audio API creates a new PeriodicWave object instance.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "chrome_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "42"
                },
                "opera_android": {
                    "version_added": "42"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "notes": "Before Chrome 59, the default values were not supported.",
                    "version_added": "55"
                }
            },
            "title": "PeriodicWave.PeriodicWave()"
        }
    ],
    "the-stereopannernode-interface": [
        {
            "slug": "API/StereoPannerNode",
            "summary": "The pan property takes a unitless value between -1 (full left pan) and 1 (full right pan). This interface was introduced as a much simpler way to apply a simple panning effect than having to use a full PannerNode.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "41"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": {
                    "version_added": "37"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "28"
                },
                "opera_android": {
                    "version_added": "28"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "41"
                }
            },
            "title": "StereoPannerNode"
        }
    ],
    "the-waveshapernode-interface": [
        {
            "slug": "API/WaveShaperNode",
            "summary": "A WaveShaperNode always has exactly one input and one output.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WaveShaperNode"
        }
    ],
    "widl-AnalyserNode-getByteFrequencyData-void-Uint8Array-array": [
        {
            "slug": "API/AnalyserNode/getByteFrequencyData",
            "summary": "The getByteFrequencyData() method of the AnalyserNode interface copies the current frequency data into a Uint8Array (unsigned byte array) passed into it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.getByteFrequencyData()"
        }
    ],
    "widl-AnalyserNode-getByteTimeDomainData-void-Uint8Array-array": [
        {
            "slug": "API/AnalyserNode/getByteTimeDomainData",
            "summary": "The getByteTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.getByteTimeDomainData()"
        }
    ],
    "widl-AnalyserNode-getFloatFrequencyData-void-Float32Array-array": [
        {
            "slug": "API/AnalyserNode/getFloatFrequencyData",
            "summary": "The getFloatFrequencyData() method of the AnalyserNode Interface copies the current frequency data into a Float32Array array passed into it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.getFloatFrequencyData()"
        }
    ],
    "widl-AnalyserNode-getFloatTimeDomainData-void-Float32Array-array": [
        {
            "slug": "API/AnalyserNode/getFloatTimeDomainData",
            "summary": "The getFloatTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Float32Array array passed into it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.getFloatTimeDomainData()"
        }
    ],
    "widl-AnalyserNode-minDecibels": [
        {
            "slug": "API/AnalyserNode/minDecibels",
            "summary": "The minDecibels property of the AnalyserNode interface is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values \u2014 basically, this specifies the minimum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.minDecibels"
        }
    ],
    "widl-AnalyserNode-smoothingTimeConstant": [
        {
            "slug": "API/AnalyserNode/smoothingTimeConstant",
            "summary": "The smoothingTimeConstant property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame. It's basically an average between the current buffer and the last buffer the AnalyserNode processed, and results in a much smoother set of value changes over time.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AnalyserNode.smoothingTimeConstant"
        }
    ],
    "widl-AudioBuffer-copyFromChannel-void-Float32Array-destination-long-channelNumber-unsigned-long-startInChannel": [
        {
            "slug": "API/AudioBuffer/copyFromChannel",
            "summary": "The copyFromChannel() method of the AudioBuffer interface copies the audio sample data from the specified channel of the AudioBuffer to a specified Float32Array.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer.copyFromChannel()"
        }
    ],
    "widl-AudioBuffer-copyToChannel-void-Float32Array-source-long-channelNumber-unsigned-long-startInChannel": [
        {
            "slug": "API/AudioBuffer/copyToChannel",
            "summary": "The copyToChannel() method of the AudioBuffer interface copies the samples to the specified channel of the AudioBuffer, from the source array.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer.copyToChannel()"
        }
    ],
    "widl-AudioBuffer-duration": [
        {
            "slug": "API/AudioBuffer/duration",
            "summary": "A double.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer.duration"
        }
    ],
    "widl-AudioBuffer-length": [
        {
            "slug": "API/AudioBuffer/length",
            "summary": "The length property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer.length"
        }
    ],
    "widl-AudioBuffer-numberOfChannels": [
        {
            "slug": "API/AudioBuffer/numberOfChannels",
            "summary": "An integer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer.numberOfChannels"
        }
    ],
    "widl-AudioBuffer-sampleRate": [
        {
            "slug": "API/AudioBuffer/sampleRate",
            "summary": "A floating-point value indicating the current smaple rate of the buffer's data, in samples per second.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBuffer.sampleRate"
        }
    ],
    "widl-AudioBufferSourceNode-buffer": [
        {
            "slug": "API/AudioBufferSourceNode/buffer",
            "summary": "The buffer property of the AudioBufferSourceNode interface provides the ability to play back audio using an AudioBuffer as the source of the sound data.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Firefox currently handles the value <code>null</code> incorrectly. Instead of producing a node that generates a single channel of silence, the node becomes unusable and will be ignored if you attempt to connect it to anything.",
                    "version_added": "25"
                },
                "firefox_android": {
                    "notes": "Firefox currently handles the value <code>null</code> incorrectly. Instead of producing a node that generates a single channel of silence, the node becomes unusable and will be ignored if you attempt to connect it to anything.",
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode.buffer"
        }
    ],
    "widl-AudioBufferSourceNode-loop": [
        {
            "slug": "API/AudioBufferSourceNode/loop",
            "summary": "The loop property's default value is false.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode.loop"
        }
    ],
    "widl-AudioBufferSourceNode-loopEnd": [
        {
            "slug": "API/AudioBufferSourceNode/loopEnd",
            "summary": "A floating-point number indicating the offset, in seconds, into the audio buffer at which each loop will loop return to the beginning of the loop (that is, the current play time gets reset to AudioBufferSourceNode.loopStart). This property is only used if the loop property is true.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode.loopEnd"
        }
    ],
    "widl-AudioBufferSourceNode-loopStart": [
        {
            "slug": "API/AudioBufferSourceNode/loopStart",
            "summary": "The loopStart property of the AudioBufferSourceNode interface is a floating-point value indicating, in seconds, where in the AudioBuffer the restart of the play must happen.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode.loopStart"
        }
    ],
    "widl-AudioBufferSourceNode-playbackRate": [
        {
            "slug": "API/AudioBufferSourceNode/playbackRate",
            "summary": "The playbackRate property of the AudioBufferSourceNode interface Is a k-rate AudioParam that defines the speed at which the audio asset will be played.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode.playbackRate"
        }
    ],
    "widl-AudioBufferSourceNode-start-void-double-when-double-offset-double-duration": [
        {
            "slug": "API/AudioBufferSourceNode/start",
            "summary": "undefined.",
            "support": {
                "chrome": {
                    "version_added": "14",
                    "version_removed": "57"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioBufferSourceNode.start()"
        }
    ],
    "widl-AudioContext-close-Promise-void": [
        {
            "slug": "API/AudioContext/close",
            "summary": "The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": {
                    "version_added": "40"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                }
            },
            "title": "AudioContext.close()"
        }
    ],
    "widl-AudioContext-createMediaElementSource-MediaElementAudioSourceNode-HTMLMediaElement-mediaElement": [
        {
            "slug": "API/AudioContext/createMediaElementSource",
            "summary": "For more details about media element audio source nodes, check out the MediaElementAudioSourceNode reference page.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioContext.createMediaElementSource()"
        }
    ],
    "widl-AudioContext-createMediaStreamDestination-MediaStreamAudioDestinationNode": [
        {
            "slug": "API/AudioContext/createMediaStreamDestination",
            "summary": "The MediaStream is created when the node is created and is accessible via the MediaStreamAudioDestinationNode's stream attribute. This stream can be used in a similar way as a MediaStream obtained via navigator.getUserMedia \u2014 it can, for example, be sent to a remote peer using the RTCPeerConnection addStream() method.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioContext.createMediaStreamDestination()"
        }
    ],
    "widl-AudioContext-getOutputTimestamp-AudioTimestamp": [
        {
            "slug": "API/AudioContext/getOutputTimestamp",
            "summary": "The getOutputTimestamp() property of the AudioContext interface returns a new AudioTimestamp object containing two correlated context's audio stream position values. ",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": {
                    "version_added": "57"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "44"
                },
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "7.0"
                },
                "webview_android": {
                    "version_added": "57"
                }
            },
            "title": "AudioContext.getOutputTimestamp()"
        }
    ],
    "widl-AudioContext-suspend-Promise-void": [
        {
            "slug": "API/AudioContext/suspend",
            "summary": "The suspend() method of the AudioContext Interface suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process \u2014 this is useful if you want an application to power down the audio hardware when it will not be using an audio context for a while.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": "43"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": {
                    "version_added": "40"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "43"
                }
            },
            "title": "AudioContext.suspend()"
        }
    ],
    "widl-AudioDestinationNode-maxChannelCount": [
        {
            "slug": "API/AudioDestinationNode/maxChannelCount",
            "summary": "An unsigned long.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioDestinationNode.maxChannelCount"
        }
    ],
    "widl-AudioListener-forwardX": [
        {
            "slug": "API/AudioListener/forwardX",
            "summary": "The forwardX read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the forward direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.forwardX"
        }
    ],
    "widl-AudioListener-forwardY": [
        {
            "slug": "API/AudioListener/forwardY",
            "summary": "The forwardY read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the forward direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.forwardY"
        }
    ],
    "widl-AudioListener-forwardZ": [
        {
            "slug": "API/AudioListener/forwardZ",
            "summary": "The forwardZ read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the forward direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.forwardZ"
        }
    ],
    "widl-AudioListener-positionX": [
        {
            "slug": "API/AudioListener/positionX",
            "summary": "The positionX read-only property of the AudioListener interface is an AudioParam representing the x position of the listener in 3D cartesian space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.positionX"
        }
    ],
    "widl-AudioListener-positionY": [
        {
            "slug": "API/AudioListener/positionY",
            "summary": "The positionY read-only property of the AudioListener interface is an AudioParam representing the y position of the listener in 3D cartesian space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.positionY"
        }
    ],
    "widl-AudioListener-positionZ": [
        {
            "slug": "API/AudioListener/positionZ",
            "summary": "The positionZ read-only property of the AudioListener interface is an AudioParam representing the z position of the listener in 3D cartesian space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.positionZ"
        }
    ],
    "widl-AudioListener-upX": [
        {
            "slug": "API/AudioListener/upX",
            "summary": "The upX read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the up direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.upX"
        }
    ],
    "widl-AudioListener-upY": [
        {
            "slug": "API/AudioListener/upY",
            "summary": "The upY read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the up direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.upY"
        }
    ],
    "widl-AudioListener-upZ": [
        {
            "slug": "API/AudioListener/upZ",
            "summary": "The upZ read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the up direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Supports a deprecated way of setting orientation \u2014 the <code>setOrientation()</code> method.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "AudioListener.upZ"
        }
    ],
    "widl-AudioNode-channelCount": [
        {
            "slug": "API/AudioNode/channelCount",
            "summary": "The channelCount property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.channelCount"
        },
        {
            "slug": "API/AudioNode/channelCount",
            "summary": "The channelCount property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.channelCount"
        }
    ],
    "widl-AudioNode-channelInterpretation": [
        {
            "slug": "API/AudioNode/channelInterpretation",
            "summary": "When the number of channels doesn't match between an input and an output, up- or down-mixing happens according the following rules. This can be somewhat controlled by setting the AudioNode.channelInterpretation property to speakers or discrete:",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.channelInterpretation"
        }
    ],
    "widl-AudioNode-connect-AudioNode-AudioNode-destination-unsigned-long-output-unsigned-long-input": [
        {
            "slug": "API/AudioNode/connect",
            "summary": "If the destination is a node, connect() returns a reference to the destination AudioNode object, allowing you to chain multiple connect() calls. In some browsers, older implementations of this interface return undefined.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.connect()"
        }
    ],
    "widl-AudioNode-connect-void-AudioParam-destination-unsigned-long-output": [
        {
            "slug": "API/AudioNode/connect",
            "summary": "If the destination is a node, connect() returns a reference to the destination AudioNode object, allowing you to chain multiple connect() calls. In some browsers, older implementations of this interface return undefined.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.connect()"
        }
    ],
    "widl-AudioNode-context": [
        {
            "slug": "API/AudioNode/context",
            "summary": "The read-only context property of the AudioNode interface returns the associated BaseAudioContext, that is the object representing the processing graph the node is participating in.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.context"
        }
    ],
    "widl-AudioNode-disconnect-void": [
        {
            "slug": "API/AudioNode/disconnect",
            "summary": "undefined",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.disconnect()"
        }
    ],
    "widl-AudioNode-numberOfInputs": [
        {
            "slug": "API/AudioNode/numberOfInputs",
            "summary": "The numberOfInputs property of the AudioNode interface returns the number of inputs feeding the node.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.numberOfInputs"
        }
    ],
    "widl-AudioNode-numberOfOutputs": [
        {
            "slug": "API/AudioNode/numberOfOutputs",
            "summary": "The numberOfOutputs property of the AudioNode interface returns the number of outputs coming out of the node.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioNode.numberOfOutputs"
        }
    ],
    "widl-AudioParam-cancelAndHoldAtTime-AudioParam-double-cancelTime": [
        {
            "slug": "API/AudioParam/cancelAndHoldAtTime",
            "summary": "The cancelAndHoldAtTime() property of the AudioParam interface cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods.",
            "support": {
                "chrome": [
                    {
                        "version_added": "57"
                    },
                    {
                        "alternative_name": "cancelValuesAndHoldAtTime()",
                        "version_added": true,
                        "version_removed": "56"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "alternative_name": "cancelValuesAndHoldAtTime()",
                        "version_added": true,
                        "version_removed": "56"
                    }
                ],
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "cancelValuesAndHoldAtTime()",
                        "version_added": true,
                        "version_removed": "43"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "cancelValuesAndHoldAtTime()",
                        "version_added": true,
                        "version_removed": "43"
                    }
                ],
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "7.0"
                },
                "webview_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "alternative_name": "cancelValuesAndHoldAtTime()",
                        "version_added": true,
                        "version_removed": "56"
                    }
                ]
            },
            "title": "AudioParam.cancelAndHoldAtTime()"
        }
    ],
    "widl-AudioParam-cancelScheduledValues-void-double-startTime": [
        {
            "slug": "API/AudioParam/cancelScheduledValues",
            "summary": "A reference to this AudioParam object. In some older implementations this method returns void.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.cancelScheduledValues()"
        }
    ],
    "widl-AudioParam-exponentialRampToValueAtTime-void-float-value-double-endTime": [
        {
            "slug": "API/AudioParam/exponentialRampToValueAtTime",
            "summary": "A reference to this AudioParam object. In some browsers older implementations of this interface return void.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.exponentialRampToValueAtTime()"
        }
    ],
    "widl-AudioParam-linearRampToValueAtTime-void-float-value-double-endTime": [
        {
            "slug": "API/AudioParam/linearRampToValueAtTime",
            "summary": "NOTE: both the example and live example are incorrect, see https://github.com/WebAudio/web-audio-api/issues/341",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "AudioParam.linearRampToValueAtTime()"
        }
    ],
    "widl-BiquadFilterNode-Q": [
        {
            "slug": "API/BiquadFilterNode/Q",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BiquadFilterNode.Q"
        }
    ],
    "widl-BiquadFilterNode-detune": [
        {
            "slug": "API/BiquadFilterNode/detune",
            "summary": "An a-rate AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BiquadFilterNode.detune"
        }
    ],
    "widl-BiquadFilterNode-frequency": [
        {
            "slug": "API/BiquadFilterNode/frequency",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BiquadFilterNode.frequency"
        }
    ],
    "widl-BiquadFilterNode-gain": [
        {
            "slug": "API/BiquadFilterNode/gain",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BiquadFilterNode.gain"
        }
    ],
    "widl-BiquadFilterNode-type": [
        {
            "slug": "API/BiquadFilterNode/type",
            "summary": "A string (enum) representing a BiquadFilterType.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "BiquadFilterNode.type"
        }
    ],
    "widl-ConstantSourceNode-offset": [
        {
            "slug": "API/ConstantSourceNode/offset",
            "summary": "The read-only offset property of the ConstantSourceNode interface returns a AudioParam object indicating the numeric a-rate value which is always returned by the source when asked for the next sample.",
            "support": {
                "chrome": {
                    "version_added": "56"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "notes": "This property is still available, but via the inheritance of <code>AudioScheduledSourceNode</code>.",
                    "version_added": "52",
                    "version_removed": "53"
                },
                "firefox_android": {
                    "notes": "This property is still available, but via the inheritance of <code>AudioScheduledSourceNode</code>.",
                    "version_added": "52",
                    "version_removed": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "ConstantSourceNode.offset"
        }
    ],
    "widl-ConvolverNode-buffer": [
        {
            "slug": "API/ConvolverNode/buffer",
            "summary": "An AudioBuffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ConvolverNode.buffer"
        }
    ],
    "widl-ConvolverNode-normalize": [
        {
            "slug": "API/ConvolverNode/normalize",
            "summary": "The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ConvolverNode.normalize"
        }
    ],
    "widl-DynamicsCompressorNode-attack": [
        {
            "slug": "API/DynamicsCompressorNode/attack",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DynamicsCompressorNode.attack"
        }
    ],
    "widl-DynamicsCompressorNode-knee": [
        {
            "slug": "API/DynamicsCompressorNode/knee",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DynamicsCompressorNode.knee"
        }
    ],
    "widl-DynamicsCompressorNode-ratio": [
        {
            "slug": "API/DynamicsCompressorNode/ratio",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DynamicsCompressorNode.ratio"
        }
    ],
    "widl-DynamicsCompressorNode-reduction": [
        {
            "slug": "API/DynamicsCompressorNode/reduction",
            "summary": "The reduction read-only property of the DynamicsCompressorNode interface is a float representing the amount of gain reduction currently applied by the compressor to the signal.",
            "support": {
                "chrome": {
                    "notes": "Before version 52, this was an <code>AudioParam.</code>.",
                    "version_added": "14"
                },
                "chrome_android": {
                    "notes": "Before version 52, this was an <code>AudioParam.</code>.",
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Before version 52, this was an <code>AudioParam.</code>.",
                    "version_added": true
                }
            },
            "title": "DynamicsCompressorNode.reduction"
        }
    ],
    "widl-DynamicsCompressorNode-release": [
        {
            "slug": "API/DynamicsCompressorNode/release",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DynamicsCompressorNode.release"
        }
    ],
    "widl-DynamicsCompressorNode-threshold": [
        {
            "slug": "API/DynamicsCompressorNode/threshold",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DynamicsCompressorNode.threshold"
        }
    ],
    "widl-GainNode-gain": [
        {
            "slug": "API/GainNode/gain",
            "summary": "An AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GainNode.gain"
        }
    ],
    "widl-MediaStreamAudioDestinationNode-stream": [
        {
            "slug": "API/MediaStreamAudioDestinationNode/stream",
            "summary": "A MediaStream.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MediaStreamAudioDestinationNode.stream"
        }
    ],
    "widl-OfflineAudioContext-length": [
        {
            "slug": "API/OfflineAudioContext/length",
            "summary": "The length property of the OfflineAudioContext interface returns an integer representing the size of the buffer in sample-frames.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": {
                    "version_added": "51"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "38"
                },
                "opera_android": {
                    "version_added": "38"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "51"
                }
            },
            "title": "OfflineAudioContext.length"
        }
    ],
    "widl-OfflineAudioContext-oncomplete": [
        {
            "slug": "API/OfflineAudioContext/oncomplete",
            "summary": "In this simple example, we declare both an AudioContext and an OfflineAudioContext object. We use the AudioContext to load an audio track via XHR (AudioContext.decodeAudioData), then the OfflineAudioContext to render the audio into an AudioBufferSourceNode and play the track through. After the offline audio graph is set up, you need to render it to an AudioBuffer using OfflineAudioContext.startRendering.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OfflineAudioContext.oncomplete"
        }
    ],
    "widl-OfflineAudioContext-resume-Promise-void": [
        {
            "slug": "API/OfflineAudioContext/resume",
            "summary": "The resume() method of the OfflineAudioContext interface resumes the progression of time in an audio context that has been suspended. The promise resolves immediately because the OfflineAudioContext does not require the audio hardware. If the context is not currently suspended or the rendering has not started, the promise is rejected with InvalidStateError.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                }
            },
            "title": "OfflineAudioContext.resume()"
        }
    ],
    "widl-OfflineAudioContext-startRendering-Promise-AudioBuffer": [
        {
            "slug": "API/OfflineAudioContext/startRendering",
            "summary": "The startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OfflineAudioContext.startRendering()"
        }
    ],
    "widl-OfflineAudioContext-suspend-Promise-void--double-suspendTime": [
        {
            "slug": "API/OfflineAudioContext/suspend",
            "summary": "The suspend() method of the OfflineAudioContext interface schedules a suspension of the time progression in the audio context at the specified time and returns a promise. This is generally useful at the time of manipulating the audio graph synchronously on OfflineAudioContext.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": "49"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "36"
                },
                "opera_android": {
                    "version_added": "36"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "49"
                }
            },
            "title": "OfflineAudioContext.suspend()"
        }
    ],
    "widl-OscillatorNode-detune": [
        {
            "slug": "API/OscillatorNode/detune",
            "summary": "An a-rate AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode.detune"
        }
    ],
    "widl-OscillatorNode-frequency": [
        {
            "slug": "API/OscillatorNode/frequency",
            "summary": "An a-rate AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode.frequency"
        }
    ],
    "widl-OscillatorNode-onended": [
        {
            "slug": "API/OscillatorNode/onended",
            "summary": "The onended property of the OscillatorNode interface is used to set the event handler for the ended event, which fires when the tone has stopped playing.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode.onended"
        }
    ],
    "widl-OscillatorNode-setPeriodicWave-void-PeriodicWave-periodicWave": [
        {
            "slug": "API/OscillatorNode/setPeriodicWave",
            "summary": "The setPeriodicWave() method of the OscillatorNode interface is used to point to a PeriodicWave defining a periodic waveform that can be used to shape the oscillator's output, when type is custom.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode.setPeriodicWave()"
        }
    ],
    "widl-OscillatorNode-start-void-double-when": [
        {
            "slug": "API/OscillatorNode/start",
            "summary": "The following example shows basic usage of an AudioContext to create an oscillator node. For an applied example, check out our Violent Theremin demo (see app.js for relevant code).",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 30, the <code>when</code> parameter was not optional.",
                    "version_added": "25"
                },
                "firefox_android": {
                    "notes": "Before Firefox 30, the <code>when</code> parameter was not optional.",
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode.start()"
        }
    ],
    "widl-OscillatorNode-stop-void-double-when": [
        {
            "slug": "API/OscillatorNode/stop",
            "summary": "The following example shows basic usage of an AudioContext to create an oscillator node. For an applied example, check out our Violent Theremin demo (see app.js for relevant code).",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 30, the <code>when</code> parameter was not optional.",
                    "version_added": "25"
                },
                "firefox_android": {
                    "notes": "Before Firefox 30, the <code>when</code> parameter was not optional.",
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode.stop()"
        }
    ],
    "widl-OscillatorNode-type": [
        {
            "slug": "API/OscillatorNode/type",
            "summary": "A DOMString specifying the shape of oscillator wave. The different available values are:",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "OscillatorNode.type"
        }
    ],
    "widl-PannerNode-coneInnerAngle": [
        {
            "slug": "API/PannerNode/coneInnerAngle",
            "summary": "A double.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.coneInnerAngle"
        }
    ],
    "widl-PannerNode-coneOuterAngle": [
        {
            "slug": "API/PannerNode/coneOuterAngle",
            "summary": "A double.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.coneOuterAngle"
        }
    ],
    "widl-PannerNode-coneOuterGain": [
        {
            "slug": "API/PannerNode/coneOuterGain",
            "summary": "The coneOuterGain property of the PannerNode interface is a double value, describing the amount of volume reduction outside the cone, defined by the coneOuterAngle attribute.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.coneOuterGain"
        }
    ],
    "widl-PannerNode-distanceModel": [
        {
            "slug": "API/PannerNode/distanceModel",
            "summary": "A enum \u2014 see DistanceModelType.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.distanceModel"
        }
    ],
    "widl-PannerNode-maxDistance": [
        {
            "slug": "API/PannerNode/maxDistance",
            "summary": "A double. The default is 10000, and non-positive values are not allowed.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.maxDistance"
        }
    ],
    "widl-PannerNode-orientationX": [
        {
            "slug": "API/PannerNode/orientationX",
            "summary": "An AudioParam whose value is the X component of the direction in which the audio source is facing, in 3D Cartesian coordinate space.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.orientationX"
        }
    ],
    "widl-PannerNode-orientationY": [
        {
            "slug": "API/PannerNode/orientationY",
            "summary": "An AudioParam whose value is the Y component of the direction the audio source is facing, in 3D Cartesian coordinate space.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.orientationY"
        }
    ],
    "widl-PannerNode-orientationZ": [
        {
            "slug": "API/PannerNode/orientationZ",
            "summary": "An AudioParam whose value is the Z component of the direction the audio source is facing, in 3D Cartesian coordinate space.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.orientationZ"
        }
    ],
    "widl-PannerNode-panningModel": [
        {
            "slug": "API/PannerNode/panningModel",
            "summary": "A enum \u2014 see PanningModelType.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.panningModel"
        }
    ],
    "widl-PannerNode-positionX": [
        {
            "slug": "API/PannerNode/positionX",
            "summary": "An AudioParam whose value is the X coordinate of the audio source's position, in 3D Cartesian coordinates. The default value is 0.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.positionX"
        }
    ],
    "widl-PannerNode-positionY": [
        {
            "slug": "API/PannerNode/positionY",
            "summary": "An AudioParam whose value is the Y coordinate of the audio source's position, in 3D Cartesian coordinates.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.positionY"
        }
    ],
    "widl-PannerNode-positionZ": [
        {
            "slug": "API/PannerNode/positionZ",
            "summary": "An AudioParam whose value is the Z coordinate of the audio source's position, in 3D Cartesian coordinates.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.positionZ"
        }
    ],
    "widl-PannerNode-refDistance": [
        {
            "slug": "API/PannerNode/refDistance",
            "summary": "A non-negative number. If the value is set to less than 0, a RangeError is thrown.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.refDistance"
        }
    ],
    "widl-PannerNode-rolloffFactor": [
        {
            "slug": "API/PannerNode/rolloffFactor",
            "summary": "A number whose range depends on the distanceModel of the panner as follows (negative values are not allowed):",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.rolloffFactor"
        }
    ],
    "widl-PannerNode-setOrientation-void-double-x-double-y-double-z": [
        {
            "slug": "API/PannerNode/setOrientation",
            "summary": "Void.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.setOrientation()"
        }
    ],
    "widl-PannerNode-setPosition-void-double-x-double-y-double-z": [
        {
            "slug": "API/PannerNode/setPosition",
            "summary": "Void.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PannerNode.setPosition()"
        }
    ],
    "widl-StereoPannerNode-pan": [
        {
            "slug": "API/StereoPannerNode/pan",
            "summary": "An a-rate AudioParam containing the panning to apply.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "41"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": {
                    "version_added": "37"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "28"
                },
                "opera_android": {
                    "version_added": "28"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "41"
                }
            },
            "title": "StereoPannerNode.pan"
        }
    ],
    "widl-WaveShaperNode-curve": [
        {
            "slug": "API/WaveShaperNode/curve",
            "summary": "The curve property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WaveShaperNode.curve"
        }
    ],
    "widl-WaveShaperNode-oversample": [
        {
            "slug": "API/WaveShaperNode/oversample",
            "summary": "The oversample property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying a distortion effect to the audio signal.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WaveShaperNode.oversample"
        }
    ]
}
