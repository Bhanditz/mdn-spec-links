{
    "2dcontext": [
        {
            "slug": "API/CanvasRenderingContext2D",
            "summary": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a canvas element. It is used for drawing shapes, text, images, and other objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D"
        }
    ],
    "abstractworker": [
        {
            "slug": "API/AbstractWorker",
            "summary": "The AbstractWorker interface of the Web Workers API is an abstract interface that defines properties and methods that are common to all types of worker, including not only the basic Worker, but also ServiceWorker and SharedWorker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "AbstractWorker"
        }
    ],
    "animation-frames": [
        {
            "slug": "API/Window/requestAnimationFrame",
            "summary": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation before the next repaint. The method takes a callback as an argument to be invoked before the repaint.",
            "support": {
                "chrome": [
                    {
                        "version_added": "24"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "10"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "25"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "Callback parameter is a <code>DOMHighResTimestamp</code>. This means ten microsecond precision and zero time as <code>performance.now()</code>.",
                        "version_added": "23"
                    },
                    {
                        "notes": "Callback parameter is a <code>DOMTimestamp</code>. This means millisecond precision and zero time as <code>Date.now()</code>.",
                        "prefix": "moz",
                        "version_added": "11",
                        "version_removed": "42"
                    },
                    {
                        "notes": "Could be called with no input parameters.",
                        "prefix": "moz",
                        "version_added": "4",
                        "version_removed": "11"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "23"
                    },
                    {
                        "prefix": "moz",
                        "version_added": "14",
                        "version_removed": "42"
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": [
                    {
                        "version_added": "15"
                    },
                    {
                        "prefix": "o",
                        "version_added": true
                    }
                ],
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "6.1"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7.1"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6.1"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "window.requestAnimationFrame()"
        }
    ],
    "attr-canvas-height": [
        {
            "slug": "API/HTMLCanvasElement/height",
            "summary": "The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the canvas element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLCanvasElement.height"
        }
    ],
    "attr-canvas-width": [
        {
            "slug": "API/HTMLCanvasElement/width",
            "summary": "The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the canvas element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLCanvasElement.width"
        }
    ],
    "attr-contenteditable": [
        {
            "slug": "HTML/Global_attributes/contenteditable",
            "summary": "The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "contenteditable"
        }
    ],
    "attr-hyperlink-download": [
        {
            "slug": "API/HTMLAnchorElement/download",
            "summary": "The HTMLAnchorElement.download property is a DOMString indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value, if any, specifies the default file name for use in labeling the resource in a local file system. If the name is not a valid file name in the underlying OS, the browser will adjust it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLAnchorElement.download"
        }
    ],
    "attr-img-crossorigin": [
        {
            "slug": "HTML/CORS_settings_attributes",
            "summary": "In HTML5, some HTML elements which provide support for CORS, such as img, video or script, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "The crossorigin attribute: Requesting CORS access to content"
        }
    ],
    "attr-is": [
        {
            "slug": "HTML/Global_attributes/is",
            "summary": "The is global attribute allows you to specify that a standard HTML element should behave like a defined custom built-in element (see Using custom elements for more details).",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": {
                    "version_added": "67"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "55"
                },
                "opera_android": {
                    "version_added": "55"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "67"
                }
            },
            "title": "is"
        }
    ],
    "attr-itemid": [
        {
            "slug": "HTML/Global_attributes/itemid",
            "summary": "The itemid global attribute provides microdata in the form of a unique, global identifier of an item.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "itemid"
        }
    ],
    "attr-itemref": [
        {
            "slug": "HTML/Global_attributes/itemref",
            "summary": "Properties that are not descendants of an element with the itemscope attribute can be associated with an item using the global attribute itemref.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "itemref"
        }
    ],
    "attr-itemscope": [
        {
            "slug": "HTML/Global_attributes/itemscope",
            "summary": "itemscope is a boolean global attribute that defines the scope of associated metadata. Specifying the itemscope attribute for an element creates a new item, which results in a number of name-value pairs that are associated with the element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "itemscope"
        }
    ],
    "attr-itemtype": [
        {
            "slug": "HTML/Global_attributes/itemtype",
            "summary": "The global attribute itemtype specifies the URL of the vocabulary that will be used to define itemprop's (item properties) in the data structure. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "itemtype"
        }
    ],
    "attr-link-rel": [
        {
            "slug": "API/HTMLLinkElement/rel",
            "summary": "The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the link element and the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLinkElement.rel"
        }
    ],
    "attr-media-crossorigin": [
        {
            "slug": "API/HTMLMediaElement/crossOrigin",
            "summary": "The HTMLMediaElement.crossOrigin property is the CORS setting for this image element. See CORS settings attributes for details.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "22"
                    },
                    {
                        "alternative_name": "crossorigin",
                        "version_added": "12",
                        "version_removed": "22"
                    }
                ],
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.crossOrigin"
        }
    ],
    "attr-nonce": [
        {
            "slug": "API/HTMLElement/nonce",
            "summary": "The nonce property of the HTMLElement interface returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "61"
                }
            },
            "title": "HTMLElement.nonce"
        }
    ],
    "attr-slot": [
        {
            "slug": "HTML/Global_attributes/slot",
            "summary": "The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the slot element whose name attribute's value matches that slot attribute's value.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "prefix": "-webkit-",
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "slot"
        }
    ],
    "attr-style-media": [
        {
            "slug": "API/HTMLStyleElement/media",
            "summary": "The HTMLStyleElement.media property specifies the intended destination medium for style information.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLStyleElement.media"
        }
    ],
    "attr-tabindex": [
        {
            "slug": "HTML/Global_attributes/tabindex",
            "summary": "The tabindex global attribute indicates if its element can be focused, and if/where it participates in sequential keyboard navigation (usually with the Tab key, hence the name).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "tabindex"
        }
    ],
    "attr-translate": [
        {
            "slug": "HTML/Global_attributes/translate",
            "summary": "The translate global attribute is an enumerated attribute that is used to specify whether an element's translateable attribute values and its Text node children should be translated when the page is localized, or whether to leave them unchanged.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "translate"
        }
    ],
    "audiotrack": [
        {
            "slug": "API/AudioTrack",
            "summary": "The AudioTrack interface represents a single audio track from one of the HTML media elements, audio or video. ",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "AudioTrack"
        }
    ],
    "audiotracklist": [
        {
            "slug": "API/AudioTrackList",
            "summary": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "AudioTrackList"
        }
    ],
    "autocapitalization": [
        {
            "slug": "HTML/Global_attributes/autocapitalize",
            "summary": "The autocapitalize global attribute is an enumerated attribute that controls whether and how text input is automatically capitalized as it is entered/edited by the user.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "qq_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "uc_android": {
                    "version_added": null
                },
                "uc_chinese_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "autocapitalize"
        }
    ],
    "broadcastchannel": [
        {
            "slug": "API/BroadcastChannel",
            "summary": "The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "BroadcastChannel"
        }
    ],
    "broadcasting-to-other-browsing-contexts": [
        {
            "slug": "API/Broadcast_Channel_API",
            "summary": "The Broadcast Channel API allows simple communication between browsing contexts (that is windows, tabs, frames, or iframes) with the same origin (usually pages from the same site).",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "Broadcast Channel API"
        }
    ],
    "button-state-(type=button)": [
        {
            "slug": "HTML/Element/input/button",
            "summary": "input elements of type \"button\" are rendered as simple push buttons, which can be programmed to control custom functionality anywhere on a webpage as required when assigned an event handler function (typically for the click event).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"button\">"
        }
    ],
    "canvasgradient": [
        {
            "slug": "API/CanvasGradient",
            "summary": "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient() or CanvasRenderingContext2D.createRadialGradient().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 5.0, specifying non-finite values when adding color stops through a call to <code>addColorStop()</code> incorrectly throws <code>SYNTAX_ERR</code> instead of <code>INDEX_SIZE_ERR</code>.",
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.0"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "CanvasGradient"
        }
    ],
    "canvasimagesource": [
        {
            "slug": "API/CanvasImageSource",
            "summary": "CanvasImageSource provides a mechanism for other interfaces to be used as image sources for some methods of the CanvasDrawImage and CanvasFillStrokeStyles interfaces. It\u2019s just an internal helper type to simplify the specification. It\u2019s not an interface and there are no objects implementing it.",
            "support": {},
            "title": "CanvasImageSource"
        }
    ],
    "canvaspattern": [
        {
            "slug": "API/CanvasPattern",
            "summary": "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.0"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "CanvasPattern"
        }
    ],
    "channel-messaging": [
        {
            "slug": "API/Channel_Messaging_API",
            "summary": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "Channel Messaging API"
        },
        {
            "slug": "API/Channel_Messaging_API/Using_channel_messaging",
            "summary": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, or two documents via a SharedWorker) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "Using channel messaging"
        }
    ],
    "checkbox-state-(type=checkbox)": [
        {
            "slug": "HTML/Element/input/checkbox",
            "summary": "input elements of type checkbox are rendered by default as square boxes that are checked (ticked) when activated, like you might see in an official government paper form. They allow you to select single values for submission in a form (or not).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"checkbox\">"
        }
    ],
    "classes": [
        {
            "slug": "HTML/Global_attributes/class",
            "summary": "The class global attribute is a space-separated list of the classes of the element. Classes allows CSS and Javascript to select and access specific elements via the class selectors or functions like the DOM method document.getElementsByClassName.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": {
                    "version_added": "32"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "class"
        }
    ],
    "closeevent": [
        {
            "slug": "API/CloseEvent/CloseEvent",
            "summary": "The CloseEvent() constructor creates a new CloseEvent.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "CloseEvent()"
        }
    ],
    "color-state-(type=color)": [
        {
            "slug": "HTML/Element/input/color",
            "summary": "input elements of type \"color\" provide a user interface element that lets a user specify a color, either by using a visual color picker interface or by entering the color into a text field in \"#rrggbb\" hexadecimal format.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "14"
                },
                "edge_mobile": {
                    "version_added": "14"
                },
                "firefox": {
                    "notes": "Firefox doesn't yet support inputs of type <code>color</code> on Windows Touch.",
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "<input type=\"color\">"
        }
    ],
    "concept-input-type-file-selected": [
        {
            "slug": "API/FileList",
            "summary": "An object of this type is returned by the files property of the HTML input element; this lets you access the list of files selected with the input type=\"file\" element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "FileList"
        }
    ],
    "concept-origin": [
        {
            "slug": "API/Document/origin",
            "summary": "The Document.origin read-only property returns the document's origin. In most cases, this property is equivalent to document.defaultView.location.origin.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "41"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.origin"
        }
    ],
    "contenteditable": [
        {
            "slug": "API/HTMLElement/contentEditable",
            "summary": "The HTMLElement.contentEditable property is used to indicate whether or not the element is editable.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement.contentEditable"
        }
    ],
    "cors-settings-attributes": [
        {
            "slug": "HTML/CORS_settings_attributes",
            "summary": "In HTML5, some HTML elements which provide support for CORS, such as img, video or script, have a crossorigin attribute (crossOrigin property), which lets you configure the CORS requests for the element's fetched data.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "The crossorigin attribute: Requesting CORS access to content"
        }
    ],
    "current-document-readiness": [
        {
            "slug": "API/Document/readyState",
            "summary": "The Document.readyState property of a document describes the loading state of the document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "notes": "Internet Explorer 9 and 10 have bugs where the 'interactive' state can be fired too early before the document has finished parsing.",
                        "version_added": "9"
                    },
                    {
                        "notes": "Only supports 'complete'.",
                        "version_added": "8"
                    }
                ],
                "opera": {
                    "notes": "Opera Presto fires 'complete' late after the 'load' event (in an incorrect order as per HTML5 standard specification).",
                    "version_added": "11"
                },
                "opera_android": {
                    "notes": "Opera Presto fires 'complete' late after the 'load' event (in an incorrect order as per HTML5 standard specification).",
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.readyState"
        }
    ],
    "custom-handlers": [
        {
            "slug": "API/Navigator/registerProtocolHandler",
            "summary": "The Navigator method registerProtocolHandler() lets web sites register themselves as possible handlers for particular protocols.",
            "support": {
                "chrome": {
                    "notes": "Protocol whitelist includes <code>mailto</code>, <code>mms</code>, <code>nntp</code>, <code>rtsp</code>, and <code>webcal</code>. Custom protocols must be prefixed with <code>web+</code>.",
                    "version_added": "13"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "Navigator.registerProtocolHandler()"
        }
    ],
    "customelementregistry": [
        {
            "slug": "API/CustomElementRegistry",
            "summary": "The CustomElementRegistry interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property. ",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "CustomElementRegistry"
        }
    ],
    "datatransfer": [
        {
            "slug": "API/DataTransfer",
            "summary": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "As of Firefox 52, the <a href='https://developer.mozilla.org/docs/Web/API/DataTransfer/types'><code>DataTransfer.types</code></a> property returns a frozen array of <a href='https://developer.mozilla.org/docs/Web/API/DOMString'><code>DOMString</code></a>s as per spec, rather than a <a href='https://developer.mozilla.org/docs/Web/API/DOMStringList'><code>DOMStringList</code></a>.",
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer"
        }
    ],
    "datatransferitem": [
        {
            "slug": "API/DataTransferItem",
            "summary": "The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransferItem"
        }
    ],
    "datatransferitemlist": [
        {
            "slug": "API/DataTransferItemList",
            "summary": "The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DataTransferItemList"
        }
    ],
    "date-state-(type=date)": [
        {
            "slug": "HTML/Element/input/date",
            "summary": "input elements of type date create input fields that let the user enter a date, either using a text box that automatically validates the content, or using a special date picker interface.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "notes": "The input type is recognized, but there is no date-specific control.",
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"date\">"
        }
    ],
    "dedicatedworkerglobalscope": [
        {
            "slug": "API/DedicatedWorkerGlobalScope",
            "summary": "The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "DedicatedWorkerGlobalScope"
        }
    ],
    "document-domain-feature": [
        {
            "slug": "HTTP/Headers/Feature-Policy/document-domain",
            "summary": "The HTTP Feature-Policy header document-domain directive controls whether the current document is allowed to set document.domain. When this policy is enabled, attempting to set document.domain will fail and cause a SecurityError DOMException to be be thrown.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "document-domain"
        }
    ],
    "dom-a-rel": [
        {
            "slug": "API/HTMLAnchorElement/rel",
            "summary": "The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the a element and the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLAnchorElement.rel"
        }
    ],
    "dom-a-rellist": [
        {
            "slug": "API/HTMLAnchorElement/relList",
            "summary": "The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the a element and the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLAnchorElement.relList"
        }
    ],
    "dom-accesskeylabel": [
        {
            "slug": "API/HTMLElement/accessKeyLabel",
            "summary": "The HTMLElement.accessKeyLabel read-only property returns a String that represents the element's assigned access key (if any); otherwise it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "accessKeyLabel"
        }
    ],
    "dom-alert": [
        {
            "slug": "API/Window/alert",
            "summary": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "notes": "Starting with Opera 53, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "Starting with Opera 53, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                }
            },
            "title": "Window.alert()"
        }
    ],
    "dom-area-rel": [
        {
            "slug": "API/HTMLAreaElement/rel",
            "summary": "The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the a element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "HTMLAreaElement.rel"
        }
    ],
    "dom-area-rellist": [
        {
            "slug": "API/HTMLAreaElement/relList",
            "summary": "The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the area element and the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLAreaElement.relList"
        }
    ],
    "dom-atob": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/atob",
            "summary": "The WindowOrWorkerGlobalScope.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>atob()</code> ignores all space characters in the argument to comply with the latest HTML5 spec (see <a href='https://bugzil.la/711180'>bug 711180</a>).",
                        "version_added": "27"
                    },
                    {
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "57"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>atob()</code> ignores all space characters in the argument to comply with the latest HTML5 spec (see <a href='https://bugzil.la/711180'>bug 711180</a>).",
                        "version_added": "27"
                    },
                    {
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "57"
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WindowOrWorkerGlobalScope.atob()"
        }
    ],
    "dom-audiotrack-enabled": [
        {
            "slug": "API/AudioTrack/enabled",
            "summary": "The AudioTrack property enabled specifies whether or not the described audio track is currently enabled for use. If the track is disabled by setting enabled to false, the track is muted and does not produce audio.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "AudioTrack.enabled"
        }
    ],
    "dom-audiotrack-id": [
        {
            "slug": "API/AudioTrack/id",
            "summary": "The id property contains a string which uniquely identifies the track represented by the AudioTrack.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "AudioTrack.id"
        }
    ],
    "dom-audiotrack-kind": [
        {
            "slug": "API/AudioTrack/kind",
            "summary": "The kind property contains a string indicating the category of audio contained in the AudioTrack.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "AudioTrack.kind"
        }
    ],
    "dom-audiotrack-label": [
        {
            "slug": "API/AudioTrack/label",
            "summary": "The read-only AudioTrack property label returns a string specifying the audio track's human-readable label, if one is available; otherwise, it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "AudioTrack.label"
        }
    ],
    "dom-audiotrack-language": [
        {
            "slug": "API/AudioTrack/language",
            "summary": "The read-only AudioTrack property language returns a string identifying the language used in the audio track.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "AudioTrack.language"
        }
    ],
    "dom-audiotracklist-gettrackbyid": [
        {
            "slug": "API/AudioTrackList/getTrackById",
            "summary": "The AudioTrackList method getTrackById() returns the first AudioTrack object from the track list whose id matches the specified string.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "AudioTrackList.getTrackById()"
        }
    ],
    "dom-audiotracklist-length": [
        {
            "slug": "API/AudioTrackList/length",
            "summary": "The read-only AudioTrackList property length returns the number of entries in the AudioTrackList, each of which is an AudioTrack representing one audio track in the media element.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "AudioTrackList.length"
        }
    ],
    "dom-blur": [
        {
            "slug": "API/HTMLElement/blur",
            "summary": "The HTMLElement.blur() method removes keyboard focus from the current element.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLElement.blur()"
        }
    ],
    "dom-broadcastchannel": [
        {
            "slug": "API/BroadcastChannel/BroadcastChannel",
            "summary": "The BroadcastChannel() constructor creates a new BroadcastChannel and connects it to the underlying channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "BroadcastChannel()"
        }
    ],
    "dom-broadcastchannel-close": [
        {
            "slug": "API/BroadcastChannel/close",
            "summary": "The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "BroadcastChannel.close()"
        }
    ],
    "dom-broadcastchannel-name": [
        {
            "slug": "API/BroadcastChannel/name",
            "summary": "The read-only BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "BroadcastChannel.name"
        }
    ],
    "dom-broadcastchannel-postmessage": [
        {
            "slug": "API/BroadcastChannel/postMessage",
            "summary": "The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browser context with the same origin. The message is transmitted as a message event targeted at each BroadcastChannel bound to the channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "BroadcastChannel.postMessage()"
        }
    ],
    "dom-btoa": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/btoa",
            "summary": "The WindowOrWorkerGlobalScope.btoa() method creates a base-64 encoded ASCII string from a String object in which each character in the string is treated as a byte of binary data.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>btoa()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>atob()</code> now defined on <code><A href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WindowOrWorkerGlobalScope.btoa()"
        }
    ],
    "dom-canvas-getcontext": [
        {
            "slug": "API/HTMLCanvasElement/getContext",
            "summary": "The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLCanvasElement.getContext()"
        }
    ],
    "dom-canvas-toblob": [
        {
            "slug": "API/HTMLCanvasElement/toBlob",
            "summary": "The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "19"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "prefix": "ms",
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "notes": "See <a href='https://bugs.webkit.org/show_bug.cgi?id=71270'>WebKit bug 71270</a>.",
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                }
            },
            "title": "HTMLCanvasElement.toBlob()"
        }
    ],
    "dom-canvas-todataurl": [
        {
            "slug": "API/HTMLCanvasElement/toDataURL",
            "summary": "The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "19"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLCanvasElement.toDataURL()"
        }
    ],
    "dom-canvasgradient-addcolorstop": [
        {
            "slug": "API/CanvasGradient/addColorStop",
            "summary": "The CanvasGradient.addColorStop() method adds a new color stop, defined by an offset and a color, to a given canvas gradient.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "CanvasGradient.addColorStop()"
        }
    ],
    "dom-canvaspattern-settransform": [
        {
            "slug": "API/CanvasPattern/setTransform",
            "summary": "The CanvasPattern.setTransform() method uses an SVGMatrix object as the pattern's transformation matrix and invokes it on the pattern.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "CanvasPattern.setTransform()"
        }
    ],
    "dom-clearinterval": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/clearInterval",
            "summary": "The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearInterval()"
        },
        {
            "slug": "API/WindowOrWorkerGlobalScope/clearInterval",
            "summary": "The clearInterval() method of the WindowOrWorkerGlobalScope mixin cancels a timed, repeating action which was previously established by a call to setInterval().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>clearInterval()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearInterval()"
        }
    ],
    "dom-cleartimeout": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/clearTimeout",
            "summary": "The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearTimeout()"
        },
        {
            "slug": "API/WindowOrWorkerGlobalScope/clearTimeout",
            "summary": "The clearTimeout() method of the WindowOrWorkerGlobalScope mixin cancels a timeout previously established by calling setTimeout().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>clearTimeout()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.clearTimeout()"
        }
    ],
    "dom-confirm": [
        {
            "slug": "API/Window/confirm",
            "summary": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "notes": "In Opera, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "In Opera, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                }
            },
            "title": "Window.confirm()"
        }
    ],
    "dom-context-2d-arc": [
        {
            "slug": "API/CanvasRenderingContext2D/arc",
            "summary": "The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds a circular arc to the current sub-path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.arc()"
        }
    ],
    "dom-context-2d-arcto": [
        {
            "slug": "API/CanvasRenderingContext2D/arcTo",
            "summary": "The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds a circular arc to the current sub-path, using the given control points and radius. The arc is automatically connected to the path's latest point with a straight line, if necessary for the specified parameters.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.arcTo()"
        }
    ],
    "dom-context-2d-beginpath": [
        {
            "slug": "API/CanvasRenderingContext2D/beginPath",
            "summary": "The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.beginPath()"
        }
    ],
    "dom-context-2d-beziercurveto": [
        {
            "slug": "API/CanvasRenderingContext2D/bezierCurveTo",
            "summary": "The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic B\u00e9zier curve to the current sub-path. It requires three points: the first two are control points and the third one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the B\u00e9zier curve.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.bezierCurveTo()"
        }
    ],
    "dom-context-2d-canvas": [
        {
            "slug": "API/CanvasRenderingContext2D/canvas",
            "summary": "The CanvasRenderingContext2D.canvas property, part of the Canvas API, is a read-only reference to the HTMLCanvasElement object that is associated with a given context. It might be null if there is no associated canvas element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.canvas"
        }
    ],
    "dom-context-2d-clearrect": [
        {
            "slug": "API/CanvasRenderingContext2D/clearRect",
            "summary": "The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API erases the pixels in a rectangular area by setting them to transparent black.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.clearRect()"
        }
    ],
    "dom-context-2d-clip": [
        {
            "slug": "API/CanvasRenderingContext2D/clip",
            "summary": "The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the current or given path into the current clipping region. It replaces any previous clipping region.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.clip()"
        }
    ],
    "dom-context-2d-closepath": [
        {
            "slug": "API/CanvasRenderingContext2D/closePath",
            "summary": "The CanvasRenderingContext2D.closePath() method of the Canvas 2D API attempts to add a straight line from the current point to the start of the current sub-path. If the shape has already been closed or has only one point, this function does nothing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.closePath()"
        }
    ],
    "dom-context-2d-createimagedata": [
        {
            "slug": "API/CanvasRenderingContext2D/createImageData",
            "summary": "The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createImageData()"
        }
    ],
    "dom-context-2d-createlineargradient": [
        {
            "slug": "API/CanvasRenderingContext2D/createLinearGradient",
            "summary": "The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line connecting two given coordinates.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createLinearGradient()"
        }
    ],
    "dom-context-2d-createpattern": [
        {
            "slug": "API/CanvasRenderingContext2D/createPattern",
            "summary": "The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image and repetition. This method returns a CanvasPattern.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createPattern()"
        }
    ],
    "dom-context-2d-createradialgradient": [
        {
            "slug": "API/CanvasRenderingContext2D/createRadialGradient",
            "summary": "The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient using the size and coordinates of two circles.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.createRadialGradient()"
        }
    ],
    "dom-context-2d-direction": [
        {
            "slug": "API/CanvasRenderingContext2D/direction",
            "summary": "The CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text direction used to draw text.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "Experimental Web Platform Features",
                            "type": "preference"
                        }
                    ],
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.direction"
        }
    ],
    "dom-context-2d-drawfocusifneeded": [
        {
            "slug": "API/CanvasRenderingContext2D/drawFocusIfNeeded",
            "summary": "The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current or given path, if the specified element is focused.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "32"
                    },
                    {
                        "flags": [
                            {
                                "name": "canvas.focusring.enabled",
                                "type": "preference"
                            }
                        ],
                        "version_added": "29"
                    },
                    {
                        "alternative_name": "drawSystemFocusRing",
                        "version_added": "28"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "32"
                    },
                    {
                        "flags": [
                            {
                                "name": "canvas.focusring.enabled",
                                "type": "preference"
                            }
                        ],
                        "version_added": "29"
                    },
                    {
                        "alternative_name": "drawSystemFocusRing",
                        "version_added": "28"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.drawFocusIfNeeded()"
        }
    ],
    "dom-context-2d-drawimage": [
        {
            "slug": "API/CanvasRenderingContext2D/drawImage",
            "summary": "The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.drawImage()"
        }
    ],
    "dom-context-2d-ellipse": [
        {
            "slug": "API/CanvasRenderingContext2D/ellipse",
            "summary": "The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an elliptical arc to the current sub-path.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "18"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "CanvasRenderingContext2D.ellipse()"
        }
    ],
    "dom-context-2d-fill": [
        {
            "slug": "API/CanvasRenderingContext2D/fill",
            "summary": "The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fillStyle.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.fill()"
        }
    ],
    "dom-context-2d-fillrect": [
        {
            "slug": "API/CanvasRenderingContext2D/fillRect",
            "summary": "The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that is filled according to the current fillStyle.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.fillRect()"
        }
    ],
    "dom-context-2d-fillstyle": [
        {
            "slug": "API/CanvasRenderingContext2D/fillStyle",
            "summary": "The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use inside shapes. The default style is #000 (black).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.fillStyle"
        }
    ],
    "dom-context-2d-filltext": [
        {
            "slug": "API/CanvasRenderingContext2D/fillText",
            "summary": "The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string at the specified coordinates, filling the string's characters with the current fillStyle. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.fillText()"
        }
    ],
    "dom-context-2d-font": [
        {
            "slug": "API/CanvasRenderingContext2D/font",
            "summary": "The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text style to use when drawing text. This string uses the same syntax as the CSS font specifier.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.font"
        }
    ],
    "dom-context-2d-getimagedata": [
        {
            "slug": "API/CanvasRenderingContext2D/getImageData",
            "summary": "The CanvasRenderingContext2D method getImageData() of the Canvas 2D API returns an ImageData object representing the underlying pixel data for a specified portion of the canvas.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": true
                    },
                    {
                        "notes": "<code>getImageData</code> now correctly accepts rectangles that extend beyond the bounds of the canvas; pixels outside the canvas are returned as transparent black and now also returns at least one pixel's worth of image data if a rectangle smaller than one pixel is specified.",
                        "version_added": "5"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": true
                    },
                    {
                        "notes": "<code>getImageData</code> now correctly accepts rectangles that extend beyond the bounds of the canvas; pixels outside the canvas are returned as transparent black and now also returns at least one pixel's worth of image data if a rectangle smaller than one pixel is specified.",
                        "version_added": "5"
                    }
                ],
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.getImageData()"
        }
    ],
    "dom-context-2d-getlinedash": [
        {
            "slug": "API/CanvasRenderingContext2D/getLineDash",
            "summary": "The getLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface gets the current line dash pattern.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.getLineDash()"
        }
    ],
    "dom-context-2d-globalalpha": [
        {
            "slug": "API/CanvasRenderingContext2D/globalAlpha",
            "summary": "The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha (transparency) value that is applied to shapes and images before they are drawn onto the canvas.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.globalAlpha"
        }
    ],
    "dom-context-2d-globalcompositeoperation": [
        {
            "slug": "API/CanvasRenderingContext2D/globalCompositeOperation",
            "summary": "The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.globalCompositeOperation"
        }
    ],
    "dom-context-2d-imagesmoothingenabled": [
        {
            "slug": "API/CanvasRenderingContext2D/imageSmoothingEnabled",
            "summary": "The imageSmoothingEnabled property of the CanvasRenderingContext2D interface, part of the Canvas API, determines whether scaled images are smoothed (true, default) or not (false). On getting the imageSmoothingEnabled property, the last value it was set to is returned.",
            "support": {
                "chrome": [
                    {
                        "version_added": "30"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": true,
                        "version_removed": "30"
                    }
                ],
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "15"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "51"
                    },
                    {
                        "prefix": "moz",
                        "version_added": true,
                        "version_removed": "51"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "51"
                    },
                    {
                        "prefix": "moz",
                        "version_added": true,
                        "version_removed": "51"
                    }
                ],
                "ie": {
                    "prefix": "ms",
                    "version_added": true
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "CanvasRenderingContext2D.imageSmoothingEnabled"
        }
    ],
    "dom-context-2d-ispointinpath": [
        {
            "slug": "API/CanvasRenderingContext2D/isPointInPath",
            "summary": "The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.isPointInPath()"
        }
    ],
    "dom-context-2d-ispointinstroke": [
        {
            "slug": "API/CanvasRenderingContext2D/isPointInStroke",
            "summary": "The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.isPointInStroke()"
        }
    ],
    "dom-context-2d-linecap": [
        {
            "slug": "API/CanvasRenderingContext2D/lineCap",
            "summary": "The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines the shape used to draw the end points of lines.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineCap"
        }
    ],
    "dom-context-2d-linedashoffset": [
        {
            "slug": "API/CanvasRenderingContext2D/lineDashOffset",
            "summary": "The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash offset, or \"phase.\"",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "27"
                    },
                    {
                        "alternative_name": "mozDashOffset",
                        "version_added": "7"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "27"
                    },
                    {
                        "alternative_name": "mozDashOffset",
                        "version_added": "7"
                    }
                ],
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineDashOffset"
        }
    ],
    "dom-context-2d-linejoin": [
        {
            "slug": "API/CanvasRenderingContext2D/lineJoin",
            "summary": "The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines the shape used to join two line segments where they meet.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineJoin"
        }
    ],
    "dom-context-2d-lineto": [
        {
            "slug": "API/CanvasRenderingContext2D/lineTo",
            "summary": "The CanvasRenderingContext2D method lineTo(), part of the Canvas 2D API, adds a straight line to the current sub-path by connecting the sub-path's last point to the specified (x, y) coordinates.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineTo()"
        }
    ],
    "dom-context-2d-linewidth": [
        {
            "slug": "API/CanvasRenderingContext2D/lineWidth",
            "summary": "The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.lineWidth"
        }
    ],
    "dom-context-2d-measuretext": [
        {
            "slug": "API/CanvasRenderingContext2D/measureText",
            "summary": "The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width, for example).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.measureText()"
        }
    ],
    "dom-context-2d-miterlimit": [
        {
            "slug": "API/CanvasRenderingContext2D/miterLimit",
            "summary": "The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit ratio.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.miterLimit"
        }
    ],
    "dom-context-2d-moveto": [
        {
            "slug": "API/CanvasRenderingContext2D/moveTo",
            "summary": "The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API begins a new sub-path at the point specified by the given (x, y) coordinates.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.moveTo()"
        }
    ],
    "dom-context-2d-putimagedata": [
        {
            "slug": "API/CanvasRenderingContext2D/putImageData",
            "summary": "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the canvas. If a dirty rectangle is provided, only the pixels from that rectangle are painted. This method is not affected by the canvas transformation matrix.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.putImageData()"
        }
    ],
    "dom-context-2d-quadraticcurveto": [
        {
            "slug": "API/CanvasRenderingContext2D/quadraticCurveTo",
            "summary": "The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic B\u00e9zier curve to the current sub-path. It requires two points: the first one is a control point and the second one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the quadratic B\u00e9zier curve.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.quadraticCurveTo()"
        }
    ],
    "dom-context-2d-rect": [
        {
            "slug": "API/CanvasRenderingContext2D/rect",
            "summary": "The CanvasRenderingContext2D.rect() method of the Canvas 2D API adds a rectangle to the current path.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.rect()"
        }
    ],
    "dom-context-2d-resettransform": [
        {
            "slug": "API/CanvasRenderingContext2D/resetTransform",
            "summary": "The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current transform to the identity matrix.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": {
                    "version_added": "36"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.resetTransform()"
        }
    ],
    "dom-context-2d-restore": [
        {
            "slug": "API/CanvasRenderingContext2D/restore",
            "summary": "The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.restore()"
        }
    ],
    "dom-context-2d-rotate": [
        {
            "slug": "API/CanvasRenderingContext2D/rotate",
            "summary": "The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.rotate()"
        }
    ],
    "dom-context-2d-save": [
        {
            "slug": "API/CanvasRenderingContext2D/save",
            "summary": "The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.save()"
        }
    ],
    "dom-context-2d-scale": [
        {
            "slug": "API/CanvasRenderingContext2D/scale",
            "summary": "The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units horizontally and/or vertically.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.scale()"
        }
    ],
    "dom-context-2d-scrollpathintoview": [
        {
            "slug": "API/CanvasRenderingContext2D/scrollPathIntoView",
            "summary": "The CanvasRenderingContext2D.scrollPathIntoView() method of the Canvas 2D API scrolls the current or given path into view. It is similar to Element.scrollIntoView().",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "Experimental Web Platform Features",
                            "type": "preference"
                        }
                    ],
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.scrollPathIntoView()"
        }
    ],
    "dom-context-2d-setlinedash": [
        {
            "slug": "API/CanvasRenderingContext2D/setLineDash",
            "summary": "The setLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.setLineDash()"
        }
    ],
    "dom-context-2d-settransform": [
        {
            "slug": "API/CanvasRenderingContext2D/setTransform",
            "summary": "The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix, and then invokes a transformation described by the arguments of this method. This lets you scale, rotate, translate (move), and skew the context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.setTransform()"
        }
    ],
    "dom-context-2d-shadowblur": [
        {
            "slug": "API/CanvasRenderingContext2D/shadowBlur",
            "summary": "The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the amount of blur applied to shadows. The default is 0 (no blur).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowBlur"
        }
    ],
    "dom-context-2d-shadowcolor": [
        {
            "slug": "API/CanvasRenderingContext2D/shadowColor",
            "summary": "The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of shadows.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowColor"
        }
    ],
    "dom-context-2d-shadowoffsetx": [
        {
            "slug": "API/CanvasRenderingContext2D/shadowOffsetX",
            "summary": "The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that shadows will be offset horizontally.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowOffsetX"
        }
    ],
    "dom-context-2d-shadowoffsety": [
        {
            "slug": "API/CanvasRenderingContext2D/shadowOffsetY",
            "summary": "The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that shadows will be offset vertically.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.shadowOffsetY"
        }
    ],
    "dom-context-2d-stroke": [
        {
            "slug": "API/CanvasRenderingContext2D/stroke",
            "summary": "The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes (outlines) the current or given path with the current stroke style.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.stroke()"
        }
    ],
    "dom-context-2d-strokerect": [
        {
            "slug": "API/CanvasRenderingContext2D/strokeRect",
            "summary": "The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API draws a rectangle that is stroked (outlined) according to the current strokeStyle and other context settings.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.strokeRect()"
        }
    ],
    "dom-context-2d-strokestyle": [
        {
            "slug": "API/CanvasRenderingContext2D/strokeStyle",
            "summary": "The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use for the strokes (outlines) around shapes. The default is #000 (black).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.strokeStyle"
        }
    ],
    "dom-context-2d-stroketext": [
        {
            "slug": "API/CanvasRenderingContext2D/strokeText",
            "summary": "The CanvasRenderingContext2D method strokeText(), part of the Canvas 2D API, strokes \u2014 that is, draws the outlines of \u2014 the characters of a text string at the specified coordinates. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.strokeText()"
        }
    ],
    "dom-context-2d-textalign": [
        {
            "slug": "API/CanvasRenderingContext2D/textAlign",
            "summary": "The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text alignment used when drawing text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.textAlign"
        }
    ],
    "dom-context-2d-textbaseline": [
        {
            "slug": "API/CanvasRenderingContext2D/textBaseline",
            "summary": "The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current text baseline used when drawing text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.textBaseline"
        }
    ],
    "dom-context-2d-transform": [
        {
            "slug": "API/CanvasRenderingContext2D/transform",
            "summary": "The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. This lets you scale, rotate, translate (move), and skew the context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.transform()"
        }
    ],
    "dom-context-2d-translate": [
        {
            "slug": "API/CanvasRenderingContext2D/translate",
            "summary": "The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation to the current matrix.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CanvasRenderingContext2D.translate()"
        }
    ],
    "dom-createimagebitmap": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/createImageBitmap",
            "summary": "The createImageBitmap() method creates a bitmap from a given source, optionally cropped to contain only a portion of that source. The method exists on the global scope in both windows and workers. It accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "42"
                    },
                    {
                        "notes": "<code>createImageBitmap()</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "50"
                }
            },
            "title": "self.createImageBitmap()"
        }
    ],
    "dom-customelementregistry-define": [
        {
            "slug": "API/CustomElementRegistry/define",
            "summary": "The define() method of the CustomElementRegistry interface defines a new custom element.",
            "support": {
                "chrome": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ],
                "chrome_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ],
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "53"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "41"
                    }
                ],
                "opera_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "53"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "41"
                    }
                ],
                "safari": {
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'",
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'",
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "notes": "Support for 'Autonomous custom elements' only.",
                    "version_added": "6.0"
                },
                "webview_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ]
            },
            "title": "CustomElementRegistry.define()"
        }
    ],
    "dom-customelementregistry-get": [
        {
            "slug": "API/CustomElementRegistry/get",
            "summary": "The get() method of the CustomElementRegistry interface returns the constructor for a previously-defined custom element.",
            "support": {
                "chrome": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ],
                "chrome_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ],
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "53"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "41"
                    }
                ],
                "opera_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "53"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "41"
                    }
                ],
                "safari": {
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'",
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'",
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "notes": "Support for 'Autonomous custom elements' only.",
                    "version_added": "6.0"
                },
                "webview_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ]
            },
            "title": "CustomElementRegistry.get()"
        }
    ],
    "dom-customelementregistry-whendefined": [
        {
            "slug": "API/CustomElementRegistry/whenDefined",
            "summary": "The whenDefined() method of the CustomElementRegistry interface returns a Promise that resolves when the named element is defined.",
            "support": {
                "chrome": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ],
                "chrome_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ],
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/customelements/'>In Development</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "53"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "41"
                    }
                ],
                "opera_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "53"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "41"
                    }
                ],
                "safari": {
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'",
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'",
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "notes": "Support for 'Autonomous custom elements' only.",
                    "version_added": "6.0"
                },
                "webview_android": [
                    {
                        "notes": "Support for 'Customized built-in elements' as well.",
                        "version_added": "66"
                    },
                    {
                        "notes": "Support for 'Autonomous custom elements' only.",
                        "version_added": "54"
                    }
                ]
            },
            "title": "CustomElementRegistry.whenDefined()"
        }
    ],
    "dom-cva-checkvalidity": [
        {
            "slug": "API/HTMLSelectElement/checkValidity",
            "summary": "The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLSelectElement.checkValidity()"
        }
    ],
    "dom-cva-reportvalidity": [
        {
            "slug": "API/HTMLFormElement/reportValidity",
            "summary": "The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "40"
                }
            },
            "title": "HTMLFormElement.reportValidity()"
        }
    ],
    "dom-cva-setcustomvalidity": [
        {
            "slug": "API/HTMLSelectElement/setCustomValidity",
            "summary": "The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLSelectElement.setCustomValidity()"
        }
    ],
    "dom-data-value": [
        {
            "slug": "API/HTMLDataElement/value",
            "summary": "The value property of the HTMLDataElement interface returns a DOMString reflecting the value HTML attribute.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "49"
                },
                "opera_android": {
                    "version_added": "49"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "62"
                }
            },
            "title": "HTMLDataElement.value"
        }
    ],
    "dom-dataset": [
        {
            "slug": "API/HTMLElement/dataset",
            "summary": "The dataset property on the HTMLElement interface provides read/write access to all the custom data attributes (data-*) set on the element.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLElement.dataset"
        }
    ],
    "dom-datatransfer": [
        {
            "slug": "API/DataTransfer/DataTransfer",
            "summary": "The DataTransfer constructor creates a new DataTransfer object instance.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "DataTransfer()"
        }
    ],
    "dom-datatransfer-cleardata": [
        {
            "slug": "API/DataTransfer/clearData",
            "summary": "The DataTransfer.clearData() method removes the drag operation's drag data for the given type. If data for the given type does not exist, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.clearData()"
        }
    ],
    "dom-datatransfer-dropeffect": [
        {
            "slug": "API/DataTransfer/dropEffect",
            "summary": "The DataTransfer.dropEffect property controls the feedback (typically visual) the user is given during a drag and drop operation. It will affect which cursor is displayed while dragging. For example, when the user hovers over a target drop element, the browser's cursor may indicate which type of operation will occur.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.dropEffect"
        }
    ],
    "dom-datatransfer-effectallowed": [
        {
            "slug": "API/DataTransfer/effectAllowed",
            "summary": "The DataTransfer.effectAllowed property specifies the effect that is allowed for a drag operation. The copy operation is used to indicate that the data being dragged will be copied from its present location to the drop location. The move operation is used to indicate that the data being dragged will be moved, and the link operation is used to indicate that some form of relationship or connection will be created between the source and drop locations.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.effectAllowed"
        }
    ],
    "dom-datatransfer-files": [
        {
            "slug": "API/DataTransfer/files",
            "summary": "The DataTransfer.files property is a list of the files in the drag operation. If the operation includes no files, the list is empty.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.files"
        }
    ],
    "dom-datatransfer-getdata": [
        {
            "slug": "API/DataTransfer/getData",
            "summary": "The DataTransfer.getData() method retrieves drag data (as a DOMString) for the specified type. If the drag operation does not include data, this method returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.getData()"
        }
    ],
    "dom-datatransfer-items": [
        {
            "slug": "API/DataTransfer/items",
            "summary": "The read-only DataTransfer property items property is a list of the data transfer items in a drag operation. The list includes one item for each item in the operation and if the operation had no items, the list is empty.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.items"
        }
    ],
    "dom-datatransfer-setdata": [
        {
            "slug": "API/DataTransfer/setData",
            "summary": "The DataTransfer.setData() method sets the drag operation's drag data to the specified data and type. If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type. If data for the given type already exists, the existing data is replaced in the same position. That is, the order of the types list is not changed when replacing data of the same type.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.setData()"
        }
    ],
    "dom-datatransfer-setdragimage": [
        {
            "slug": "API/DataTransfer/setDragImage",
            "summary": "When a drag occurs, a translucent image is generated from the drag target (the element the dragstart event is fired at), and follows the mouse pointer during the drag. This image is created automatically, so you do not need to create it yourself. However, if a custom image is desired, the DataTransfer.setDragImage() method can be used to set the custom image to be used.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "18"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.setDragImage()"
        }
    ],
    "dom-datatransfer-types": [
        {
            "slug": "API/DataTransfer/types",
            "summary": "The DataTransfer.types read-only property returns an array of the drag data formats (as strings) that were set in the dragstart event. The order of the formats is the same order as the data included in the drag operation.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransfer.types"
        }
    ],
    "dom-datatransferitem-getasfile": [
        {
            "slug": "API/DataTransferItem/getAsFile",
            "summary": "If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransferItem.getAsFile()"
        }
    ],
    "dom-datatransferitem-getasstring": [
        {
            "slug": "API/DataTransferItem/getAsString",
            "summary": "The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransferItem.getAsString()"
        }
    ],
    "dom-datatransferitem-kind": [
        {
            "slug": "API/DataTransferItem/kind",
            "summary": "The read-only DataTransferItem.kind property returns a DataTransferItem representing the drag data item kind: some text or some file.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransferItem.kind"
        }
    ],
    "dom-datatransferitem-type": [
        {
            "slug": "API/DataTransferItem/type",
            "summary": "The read-only DataTransferItem.type property returns the type (format) of the DataTransferItem object representing the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DataTransferItem.type"
        }
    ],
    "dom-datatransferitemlist-add": [
        {
            "slug": "API/DataTransferItemList/add",
            "summary": "The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DataTransferItemList.add()"
        }
    ],
    "dom-datatransferitemlist-clear": [
        {
            "slug": "API/DataTransferItemList/clear",
            "summary": "The DataTransferItemList method clear() removes all DataTransferItem objects from the drag data items list, leaving the list empty.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DataTransferItemList.clear()"
        }
    ],
    "dom-datatransferitemlist-length": [
        {
            "slug": "API/DataTransferItemList/length",
            "summary": "The read-only length property of the DataTransferItemList interface returns the number of items currently in the drag item list.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DataTransferItemList.length"
        }
    ],
    "dom-datatransferitemlist-remove": [
        {
            "slug": "API/DataTransferItemList/remove",
            "summary": "undefined.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DataTransferItemList.remove()"
        }
    ],
    "dom-dedicatedworkerglobalscope-close": [
        {
            "slug": "API/DedicatedWorkerGlobalScope/close",
            "summary": "The close() method of the DedicatedWorkerGlobalScope interface discards any tasks queued in the DedicatedWorkerGlobalScope's event loop, effectively closing this particular scope.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "54"
                },
                "firefox_android": {
                    "version_added": "54"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DedicatedWorkerGlobalScope.close()"
        }
    ],
    "dom-dedicatedworkerglobalscope-name": [
        {
            "slug": "API/DedicatedWorkerGlobalScope/name",
            "summary": "The name read-only property of the DedicatedWorkerGlobalScope interface returns the name that the Worker was (optionally) given when it was created. This is the name that the Worker() constructor can pass to get a reference to the DedicatedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": {
                    "version_added": "55"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "DedicatedWorkerGlobalScope.name"
        }
    ],
    "dom-dedicatedworkerglobalscope-postmessage": [
        {
            "slug": "API/DedicatedWorkerGlobalScope/postMessage",
            "summary": "The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DedicatedWorkerGlobalScope.postMessage()"
        }
    ],
    "dom-dialog-close": [
        {
            "slug": "API/HTMLDialogElement/close",
            "summary": "Void.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLDialogElement.close()"
        }
    ],
    "dom-dialog-open": [
        {
            "slug": "API/HTMLDialogElement/open",
            "summary": "A Boolean representing the state of the open HTML attribute. true means it is set, and therefore the dialog is shown. false means it not set, and therefore the dialog is not shown.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLDialogElement.open"
        }
    ],
    "dom-dialog-returnvalue": [
        {
            "slug": "API/HTMLDialogElement/returnValue",
            "summary": "The returnValue property of the HTMLDialogElement interface gets or sets the return value for the dialog, usually to indicate which button the user pressed to close it.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLDialogElement.returnValue"
        }
    ],
    "dom-dialog-show": [
        {
            "slug": "API/HTMLDialogElement/show",
            "summary": "The show() method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLDialogElement.show()"
        }
    ],
    "dom-dialog-showmodal": [
        {
            "slug": "API/HTMLDialogElement/showModal",
            "summary": "The showModal() method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays into the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLDialogElement.showModal()"
        }
    ],
    "dom-dir": [
        {
            "slug": "API/HTMLElement/dir",
            "summary": "The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement.dir"
        }
    ],
    "dom-document-2": [
        {
            "slug": "API/Window/document",
            "summary": "window.document returns a reference to the document contained in the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.document"
        }
    ],
    "dom-document-activeelement": [
        {
            "slug": "API/DocumentOrShadowRoot/activeElement",
            "summary": "The activeElement read-only property of the Document and ShadowRoot interfaces returns the Element within the DOM or shadow DOM tree that currently has focus.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "DocumentOrShadowRoot.activeElement"
        }
    ],
    "dom-document-body": [
        {
            "slug": "API/Document/body",
            "summary": "The Document.body property represents the body or frameset node of the current document, or null if no such element exists.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "The <code>body</code> property was implemented on the <code>HTMLDocument</code> interface in Firefox for a long time, hence <code>document.body</code> would not return the <code>&lt;body&gt;</code> element if the document's <code>Content-Type</code> was not set to <code>text/html</code> or <code>application/xhtml+xml</code> (or if it came from <code>DOMParser.parseFromString</code> without the <code>text/html</code> type being used). This has been fixed in Firefox 60.",
                    "version_added": "2"
                },
                "firefox_android": {
                    "notes": "The <code>body</code> property was implemented on the <code>HTMLDocument</code> interface in Firefox for a long time, hence <code>document.body</code> would not return the <code>&lt;body&gt;</code> element if the document's <code>Content-Type</code> was not set to <code>text/html</code> or <code>application/xhtml+xml</code> (or if it came from <code>DOMParser.parseFromString</code> without the <code>text/html</code> type being used). This has been fixed in Firefox 60.",
                    "version_added": true
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "9.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.body"
        }
    ],
    "dom-document-close": [
        {
            "slug": "API/Document/close",
            "summary": "The Document.close() method finishes writing to a document, opened with Document.open().",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.close()"
        }
    ],
    "dom-document-currentscript": [
        {
            "slug": "API/Document/currentScript",
            "summary": "The Document.currentScript property returns the script element whose script is currently being processed.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "16"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.currentScript"
        }
    ],
    "dom-document-defaultview": [
        {
            "slug": "API/Document/defaultView",
            "summary": "In browsers, document.defaultView returns the window object associated with a document, or null if none is available.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.defaultView"
        }
    ],
    "dom-document-dir": [
        {
            "slug": "API/Document/dir",
            "summary": "The Document.dir property is a DOMString representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Incorrect behavior before Firefox 23.",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "Incorrect behavior before Firefox 23.",
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.dir"
        }
    ],
    "dom-document-embeds": [
        {
            "slug": "API/Document/embeds",
            "summary": "The embeds read-only property of the Document interface returns a list of the embedded object elements within the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.embeds"
        }
    ],
    "dom-document-forms": [
        {
            "slug": "API/Document/forms",
            "summary": "The forms read-only property of the Document interface returns an HTMLCollection listing all the form elements contained in the document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.forms"
        }
    ],
    "dom-document-getelementsbyname": [
        {
            "slug": "API/Document/getElementsByName",
            "summary": "The getElementsByName() method of the Document object returns a NodeList Collection of elements with a given name in the document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "notes": "Returns an <code>HTMLCollection</code>, not a <code>NodeList</code>",
                    "version_added": true
                },
                "edge_mobile": {
                    "notes": "Returns an <code>HTMLCollection</code>, not a <code>NodeList</code>",
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "Returns an <code>HTMLCollection</code>, not a <code>NodeList</code>",
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.getElementsByName()"
        }
    ],
    "dom-document-hasfocus": [
        {
            "slug": "API/Document/hasFocus",
            "summary": "The hasFocus() method of the Document interface returns a Boolean value indicating whether the document or any element inside the document has focus. This method can be used to determine whether the active element in a document has focus.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.hasFocus()"
        }
    ],
    "dom-document-head": [
        {
            "slug": "API/Document/head",
            "summary": "The head read-only property of the Document interface returns the head element of the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.head"
        }
    ],
    "dom-document-images": [
        {
            "slug": "API/Document/images",
            "summary": "The images read-only property of the Document interface returns a collection of the images in the current HTML document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.images"
        }
    ],
    "dom-document-links": [
        {
            "slug": "API/Document/links",
            "summary": "The links read-only property of the Document interface returns a collection of all area elements and a elements in a document with a value for the href attribute.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.links"
        }
    ],
    "dom-document-open": [
        {
            "slug": "API/Document/open",
            "summary": "The Document.open() method opens a document for writing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.open()"
        }
    ],
    "dom-document-plugins": [
        {
            "slug": "API/Document/plugins",
            "summary": "The plugins read-only property of the Document interface returns an HTMLCollection object containing one or more HTMLEmbedElements representing the embed elements in the current document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.plugins"
        }
    ],
    "dom-document-scripts": [
        {
            "slug": "API/Document/scripts",
            "summary": "The scripts property of the Document interface returns a list of the script elements in the document. The returned object is an HTMLCollection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": {
                    "version_added": "9"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.scripts"
        }
    ],
    "dom-document-write": [
        {
            "slug": "API/Document/write",
            "summary": "The Document.write() method writes a string of text to a document stream opened by document.open().",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.write()"
        }
    ],
    "dom-document-writeln": [
        {
            "slug": "API/Document/writeln",
            "summary": "Writes a string of text followed by a newline character to a document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.writeln()"
        }
    ],
    "dom-dragevent-datatransfer": [
        {
            "slug": "API/DragEvent/dataTransfer",
            "summary": "The DragEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object).",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DragEvent.dataTransfer"
        }
    ],
    "dom-eventsource": [
        {
            "slug": "API/EventSource/EventSource",
            "summary": "The EventSource() constructor returns a newly-created EventSource, which represents a remote resource.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource()"
        }
    ],
    "dom-eventsource-close": [
        {
            "slug": "API/EventSource/close",
            "summary": "The close() method of the EventSource interface closes the connection, if one is made, and sets the EventSource.readyState attribute to 2 (closed).",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource.close()"
        }
    ],
    "dom-eventsource-readystate": [
        {
            "slug": "API/EventSource/readyState",
            "summary": "The readyState read-only property of the EventSource interface returns a number representing the state of the connection.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource.readyState"
        }
    ],
    "dom-eventsource-url": [
        {
            "slug": "API/EventSource/url",
            "summary": "The url read-only property of the EventSource interface returns a DOMString representing the URL of the source.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource.url"
        }
    ],
    "dom-eventsource-withcredentials": [
        {
            "slug": "API/EventSource/withCredentials",
            "summary": "The withCredentials read-only property of the EventSource interface returns a Boolean indicating whether the EventSource object was instantiated with CORS credentials set.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource.withCredentials"
        }
    ],
    "dom-fae-form": [
        {
            "slug": "API/HTMLSelectElement/form",
            "summary": "The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with of a form element, then it returns null.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.form"
        }
    ],
    "dom-fe-autofocus": [
        {
            "slug": "API/HTMLSelectElement/autofocus",
            "summary": "The HTMLSelectElement.autofocus property is a Boolean that reflects the autofocus HTML attribute, which indicates whether the associated select element  will get input focus when the page loads, unless the user overrides it.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.autofocus"
        }
    ],
    "dom-fe-disabled": [
        {
            "slug": "API/HTMLSelectElement/disabled",
            "summary": "The HTMLSelectElement.disabled Is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.disabled"
        }
    ],
    "dom-focus": [
        {
            "slug": "API/HTMLElement/focus",
            "summary": "The HTMLElement.focus() method sets focus on the specified element, if it can be focused.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLElement.focus()"
        }
    ],
    "dom-form-elements": [
        {
            "slug": "API/HTMLFormElement/elements",
            "summary": "The HTMLFormElement property elements returns an HTMLFormControlsCollection listing all the form controls contained in the form element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLFormElement.elements"
        }
    ],
    "dom-frameelement": [
        {
            "slug": "API/Window/frameElement",
            "summary": "Returns the element (such as iframe or object) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin; that is, in cross-origin situations.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Window.frameElement"
        }
    ],
    "dom-frames": [
        {
            "slug": "API/Window/frames",
            "summary": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.frames"
        }
    ],
    "dom-hashchangeevent-newurl": [
        {
            "slug": "API/HashChangeEvent/newURL",
            "summary": "The newURL read-only property returns the new URL to which the window is navigating.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HashChangeEvent.newURL"
        }
    ],
    "dom-hashchangeevent-oldurl": [
        {
            "slug": "API/HashChangeEvent/oldURL",
            "summary": "The oldURL read-only property returns the previous URL from which the window was navigated.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HashChangeEvent.oldURL"
        }
    ],
    "dom-hidden": [
        {
            "slug": "API/HTMLElement/hidden",
            "summary": "The HTMLElement property hidden is a Boolean which is true if the element is hidden; otherwise the value is false. This is quite different from using the CSS property display to control the visibility of an element.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement.hidden"
        }
    ],
    "dom-history-length": [
        {
            "slug": "API/History/length",
            "summary": "The History.length read-only property returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "History.length"
        }
    ],
    "dom-htmlformcontrolscollection-nameditem": [
        {
            "slug": "API/HTMLFormControlsCollection/namedItem",
            "summary": "The HTMLFormControlsCollection.namedItem() method returns the RadioNodeList or the Element in the collection whose name or id match the specified name, or null if no node matches.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "33"
                    },
                    {
                        "notes": "Returned a <a href='https://developer.mozilla.org/docs/Web/API/NodeList'><code>NodeList</code></a> instead of a <a href='https://developer.mozilla.org/docs/Web/API/RadioNodeList'><code>RadioNodeList</code></a>.",
                        "partial_implementation": true,
                        "version_added": "27",
                        "version_removed": "33"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "33"
                    },
                    {
                        "notes": "Returned a <a href='https://developer.mozilla.org/docs/Web/API/NodeList'><code>NodeList</code></a> instead of a <a href='https://developer.mozilla.org/docs/Web/API/RadioNodeList'><code>RadioNodeList</code></a>.",
                        "partial_implementation": true,
                        "version_added": "27",
                        "version_removed": "33"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLFormControlsCollection.namedItem()"
        }
    ],
    "dom-hyperlink-hash": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/hash",
            "summary": "The HTMLHyperlinkElementUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface. Also, from Firefox 29 to Firefox 40, the returned value was incorrectly percent-decoded.",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface. Also, from Firefox 29 to Firefox 40, the returned value was incorrectly percent-decoded.",
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.hash"
        },
        {
            "slug": "API/Location/hash",
            "summary": "The URLUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL. The hash is not percent encoded.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "hash"
        },
        {
            "slug": "API/URL/hash",
            "summary": "The URLUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL. The hash is not percent encoded.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "hash"
        }
    ],
    "dom-hyperlink-host": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/host",
            "summary": "The HTMLHyperlinkElementUtils.host property is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "ie": {
                    "notes": "In Internet Explorer 9, the host of an <a href='https://developer.mozilla.org/docs/Web/HTML/Element/a'><code><a></code></a> always include the port (e.g. <code>developer.mozilla.org:443</code>), even if there is no explicit port in the <code>href</code> attribute value.",
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.host"
        },
        {
            "slug": "API/Location/host",
            "summary": "The URLUtils.host property is a DOMString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "host"
        },
        {
            "slug": "API/URL/host",
            "summary": "The URLUtils.host property is a DOMString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "host"
        }
    ],
    "dom-hyperlink-hostname": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/hostname",
            "summary": "The HTMLHyperlinkElementUtils.hostname property is a USVString containing the domain of the URL.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.hostname"
        },
        {
            "slug": "API/Location/hostname",
            "summary": "The URLUtils.hostname property is a DOMString containing the domain of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "hostname"
        },
        {
            "slug": "API/URL/hostname",
            "summary": "The URLUtils.hostname property is a DOMString containing the domain of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "hostname"
        }
    ],
    "dom-hyperlink-href": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/href",
            "summary": "The HTMLHyperlinkElementUtils.href property is a USVString containing the whole URL.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.href"
        },
        {
            "slug": "API/Location/href",
            "summary": "The URLUtils.href property is a DOMString containing the whole URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "href"
        },
        {
            "slug": "API/URL/href",
            "summary": "The URLUtils.href property is a DOMString containing the whole URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "href"
        }
    ],
    "dom-hyperlink-origin": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/origin",
            "summary": "The HTMLHyperlinkElementUtils.origin read-only property is a USVString containing the Unicode serialization of the origin of the represented URL",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 49, results for URL using the <code>blob</code> scheme incorrectly returned <code>null</code>."
                    ],
                    "version_added": "26"
                },
                "firefox_android": {
                    "notes": [
                        "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 49, results for URL using the <code>blob</code> scheme incorrectly returned <code>null</code>."
                    ],
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.origin"
        },
        {
            "slug": "API/Location/origin",
            "summary": "The URLUtils.origin read-only property is a DOMString containing the Unicode serialization of the origin of the represented URL, that is, for http and https, the scheme followed by '://', followed by the domain, followed by ':', followed by the port (the default port, 80 and 443 respectively, if explicitely specified). For URL using file: scheme, the value is browser dependant.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 49, results for URL using the blob scheme incorrectly returned null.",
                    "version_added": "26"
                },
                "firefox_android": {
                    "notes": "Before Firefox 49, results for URL using the blob scheme incorrectly returned null.",
                    "version_added": "26"
                },
                "ie": {
                    "notes": "Intranet sites are set to Compatibility View, which will emulate IE7 and omit <code>window.location.origin</code>.",
                    "version_added": "11"
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "origin"
        }
    ],
    "dom-hyperlink-password": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/password",
            "summary": "The HTMLHyperlinkElementUtils.password property is a USVString containing the password specified before the domain name.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "firefox": {
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "26"
                },
                "firefox_android": {
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.password"
        },
        {
            "slug": "API/Location/password",
            "summary": "The URLUtils.password property is a DOMString containing the password specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "password"
        },
        {
            "slug": "API/URL/password",
            "summary": "The URLUtils.password property is a DOMString containing the password specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": "12"
                },
                "edge_mobile": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": true
                },
                "safari": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": "10"
                },
                "safari_ios": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "password"
        }
    ],
    "dom-hyperlink-pathname": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/pathname",
            "summary": "The HTMLHyperlinkElementUtils.pathname property is a USVString containing an initial '/' followed by the path of the URL (or the empty string if there is no path).",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ],
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ],
                    "version_added": "22"
                },
                "ie": {
                    "notes": [
                        "Internet Explorer implements this attribute with no leading <code>\"/\"</code>."
                    ],
                    "partial_implementation": true,
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.pathname"
        },
        {
            "slug": "API/Location/pathname",
            "summary": "The URLUtils.pathname property is a DOMString containing an initial '/' followed by the path of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 53, the <code>pathname</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false, <code>pathname</code> would return \"/x?a=true&b=false\" rather than \"/x\".",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "Before Firefox 53, the <code>pathname</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false, <code>pathname</code> would return \"/x?a=true&b=false\" rather than \"/x\".",
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "pathname"
        },
        {
            "slug": "API/URL/pathname",
            "summary": "The URLUtils.pathname property is a DOMString containing an initial '/' followed by the path of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "53"
                    },
                    {
                        "notes": "<code>pathname</code> and <code>search</code> returned the wrong values so that for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return \"/x?a=true&b=false\" and <code>search</code> would return \"\", rather than \"/x\" and \"?a=true&b=false\" respectively.",
                        "version_added": "22",
                        "version_removed": "53"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "53"
                    },
                    {
                        "notes": "<code>pathname</code> and <code>search</code> returned the wrong values so that for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return \"/x?a=true&b=false\" and <code>search</code> would return \"\", rather than \"/x\" and \"?a=true&b=false\" respectively.",
                        "version_added": "22",
                        "version_removed": "53"
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "pathname"
        }
    ],
    "dom-hyperlink-port": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/port",
            "summary": "The HTMLHyperlinkElementUtils.port property is a USVString containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.port"
        },
        {
            "slug": "API/Location/port",
            "summary": "The URLUtils.port property is a DOMString containing the port number of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "port"
        },
        {
            "slug": "API/URL/port",
            "summary": "The URLUtils.port property is a DOMString containing the port number of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "port"
        }
    ],
    "dom-hyperlink-protocol": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/protocol",
            "summary": "The HTMLHyperlinkElementUtils.protocol property is a USVString representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.protocol"
        },
        {
            "slug": "API/Location/protocol",
            "summary": "The URLUtils.protocol property is a DOMString representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "protocol"
        },
        {
            "slug": "API/URL/protocol",
            "summary": "The URLUtils.protocol property is a DOMString representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "protocol"
        }
    ],
    "dom-hyperlink-search": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/search",
            "summary": "The HTMLHyperlinkElementUtils.search property is a search string, also called a query string, that is USVString containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ],
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": [
                        "From Firefox 22 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                        "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return <code>'/x?a=true&b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&b=false'</code> respectively. This has now been fixed."
                    ],
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.search"
        },
        {
            "slug": "API/Location/search",
            "summary": "The URLUtils.search property is a DOMString containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 53, the <code>search</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false,  <code>search</code> would return \"\", rather than \"?a=true&b=false\".",
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": "Before Firefox 53, the <code>search</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&b=false,  <code>search</code> would return \"\", rather than \"?a=true&b=false\".",
                    "version_added": "22"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "search"
        },
        {
            "slug": "API/URL/search",
            "summary": "The URLUtils.search property is a DOMString containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "53"
                    },
                    {
                        "notes": "<code>pathname</code> and <code>search</code> returned the wrong values so that for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return \"/x?a=true&b=false\" and <code>search</code> would return \"\", rather than \"/x\" and \"?a=true&b=false\" respectively.",
                        "version_added": "22",
                        "version_removed": "53"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "53"
                    },
                    {
                        "notes": "<code>pathname</code> and <code>search</code> returned the wrong values so that for a URL of <code>http://z.com/x?a=true&b=false</code>, <code>pathname</code> would return \"/x?a=true&b=false\" and <code>search</code> would return \"\", rather than \"/x\" and \"?a=true&b=false\" respectively.",
                        "version_added": "22",
                        "version_removed": "53"
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "search"
        }
    ],
    "dom-hyperlink-username": [
        {
            "slug": "API/HTMLHyperlinkElementUtils/username",
            "summary": "The HTMLHyperlinkElementUtils.username property is a USVString containing the username specified before the domain name.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "firefox": {
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "26"
                },
                "firefox_android": {
                    "notes": "From Firefox 26 to Firefox 44, this property was on the <code>URLUtils</code> mixin. It has been moved either on the <code>HTMLHyperlinkElementUtils</code> mixin, or directly on the interface.",
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, this property was moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils.username"
        },
        {
            "slug": "API/Location/username",
            "summary": "The URLUtils.username property is a DOMString containing the username specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "username"
        },
        {
            "slug": "API/URL/username",
            "summary": "The URLUtils.username property is a DOMString containing the username specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": "12"
                },
                "edge_mobile": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": true
                },
                "safari": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": "10"
                },
                "safari_ios": {
                    "notes": "Defined in another interface but available to use from <code>URL</code>.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "username"
        }
    ],
    "dom-iframe-allowpaymentrequest": [
        {
            "slug": "API/HTMLIFrameElement/allowPaymentRequest",
            "summary": "The allowPaymentRequest property of the HTMLIFrameElement interface returns a Boolean indicating whether the Payment Request API may be invoked on a cross-origin iframe.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "#web-payments",
                            "type": "preference",
                            "value_to_set": "Enabled"
                        }
                    ],
                    "version_added": "60"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "#web-payments",
                            "type": "preference",
                            "value_to_set": "Enabled"
                        }
                    ],
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "15"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLIFrameElement.allowPaymentRequest"
        }
    ],
    "dom-iframe-contentdocument": [
        {
            "slug": "API/HTMLIFrameElement/contentDocument",
            "summary": "Returns a Document, the active document in the inline frame's nested browsing context.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "contentDocument"
        }
    ],
    "dom-iframe-contentwindow": [
        {
            "slug": "API/HTMLIFrameElement/contentWindow",
            "summary": "The contentWindow property returns the Window object of an iframe element. You can use this Window object to access the iframe's document and its internal DOM. This attribute is read-only, but its properties can be manipulated like the global Window object.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLIFrameElement.contentWindow"
        }
    ],
    "dom-iframe-referrerpolicy": [
        {
            "slug": "API/HTMLIFrameElement/referrerPolicy",
            "summary": "The HTMLIFrameElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the iframe element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": {
                    "version_added": "51"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "38"
                },
                "opera_android": {
                    "version_added": "38"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "51"
                }
            },
            "title": "HTMLIFrameElement.referrerPolicy"
        }
    ],
    "dom-image": [
        {
            "slug": "API/HTMLImageElement/Image",
            "summary": "The Image() constructor creates a new HTMLImageElement instance.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Image()"
        }
    ],
    "dom-imagebitmap-close": [
        {
            "slug": "API/ImageBitmap/close",
            "summary": "The ImageBitmap.close() method disposes of all graphical resources associated with an ImageBitmap.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": {
                    "version_added": "46"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "ImageBitmap.close()"
        }
    ],
    "dom-imagebitmap-height": [
        {
            "slug": "API/ImageBitmap/height",
            "summary": "The read-only ImageBitmap.height property returns the ImageBitmap object's height in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": {
                    "version_added": "42"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "50"
                }
            },
            "title": "ImageBitmap.height"
        }
    ],
    "dom-imagebitmap-width": [
        {
            "slug": "API/ImageBitmap/width",
            "summary": "The read-only ImageBitmap.width property returns the ImageBitmap object's width in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": {
                    "version_added": "42"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "50"
                }
            },
            "title": "ImageBitmap.width"
        }
    ],
    "dom-imagedata": [
        {
            "slug": "API/ImageData/ImageData",
            "summary": "The ImageData() constructor returns a newly instantiated ImageData object built from the typed array given and having the specified width and height.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": {
                    "version_added": "42"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "29"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "ImageData()"
        }
    ],
    "dom-imagedata-data": [
        {
            "slug": "API/ImageData/data",
            "summary": "The readonly ImageData.data property returns a Uint8ClampedArray that contains the ImageData object's pixel data. Data is stored as a one-dimensional array in the RGBA order, with integer values between 0 and 255 (inclusive).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "ImageData.data"
        }
    ],
    "dom-imagedata-height": [
        {
            "slug": "API/ImageData/height",
            "summary": "The readonly ImageData.height property returns the number of rows in the ImageData object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ImageData.height"
        }
    ],
    "dom-imagedata-width": [
        {
            "slug": "API/ImageData/width",
            "summary": "The readonly ImageData.width property returns the number of pixels per row in the ImageData object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ImageData.width"
        }
    ],
    "dom-img-decoding": [
        {
            "slug": "API/HTMLImageElement/decoding",
            "summary": "The decoding property of the HTMLImageElement interface represents a hint given to the browser on how it should decode the image.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": {
                    "version_added": "65"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "65"
                }
            },
            "title": "HTMLImageElement.decoding"
        }
    ],
    "dom-iscontenteditable": [
        {
            "slug": "API/HTMLElement/isContentEditable",
            "summary": "The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement.isContentEditable"
        }
    ],
    "dom-label-control": [
        {
            "slug": "API/HTMLLabelElement/control",
            "summary": "The read-only HTMLLabelElement.control property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the label element is associated, or null if the label isn't associated with a control.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement.control"
        }
    ],
    "dom-label-form": [
        {
            "slug": "API/HTMLLabelElement/form",
            "summary": "The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement.form"
        }
    ],
    "dom-label-htmlfor": [
        {
            "slug": "API/HTMLLabelElement/htmlFor",
            "summary": "The HTMLLabelElement.htmlFor property reflects the value of the for content property. That means that this script-accessible property is used to set and read the value of the content property for, which is the ID of the label's associated control element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement.htmlFor"
        }
    ],
    "dom-length": [
        {
            "slug": "API/Window/length",
            "summary": "Returns the number of frames (either frame or iframe elements) in the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.length"
        }
    ],
    "dom-lfe-labels": [
        {
            "slug": "API/HTMLButtonElement/labels",
            "summary": "The HTMLButtonElement.labels read-only property returns a NodeList of the label elements associated with the button element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLButtonElement.labels"
        },
        {
            "slug": "API/HTMLMeterElement/labels",
            "summary": "The HTMLMeterElement.labels read-only property returns a NodeList of the label elements associated with the meter element.",
            "support": {
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                }
            },
            "title": "HTMLMeterElement.labels"
        },
        {
            "slug": "API/HTMLOutputElement/labels",
            "summary": "The HTMLOutputElement.labels read-only property returns a NodeList of the label elements associated with the output element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLOutputElement.labels"
        },
        {
            "slug": "API/HTMLProgressElement/labels",
            "summary": "The HTMLProgressElement.labels read-only property returns a NodeList of the label elements associated with the progress element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLProgressElement.labels"
        },
        {
            "slug": "API/HTMLSelectElement/labels",
            "summary": "The HTMLSelectElement.labels read-only property returns a NodeList of the label elements associated with the select element.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLSelectElement.labels"
        },
        {
            "slug": "API/HTMLTextAreaElement/labels",
            "summary": "The HTMLTextAreaElement.labels read-only property returns a NodeList of the label elements associated with the textarea element.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": {
                    "version_added": "56"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLTextAreaElement.labels"
        }
    ],
    "dom-link-rellist": [
        {
            "slug": "API/HTMLLinkElement/relList",
            "summary": "The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the link element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "30"
                },
                "firefox_android": {
                    "version_added": "30"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "50"
                }
            },
            "title": "HTMLLinkElement.relList"
        }
    ],
    "dom-localstorage": [
        {
            "slug": "API/Window/localStorage",
            "summary": "The read-only localStorage property allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "window.localStorage"
        }
    ],
    "dom-location-assign": [
        {
            "slug": "API/Location/assign",
            "summary": "The Location.assign() method causes the window to load and display the document at the URL specified.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Location.assign()"
        }
    ],
    "dom-location-reload": [
        {
            "slug": "API/Location/reload",
            "summary": "The Location.reload() method reloads the current resource, like the Refresh button.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Location.reload()"
        }
    ],
    "dom-location-replace": [
        {
            "slug": "API/Location/replace",
            "summary": "The Location.replace() method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Location.replace()"
        }
    ],
    "dom-media-audiotracks": [
        {
            "slug": "API/HTMLMediaElement/audioTracks",
            "summary": "The read-only audioTracks property on HTMLMediaElement objects returns an AudioTrackList object listing all of the  AudioTrack objects representing the media element's audio tracks.",
            "support": {
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                }
            },
            "title": "HTMLMediaElement.audioTracks"
        }
    ],
    "dom-media-autoplay": [
        {
            "slug": "API/HTMLMediaElement/autoplay",
            "summary": "The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.autoplay"
        }
    ],
    "dom-media-controls": [
        {
            "slug": "API/HTMLMediaElement/controls",
            "summary": "The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.controls"
        }
    ],
    "dom-media-currentsrc": [
        {
            "slug": "API/HTMLMediaElement/currentSrc",
            "summary": "The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.currentSrc"
        }
    ],
    "dom-media-currenttime": [
        {
            "slug": "API/HTMLMediaElement/currentTime",
            "summary": "The HTMLMediaElement.currentTime property gives the current playback time in seconds. Setting this value seeks the media to the new time.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.currentTime"
        }
    ],
    "dom-media-defaultmuted": [
        {
            "slug": "API/HTMLMediaElement/defaultMuted",
            "summary": "The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.defaultMuted"
        }
    ],
    "dom-media-defaultplaybackrate": [
        {
            "slug": "API/HTMLMediaElement/defaultPlaybackRate",
            "summary": "The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": "20"
                },
                "ie": {
                    "version_added": "9"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.defaultPlaybackRate"
        }
    ],
    "dom-media-duration": [
        {
            "slug": "API/HTMLMediaElement/duration",
            "summary": "The HTMLMediaElement.duration property gives the length of the media in seconds, or zero if no media data is available.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.duration"
        }
    ],
    "dom-media-ended": [
        {
            "slug": "API/HTMLMediaElement/ended",
            "summary": "The HTMLMediaElement.ended indicates whether the media element has ended playback.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.ended"
        }
    ],
    "dom-media-error": [
        {
            "slug": "API/HTMLMediaElement/error",
            "summary": "The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error. When an error event is received by the element, you can determine details about what happened by examining this object.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.error"
        }
    ],
    "dom-media-fastseek": [
        {
            "slug": "API/HTMLMediaElement/fastSeek",
            "summary": "The HTMLMediaElement.fastSeek() method quickly seeks the media to the new time with precision tradeoff.",
            "support": {
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": {
                    "version_added": "31"
                }
            },
            "title": "HTMLMediaElement.fastSeek()"
        }
    ],
    "dom-media-load": [
        {
            "slug": "API/HTMLMediaElement/load",
            "summary": "The HTMLMediaElement method load() resets the media element to its initial state and begins the process of selecting a media source and loading the media in preparation for playback to begin at the beginning.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "HTMLMediaElement.load()"
        }
    ],
    "dom-media-loop": [
        {
            "slug": "API/HTMLMediaElement/loop",
            "summary": "The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.loop"
        }
    ],
    "dom-media-muted": [
        {
            "slug": "API/HTMLMediaElement/muted",
            "summary": "The HTMLMediaElement.muted indicates whether the media element muted.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.muted"
        }
    ],
    "dom-media-networkstate": [
        {
            "slug": "API/HTMLMediaElement/networkState",
            "summary": "The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "The <code>NETWORK_LOADED</code> state was removed to align with the HTML spec in Firefox 4."
                    ],
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.networkState"
        }
    ],
    "dom-media-pause": [
        {
            "slug": "API/HTMLMediaElement/pause",
            "summary": "The HTMLMediaElement.pause() method will pause playback of the media, if the media is already in a paused state this method will have no effect.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.pause()"
        }
    ],
    "dom-media-paused": [
        {
            "slug": "API/HTMLMediaElement/paused",
            "summary": "The read-only HTMLMediaElement.paused property tells whether the media element is paused.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.paused"
        }
    ],
    "dom-media-play": [
        {
            "slug": "API/HTMLMediaElement/play",
            "summary": "The HTMLMediaElement method play() attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.play()"
        }
    ],
    "dom-media-playbackrate": [
        {
            "slug": "API/HTMLMediaElement/playbackRate",
            "summary": "The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": {
                    "version_added": "20"
                },
                "ie": {
                    "version_added": "9"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.playbackRate"
        }
    ],
    "dom-media-readystate": [
        {
            "slug": "API/HTMLMediaElement/readyState",
            "summary": "The HTMLMediaElement.readyState property indicates the readiness state of the media.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.readyState"
        }
    ],
    "dom-media-seekable": [
        {
            "slug": "API/HTMLMediaElement/seekable",
            "summary": "The seekable read-only property of the HTMLMediaElement returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": "9"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.seekable"
        }
    ],
    "dom-media-src": [
        {
            "slug": "API/HTMLMediaElement/src",
            "summary": "The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.src"
        }
    ],
    "dom-media-srcobject": [
        {
            "slug": "API/HTMLMediaElement/srcObject",
            "summary": "The srcObject property of the HTMLMediaElement interface sets or returns the object which serves as the source of the media associated with the HTMLMediaElement.",
            "support": {
                "chrome": {
                    "notes": "Currently only supports <code>MediaStream</code> objects.",
                    "partial_implementation": true,
                    "version_added": "52"
                },
                "chrome_android": {
                    "notes": "Currently only supports <code>MediaStream</code> objects.",
                    "partial_implementation": true,
                    "version_added": "52"
                },
                "edge": {
                    "notes": "Currently only supports <code>MediaStream</code> objects.",
                    "partial_implementation": true,
                    "version_added": true
                },
                "edge_mobile": {
                    "notes": "Currently only supports <code>MediaStream</code> objects.",
                    "partial_implementation": true,
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "Currently only supports <code>MediaStream</code> objects.",
                        "partial_implementation": true,
                        "version_added": true
                    },
                    {
                        "prefix": "moz",
                        "version_added": "18",
                        "version_removed": "58"
                    }
                ],
                "firefox_android": [
                    {
                        "notes": "Currently only supports <code>MediaStream</code> objects.",
                        "partial_implementation": true,
                        "version_added": true
                    },
                    {
                        "prefix": "moz",
                        "version_added": "18",
                        "version_removed": "58"
                    }
                ],
                "opera": {
                    "notes": "Currently only supports <code>MediaStream</code> objects.",
                    "partial_implementation": true,
                    "version_added": "39"
                },
                "opera_android": {
                    "notes": "Currently only supports <code>MediaStream</code> objects.",
                    "partial_implementation": true,
                    "version_added": "39"
                },
                "webview_android": {
                    "notes": "Currently only supports <code>MediaStream</code> objects.",
                    "partial_implementation": true,
                    "version_added": "52"
                }
            },
            "title": "HTMLMediaElement.srcObject"
        }
    ],
    "dom-media-videotracks": [
        {
            "slug": "API/HTMLMediaElement/videoTracks",
            "summary": "The read-only videoTracks property on HTMLMediaElement objects returns a VideoTrackList object listing all of the VideoTrack objects representing the media element's video tracks.",
            "support": {
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                }
            },
            "title": "HTMLMediaElement.videoTracks"
        }
    ],
    "dom-media-volume": [
        {
            "slug": "API/HTMLMediaElement/volume",
            "summary": "The HTMLMediaElement.volume property sets the volume at which the media will be played.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.volume"
        }
    ],
    "dom-mediaerror-code": [
        {
            "slug": "API/MediaError/code",
            "summary": "The read-only property MediaError.code returns a numeric value which represents the kind of error that occurred on a media element. To get a text string with specific diagnostic information, see MediaError.message.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MediaError.code"
        }
    ],
    "dom-mediaerror-message": [
        {
            "slug": "API/MediaError/message",
            "summary": "The read-only property MediaError.message returns a DOMString which contains a human-readable string offering specific diagnostic details related to the error described by the MediaError object, or an empty string (\"\") if no diagnostic information can be determined or provided.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": {
                    "version_added": "59"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "opera": {
                    "version_added": "46"
                },
                "opera_android": {
                    "version_added": "46"
                },
                "samsunginternet_android": {
                    "version_added": "7.0"
                },
                "webview_android": {
                    "version_added": "59"
                }
            },
            "title": "MediaError.message"
        }
    ],
    "dom-messagechannel": [
        {
            "slug": "API/MessageChannel/MessageChannel",
            "summary": "The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "MessageChannel()"
        }
    ],
    "dom-messagechannel-port1": [
        {
            "slug": "API/MessageChannel/port1",
            "summary": "The port1 read-only property of the MessageChannel interface returns the first port of the message channel \u2014 the port attached to the context that originated the channel.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "MessageChannel.port1"
        }
    ],
    "dom-messagechannel-port2": [
        {
            "slug": "API/MessageChannel/port2",
            "summary": "The port2 read-only property of the MessageChannel interface returns the second port of the message channel \u2014 the port attached to the context at the other end of the channel, which the message is initially sent to.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "MessageChannel.port2"
        }
    ],
    "dom-messageevent-ports": [
        {
            "slug": "API/MessageEvent/ports",
            "summary": "The ports read-only property of the MessageEvent interface is an array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "MessageEvent.ports"
        }
    ],
    "dom-messageport-close": [
        {
            "slug": "API/MessagePort/close",
            "summary": "The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MessagePort.close()"
        }
    ],
    "dom-messageport-postmessage": [
        {
            "slug": "API/MessagePort/postMessage",
            "summary": "The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MessagePort.postMessage()"
        }
    ],
    "dom-messageport-start": [
        {
            "slug": "API/MessagePort/start",
            "summary": "The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using MessageChannel.onmessage.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MessagePort.start()"
        }
    ],
    "dom-name": [
        {
            "slug": "API/Window/name",
            "summary": "Gets/sets the name of the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.name"
        }
    ],
    "dom-navigator": [
        {
            "slug": "API/Window/navigator",
            "summary": "The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.navigator"
        }
    ],
    "dom-navigator-appcodename": [
        {
            "slug": "API/NavigatorID/appCodeName",
            "summary": "The value of the NavigatorID.appCodeName property is always \"Mozilla\", in any browser. This property is kept only for compatibility purposes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorID.appCodeName"
        }
    ],
    "dom-navigator-appname": [
        {
            "slug": "API/NavigatorID/appName",
            "summary": "The value of the NavigatorID.appName property is always \"Netscape\", in any browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorID.appName"
        }
    ],
    "dom-navigator-appversion": [
        {
            "slug": "API/NavigatorID/appVersion",
            "summary": "Returns either \"4.0\" or a string representing version information about the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorID.appVersion"
        }
    ],
    "dom-navigator-canplaytype": [
        {
            "slug": "API/HTMLMediaElement/canPlayType",
            "summary": "The HTMLMediaElement.canPlayType() method determines whether the specified media type can be played back.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.canPlayType()"
        }
    ],
    "dom-navigator-cookieenabled": [
        {
            "slug": "API/Navigator/cookieEnabled",
            "summary": "navigator.cookieEnabled returns a Boolean value that indicates whether cookies are enabled or not.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": {
                    "version_added": "59"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Prior to Firefox 8, <code>navigator.cookieEnabled</code> would report the wrong result if a site exception was in place for the page on which the check was performed. This has been fixed.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "notes": "Prior to Firefox 8, <code>navigator.cookieEnabled</code> would report the wrong result if a site exception was in place for the page on which the check was performed. This has been fixed.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "59"
                }
            },
            "title": "Navigator.cookieEnabled"
        }
    ],
    "dom-navigator-hardwareconcurrency": [
        {
            "slug": "API/NavigatorConcurrentHardware/hardwareConcurrency",
            "summary": "The navigator.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": "15"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "37"
                }
            },
            "title": "navigator.hardwareConcurrency"
        }
    ],
    "dom-navigator-javaenabled": [
        {
            "slug": "API/NavigatorPlugins/javaEnabled",
            "summary": "This method indicates whether the current browser is Java-enabled or not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins.javaEnabled()"
        }
    ],
    "dom-navigator-language": [
        {
            "slug": "API/NavigatorLanguage/language",
            "summary": "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.",
            "support": {
                "chrome": {
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "Prior to Firefox 4 this property's value was also part of the user agent string, as reported by <code>navigator.userAgent</code>.",
                        "version_added": "1"
                    },
                    {
                        "notes": "Starting in Firefox 5.0 this property's value is based on the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>.",
                        "version_added": "5"
                    }
                ],
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "notes": "Closest available (non-standard) properties are <code><a href='http://msdn.microsoft.com/en-us/library/ie/ms534713.aspx'>userLanguage</a></code> and <code><a href='http://msdn.microsoft.com/en-us/library/ie/ms533542.aspx'>browserLanguage</a></code>.",
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Returns the browser UI language, not the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>.",
                    "version_added": true
                }
            },
            "title": "NavigatorLanguage.language"
        }
    ],
    "dom-navigator-languages": [
        {
            "slug": "API/NavigatorLanguage/languages",
            "summary": "The NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first.",
            "support": {
                "chrome": {
                    "notes": "In Chrome, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>.",
                    "version_added": "32"
                },
                "chrome_android": {
                    "notes": "In Chrome, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>.",
                    "version_added": "32"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "In Firefox, the <code>navigator.languages</code> property's value is taken from the <code>intl.accept_languages</code> preference.",
                    "version_added": "32"
                },
                "firefox_android": {
                    "notes": "In Firefox, the <code>navigator.languages</code> property's value is taken from the <code>intl.accept_languages</code> preference.",
                    "version_added": "4"
                },
                "ie": {
                    "notes": "Closest available (non-standard) properties are <code>userLanguage</code> and <code>browserLanguage</code>.",
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "In Chrome, <code>navigator.language</code> is the language of the browser UI, and is not guaranteed to be equal to <code>navigator.languages[0]</code>.",
                    "version_added": "4.4.3"
                }
            },
            "title": "NavigatorLanguage.languages"
        }
    ],
    "dom-navigator-mimetypes": [
        {
            "slug": "API/NavigatorPlugins/mimeTypes",
            "summary": "Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins.mimeTypes"
        }
    ],
    "dom-navigator-online": [
        {
            "slug": "API/NavigatorOnLine/onLine",
            "summary": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.",
            "support": {
                "chrome": {
                    "notes": "Earlier versions of Chrome incorrectly return true when a tab is first opened, but it starts reporting the correct connectivity status after the first network event. Windows: 11, Mac: 14, Chrome OS: 13, Linux: Always returns <code>true</code>. For history, see <a href='http://crbug.com/7469'>crbug.com/7469</a>.",
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "Since Firefox 4 the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity.",
                        "version_added": "3.5"
                    },
                    {
                        "notes": "Since Firefox 41, on OS X and Windows, the returned values follow the actual network connectivity, unless 'Work offline' mode is selected (where it will always return <code>false</code>).",
                        "version_added": "4"
                    }
                ],
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "notes": "in Internet Explorer 8 'online' and 'offline' events are raised on the <code>document.body</code>; under IE 9 they are raised on both <code>document.body</code> and <code>window</code>.",
                    "version_added": "8"
                },
                "opera": {
                    "notes": "Since Opera 11.10, the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity.",
                    "version_added": false
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Faulty in a WebView component, see Issue <a href='http://code.google.com/p/android/issues/detail?id=16760'>bug 16760</a>.",
                    "version_added": true
                }
            },
            "title": "Navigator.onLine"
        }
    ],
    "dom-navigator-platform": [
        {
            "slug": "API/NavigatorID/platform",
            "summary": "Returns a string representing the platform of the browser. The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorID.platform"
        }
    ],
    "dom-navigator-plugins": [
        {
            "slug": "API/NavigatorPlugins/plugins",
            "summary": "Returns a PluginArray object, listing the Plugin objects describing the plugins installed in the application.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins.plugins"
        }
    ],
    "dom-navigator-product": [
        {
            "slug": "API/NavigatorID/product",
            "summary": "The value of the NavigatorID.product property is always \"Gecko\", in any browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorID.product"
        }
    ],
    "dom-navigator-productsub": [
        {
            "slug": "API/Navigator/productSub",
            "summary": "The Navigator.productSub read-only property returns the build number of the current browser.",
            "support": {
                "chrome": {
                    "notes": "Always returns <code>20030107</code>.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Always returns <code>20030107</code>.",
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "Always returns <code>undefined</code>.",
                    "version_added": true
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "notes": "Always returns <code>20030107</code>.",
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "Always returns <code>20030107</code>.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Navigator.productSub"
        }
    ],
    "dom-navigator-useragent": [
        {
            "slug": "API/NavigatorID/userAgent",
            "summary": "The NavigatorID.userAgent read-only property returns the user agent string for the current browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorID.userAgent"
        }
    ],
    "dom-navigator-vendor": [
        {
            "slug": "API/Navigator/vendor",
            "summary": "The value of the Navigator vendor property is always either \"Google Inc.\", \"Apple Computer, Inc.\", or (in Firefox) the empty string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Navigator.vendor"
        }
    ],
    "dom-navigator-vendorsub": [
        {
            "slug": "API/Navigator/vendorSub",
            "summary": "The value of the Navigator.vendorSub property is always the empty string, in any browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Navigator.vendorSub"
        }
    ],
    "dom-object-typemustmatch": [
        {
            "slug": "API/HTMLObjectElement/typeMustMatch",
            "summary": "The HTMLObjectElement.typeMustMatch property is a Boolean that reflects the typemustmatch attribute of the object element. It indicates if the resource linked by it must match the MIME type given by HTMLObjectElement.type in order for this resource to be used.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLObjectElement.typeMustMatch"
        }
    ],
    "dom-offscreencanvas": [
        {
            "slug": "API/OffscreenCanvas/OffscreenCanvas",
            "summary": "The OffscreenCanvas() constructor returns a newly instantiated OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "46"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "46"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "OffscreenCanvas()"
        }
    ],
    "dom-offscreencanvas-getcontext": [
        {
            "slug": "API/OffscreenCanvas/getContext",
            "summary": "The OffscreenCanvas.getContext() method returns a drawing context for an offscreen canvas, or null if the context identifier is not supported.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "OffscreenCanvas.getContext()"
        }
    ],
    "dom-offscreencanvas-height": [
        {
            "slug": "API/OffscreenCanvas/height",
            "summary": "The height property returns and sets the height of an OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "OffscreenCanvas.height"
        }
    ],
    "dom-offscreencanvas-transfertoimagebitmap": [
        {
            "slug": "API/OffscreenCanvas/transferToImageBitmap",
            "summary": "The OffscreenCanvas.transferToImageBitmap() method creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "46"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "46"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "OffscreenCanvas.transferToImageBitmap()"
        }
    ],
    "dom-offscreencanvas-width": [
        {
            "slug": "API/OffscreenCanvas/width",
            "summary": "The width property returns and sets the width of an OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "OffscreenCanvas.width"
        }
    ],
    "dom-open": [
        {
            "slug": "API/Window/open",
            "summary": "The Window interface's open() method loads the specified resource into the browsing context (window, iframe or tab) with the specified name. If the name doesn't exist, then a new window is opened and the specified resource is loaded into its browsing context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.open()"
        }
    ],
    "dom-origin": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/origin",
            "summary": "The origin read-only property of the WindowOrWorkerGlobalScope interface returns the origin of the global scope, serialized as a string.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": {
                    "version_added": "59"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "54"
                },
                "firefox_android": {
                    "version_added": "54"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "59"
                }
            },
            "title": "WindowOrWorkerGlobalScope.origin"
        }
    ],
    "dom-pagetransitionevent-persisted": [
        {
            "slug": "API/PageTransitionEvent/persisted",
            "summary": "The persisted read-only property indicates if a webpage is loading from a cache.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PageTransitionEvent.persisted"
        }
    ],
    "dom-path2d": [
        {
            "slug": "API/Path2D",
            "summary": "The Path2D interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Path2D"
        },
        {
            "slug": "API/Path2D/Path2D",
            "summary": "The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": "42"
                },
                "edge": {
                    "notes": "The constructor for <code>Path2D</code> objects in Edge does not support being invoked with a string consisting of SVG path data. See <a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8438884/'>issue 8438884</a> for details.",
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "Path2D()"
        }
    ],
    "dom-path2d-addpath": [
        {
            "slug": "API/Path2D/addPath",
            "summary": "The Path2D.addPath() method of the Canvas 2D API adds one Path2D object to another Path2D object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": {
                    "version_added": "34"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Path2D.addPath()"
        }
    ],
    "dom-plugin": [
        {
            "slug": "API/Plugin",
            "summary": "The Plugin interface provides information about a browser plugin.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Plugin"
        }
    ],
    "dom-promiserejectionevent-promise": [
        {
            "slug": "API/PromiseRejectionEvent/promise",
            "summary": "The PromiseRejectionEvent interface's promise read-only property indicates the JavaScript Promise which was rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "PromiseRejectionEvent.promise"
        }
    ],
    "dom-promiserejectionevent-reason": [
        {
            "slug": "API/PromiseRejectionEvent/reason",
            "summary": "The read-only PromiseRejection property reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "PromiseRejectionEvent.reason"
        }
    ],
    "dom-prompt": [
        {
            "slug": "API/Window/prompt",
            "summary": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 46.0 this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "This function has no effect in the Modern UI/Metro version of Internet Explorer for Windows 8. It does not display a prompt to the user, and always returns <code>undefined</code>. It is not clear whether this is a bug or intended behavior. Desktop versions of IE do implement this function.",
                    "version_added": true
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.prompt()"
        }
    ],
    "dom-radionodelist-value": [
        {
            "slug": "API/RadioNodeList/value",
            "summary": "If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "RadioNodeList.value"
        }
    ],
    "dom-select-add": [
        {
            "slug": "API/HTMLSelectElement/add",
            "summary": "The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.add()"
        }
    ],
    "dom-select-item": [
        {
            "slug": "API/HTMLSelectElement/item",
            "summary": "The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in the parameter, or null if there are none.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.item()"
        }
    ],
    "dom-select-nameditem": [
        {
            "slug": "API/HTMLSelectElement/namedItem",
            "summary": "The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "notes": "<code>namedItem</code> does not appear to take the <code>name</code> attribute into account (only the <code>id</code> attribute) on Internet Explorer and Edge. There is a <a href='https://connect.microsoft.com/IE/feedbackdetail/view/2414092/'>bug report</a> to Microsoft about this.",
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "notes": "<code>namedItem</code> does not appear to take the <code>name</code> attribute into account (only the <code>id</code> attribute) on Internet Explorer and Edge. There is a <a href='https://connect.microsoft.com/IE/feedbackdetail/view/2414092/'>bug report</a> to Microsoft about this.",
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.namedItem()"
        }
    ],
    "dom-select-remove": [
        {
            "slug": "API/HTMLSelectElement/remove",
            "summary": "The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.remove()"
        }
    ],
    "dom-select-selectedindex": [
        {
            "slug": "API/HTMLSelectElement/selectedIndex",
            "summary": "The HTMLSelectElement.selectedIndex is a long that reflects the index of the first selected option element. The value -1 indicates that no element is selected.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLSelectElement.selectedIndex"
        }
    ],
    "dom-select-selectedoptions": [
        {
            "slug": "API/HTMLSelectElement/selectedOptions",
            "summary": "The read-only HTMLSelectElement property selectedOptions contains a list of the option elements contained within the select element that are currently selected. The list of selected options is an HTMLCollection object with one entry per currently selected option.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSelectElement.selectedOptions"
        }
    ],
    "dom-select-type": [
        {
            "slug": "API/HTMLSelectElement/type",
            "summary": "The HTMLSelectElement.type read-only property returns the form control's type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "1"
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "HTMLSelectElement.type"
        }
    ],
    "dom-self": [
        {
            "slug": "API/Window/self",
            "summary": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.self"
        }
    ],
    "dom-sessionstorage": [
        {
            "slug": "API/Window/sessionStorage",
            "summary": "The sessionStorage property allows you to access a session Storage object for the current origin. sessionStorage is similar to Window.localStorage; the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated with the value of the top-level browsing context, which differs from how session cookies work.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.sessionStorage"
        }
    ],
    "dom-setinterval": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/setInterval",
            "summary": "The setInterval() method of the WindowOrWorkerGlobalScope mixin repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. It returns an interval ID which uniquely identifies the interval, so you can remove it later by calling clearInterval(). This method is offered on the Window and Worker interfaces.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setInterval()"
        },
        {
            "slug": "API/WindowOrWorkerGlobalScope/setInterval",
            "summary": "The setInterval() method of the WindowOrWorkerGlobalScope mixin repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. It returns an interval ID which uniquely identifies the interval, so you can remove it later by calling clearInterval(). This method is offered on the Window and Worker interfaces.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setInterval()"
        }
    ],
    "dom-settimeout": [
        {
            "slug": "API/WindowOrWorkerGlobalScope/setTimeout",
            "summary": "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to Window.setTimeout()) sets a timer which executes a function or specified piece of code once the timer expires.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setTimeout()"
        },
        {
            "slug": "API/WindowOrWorkerGlobalScope/setTimeout",
            "summary": "The setTimeout() method of the WindowOrWorkerGlobalScope mixin (and successor to Window.setTimeout()) sets a timer which executes a function or specified piece of code once the timer expires.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "4"
                    },
                    {
                        "notes": "<code>setInterval</code> now defined on <code><a href='https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope'>WindowOrWorkerGlobalScope</a></code> mixin.",
                        "version_added": "52"
                    }
                ],
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "WindowOrWorkerGlobalScope.setTimeout()"
        }
    ],
    "dom-sharedworker": [
        {
            "slug": "API/SharedWorker/SharedWorker",
            "summary": "The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "SharedWorker()"
        }
    ],
    "dom-sharedworker-port": [
        {
            "slug": "API/SharedWorker/port",
            "summary": "The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "SharedWorker.port"
        }
    ],
    "dom-sharedworkerglobalscope-close": [
        {
            "slug": "API/SharedWorkerGlobalScope/close",
            "summary": "The close() method of the SharedWorkerGlobalScope interface discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "54"
                },
                "firefox_android": {
                    "version_added": "54"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "SharedWorkerGlobalScope.close()"
        }
    ],
    "dom-sharedworkerglobalscope-name": [
        {
            "slug": "API/SharedWorkerGlobalScope/name",
            "summary": "The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": {
                    "version_added": "55"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "SharedWorkerGlobalScope.name"
        }
    ],
    "dom-slot-assignednodes": [
        {
            "slug": "API/HTMLSlotElement/assignedNodes",
            "summary": "The assignedNodes() property of the HTMLSlotElement interface returns the sequence of elements assigned to this slot or, alternatively, the slot's fallback content.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "HTMLSlotElement.assignedNodes()"
        }
    ],
    "dom-slot-name": [
        {
            "slug": "API/HTMLSlotElement/name",
            "summary": "The name property of the HTMLSlotElement interface returns or sets the slot name. A slot is a placeholder inside a web component that users can fill with their own markup.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "HTMLSlotElement.name"
        }
    ],
    "dom-storage-clear": [
        {
            "slug": "API/Storage/clear",
            "summary": "The clear() method of the Storage interface, when invoked, clears all stored keys.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Storage.clear()"
        }
    ],
    "dom-storage-getitem": [
        {
            "slug": "API/Storage/getItem",
            "summary": "The getItem() method of the Storage interface, when passed a key name, will return that key's value or null if the key does not exist.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "localStorage.getItem()"
        }
    ],
    "dom-storage-key": [
        {
            "slug": "API/Storage/key",
            "summary": "The key() method of the Storage interface, when passed a number n, returns the name of the nth key in the storage. The order of keys is user-agent defined, so you should not rely on it.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Storage.key()"
        }
    ],
    "dom-storage-length": [
        {
            "slug": "API/Storage/length",
            "summary": "The length read-only property of the Storage interface returns an integer representing the number of data items stored in the Storage object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Storage.length"
        }
    ],
    "dom-storage-removeitem": [
        {
            "slug": "API/Storage/removeItem",
            "summary": "The removeItem() method of the Storage interface, when passed a key name, will remove that key from the storage if it exists. If there is no item associated with the given key, this method will do nothing.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Storage.removeItem()"
        }
    ],
    "dom-storage-setitem": [
        {
            "slug": "API/Storage/setItem",
            "summary": "The setItem() method of the Storage interface, when passed a key name and value, will add that key to the storage, or update that key's value if it already exists.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Storage.setItem()"
        }
    ],
    "dom-tabindex": [
        {
            "slug": "API/HTMLElement/tabIndex",
            "summary": "The HTMLElement.tabIndex property represents the tab order of the current element.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement.tabIndex"
        }
    ],
    "dom-table-caption": [
        {
            "slug": "API/HTMLTableElement/caption",
            "summary": "The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, this property is null.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.caption"
        }
    ],
    "dom-table-insertrow": [
        {
            "slug": "API/HTMLTableElement/insertRow",
            "summary": "The HTMLTableElement.insertRow() method inserts a new row (tr) in a given table, and returns a reference to the new row.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting with Firefox 20, the index argument has been made optional and defaults to -1 as per HTML specification.",
                    "version_added": "3"
                },
                "firefox_android": {
                    "notes": "Starting with Firefox 20, the index argument has been made optional and defaults to -1 as per HTML specification.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.insertRow()"
        }
    ],
    "dom-table-tfoot": [
        {
            "slug": "API/HTMLTableElement/tFoot",
            "summary": "The HTMLTableElement.tFoot property represents the tfoot element of a table. Its value will be null if there is no such element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.tFoot"
        }
    ],
    "dom-table-thead": [
        {
            "slug": "API/HTMLTableElement/tHead",
            "summary": "The HTMLTableElement.tHead represents the thead element of a table . Its value will be null if there is no such element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement.tHead"
        }
    ],
    "dom-template-content": [
        {
            "slug": "API/HTMLTemplateElement/content",
            "summary": "The HTMLTemplateElement.content property returns a template element's template contents (a DocumentFragment).",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTemplateElement.content"
        }
    ],
    "dom-textarea/input-select": [
        {
            "slug": "API/HTMLInputElement/select",
            "summary": "The HTMLInputElement.select() method selects all the text in a textarea element or in an input element that includes a text field.",
            "support": {},
            "title": "HTMLInputElement.select()"
        }
    ],
    "dom-textarea/input-setselectionrange": [
        {
            "slug": "API/HTMLInputElement/setSelectionRange",
            "summary": "The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an input or textarea element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": null
                },
                "qq_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "uc_android": {
                    "version_added": null
                },
                "uc_chinese_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLInputElement.setSelectionRange()"
        }
    ],
    "dom-textmetrics-width": [
        {
            "slug": "API/TextMetrics/width",
            "summary": "The read-only width property of the TextMetrics interface contains the text's advance width (the width of that inline box) in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "2"
                }
            },
            "title": "TextMetrics.width"
        }
    ],
    "dom-time-datetime": [
        {
            "slug": "API/HTMLTimeElement/dateTime",
            "summary": "The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "62"
                }
            },
            "title": "HTMLTimeElement.dateTime"
        }
    ],
    "dom-timeranges-end": [
        {
            "slug": "API/TimeRanges/end",
            "summary": "Returns the time offset at which a specified time range ends.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "TimeRanges.end()"
        }
    ],
    "dom-timeranges-length": [
        {
            "slug": "API/TimeRanges/length",
            "summary": "The TimeRanges.length read-only property returns the number of ranges in the object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "TimeRanges.length"
        }
    ],
    "dom-timeranges-start": [
        {
            "slug": "API/TimeRanges/start",
            "summary": "Returns the time offset at which a specified time range begins.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "TimeRanges.start()"
        }
    ],
    "dom-title": [
        {
            "slug": "API/HTMLElement/title",
            "summary": "The HTMLElement.title property represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement.title"
        }
    ],
    "dom-top": [
        {
            "slug": "API/Window/top",
            "summary": "Returns a reference to the topmost window in the window hierarchy.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 6, this property is read only, as defined by the standard.",
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Window.top"
        }
    ],
    "dom-tr-insertcell": [
        {
            "slug": "API/HTMLTableRowElement/insertCell",
            "summary": "The HTMLTableRowElement.insertCell() method inserts a new cell (td) into a table row (tr) and returns a reference to the cell.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableRowElement.insertCell()"
        }
    ],
    "dom-track-src": [
        {
            "slug": "API/HTMLTrackElement/src",
            "summary": "The HTMLTrackElement.src property reflects the value of the track element's src attribute, which indicates the URL of the text track's data.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "Setting the <code>src</code> property did not work properly in versions prior to 50.",
                        "version_added": "31"
                    },
                    {
                        "flags": [
                            {
                                "name": "media.webvtt.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "24",
                        "version_removed": "30"
                    }
                ],
                "firefox_android": [
                    {
                        "notes": "Setting the <code>src</code> property did not work properly in versions prior to 50.",
                        "version_added": "31"
                    },
                    {
                        "flags": [
                            {
                                "name": "media.webvtt.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "24",
                        "version_removed": "30"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTrackElement.src"
        }
    ],
    "dom-validitystate-badinput": [
        {
            "slug": "API/ValidityState/badInput",
            "summary": "The read-only property ValidityState.badInput indicates if the user has provided input that the browser is unable to convert. For example, if you have a number input element whose content is a string. Note: While this is unsupported in Internet Explorer, any non-numeric value will be dismissed from the field if it is a number input.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "ValidityState.badInput"
        }
    ],
    "dom-validitystate-toolong": [
        {
            "slug": "API/ValidityState/tooLong",
            "summary": "The read-only property ValidityState.tooLong indicates if the value of an input or textarea, after having been edited by the user, exceeds the maximum code-unit length established by the element's maxlength attribute.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "ValidityState.tooLong"
        }
    ],
    "dom-videotrack-id": [
        {
            "slug": "API/VideoTrack/id",
            "summary": "The id property contains a string which uniquely identifies the track represented by the VideoTrack.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "VideoTrack.id"
        }
    ],
    "dom-videotrack-kind": [
        {
            "slug": "API/VideoTrack/kind",
            "summary": "The kind property contains a string indicating the category of video contained in the VideoTrack.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "VideoTrack.kind"
        }
    ],
    "dom-videotrack-label": [
        {
            "slug": "API/VideoTrack/label",
            "summary": "The read-only VideoTrack property label returns a string specifying the video track's human-readable label, if one is available; otherwise, it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "VideoTrack.label"
        }
    ],
    "dom-videotrack-language": [
        {
            "slug": "API/VideoTrack/language",
            "summary": "The read-only VideoTrack property language returns a string identifying the language used in the video track.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Videotrack.language"
        }
    ],
    "dom-videotrack-selected": [
        {
            "slug": "API/VideoTrack/selected",
            "summary": "The VideoTrack property selected controls whether or not a particular video track is active.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "VideoTrack.selected"
        }
    ],
    "dom-videotracklist-gettrackbyid": [
        {
            "slug": "API/VideoTrackList/getTrackById",
            "summary": "The VideoTrackList method getTrackById() returns the first VideoTrack object from the track list whose id matches the specified string.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "getTrackById"
        }
    ],
    "dom-videotracklist-length": [
        {
            "slug": "API/VideoTrackList/length",
            "summary": "The read-only VideoTrackList property length returns the number of entries in the VideoTrackList, each of which is a VideoTrack representing one video track in the media element.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "VideoTrackList.length"
        }
    ],
    "dom-videotracklist-selectedindex": [
        {
            "slug": "API/VideoTrackList/selectedIndex",
            "summary": "The read-only VideoTrackList property selectedIndex returns the index of the currently selected track, if any, or -1 otherwise.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "VideoTrackList.selectedIndex"
        }
    ],
    "dom-websocket": [
        {
            "slug": "API/WebSocket/WebSocket",
            "summary": "The WebSocket() constructor returns a new WebSocket object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "7"
                    },
                    {
                        "notes": "Parameter <code>protocols</code> not supported.",
                        "version_added": "4",
                        "version_removed": "7"
                    }
                ],
                "firefox_android": {
                    "version_added": "7"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket()"
        }
    ],
    "dom-websocket-binarytype": [
        {
            "slug": "API/WebSocket/binaryType",
            "summary": "The WebSocket.binaryType property returns the type of binary data being transmitted by the connection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.binaryType"
        }
    ],
    "dom-websocket-bufferedamount": [
        {
            "slug": "API/WebSocket/bufferedAmount",
            "summary": "The WebSocket.bufferedAmount read-only property returns the number of bytes of data that have been queued using calls to send() but not yet transmitted to the network. This value resets to zero once all queued data has been sent. This value does not reset to zero when the connection is closed; if you keep calling send(), this will continue to climb.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.bufferedAmount"
        }
    ],
    "dom-websocket-close": [
        {
            "slug": "API/WebSocket/close",
            "summary": "The WebSocket.close() method closes the WebSocket connection or connection attempt, if any. If the connection is already CLOSED, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "8"
                    },
                    {
                        "notes": "Parameters not supported, see <a href='https://bugzil.la/674716'>bug 674716</a>.",
                        "version_added": "4",
                        "version_removed": "8"
                    }
                ],
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.close()"
        }
    ],
    "dom-websocket-extensions": [
        {
            "slug": "API/WebSocket/extensions",
            "summary": "The WebSocket.extensions read-only property returns the extensions selected by the server. This is currently only the empty string or a list of extensions as negotiated by the connection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "version_added": "8"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.extensions"
        }
    ],
    "dom-websocket-protocol": [
        {
            "slug": "API/WebSocket/protocol",
            "summary": "The WebSocket.protocol read-only property returns the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.protocol"
        }
    ],
    "dom-websocket-readystate": [
        {
            "slug": "API/WebSocket/readyState",
            "summary": "The WebSocket.readyState read-only property returns the current state of the WebSocket connection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.readyState"
        }
    ],
    "dom-websocket-send": [
        {
            "slug": "API/WebSocket/send",
            "summary": "The WebSocket.send() method enqueues the specified data to be transmitted to the server over the WebSocket connection, increasing the value of bufferedAmount by the number of bytes needed to contain the data. If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "notes": "See <a href='https://bugzil.la/775368'>bug 775368</a>.",
                        "version_added": "18"
                    },
                    {
                        "notes": "Only parameter of type <code>ArrayBuffer</code> and <code>String</code> supported.",
                        "version_added": "11",
                        "version_removed": "18"
                    },
                    {
                        "notes": "Only parameter of type <code>String</code> supported.",
                        "version_added": "8",
                        "version_removed": "11"
                    },
                    {
                        "notes": "Only parameter of type <code>String</code> supported. Returns <code>boolean</code>.",
                        "version_added": "4",
                        "version_removed": "8"
                    }
                ],
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.send()"
        }
    ],
    "dom-websocket-url": [
        {
            "slug": "API/WebSocket/url",
            "summary": "The WebSocket.url read-only property returns the absolute URL of the WebSocket as resolved by the constructor.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.url"
        }
    ],
    "dom-window": [
        {
            "slug": "API/Window/window",
            "summary": "The window property of a Window object points to the window object itself.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.window"
        }
    ],
    "dom-window-blur": [
        {
            "slug": "API/Window/blur",
            "summary": "Shifts focus away from the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.blur()"
        }
    ],
    "dom-window-close": [
        {
            "slug": "API/Window/close",
            "summary": "The Window.close() method closes the current window, or the window on which it was called.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "Starting in Firefox 46.0.1, <code>Window.close()</code> can no longer close windows that weren't opened by the same script. This is a security precaution."
                    ],
                    "version_added": true
                },
                "firefox_android": {
                    "notes": [
                        "Starting in Firefox 46.0.1, <code>Window.close()</code> can no longer close windows that weren't opened by the same script. This is a security precaution."
                    ],
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.close()"
        }
    ],
    "dom-window-customelements": [
        {
            "slug": "API/Window/customElements",
            "summary": "The customElements read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/microsoft-edge/platform/status/customelements/'>Under consideration</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/microsoft-edge/platform/status/customelements/'>Under consideration</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.customelements.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "Window.customElements"
        }
    ],
    "dom-window-focus": [
        {
            "slug": "API/Window/focus",
            "summary": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.focus()"
        }
    ],
    "dom-window-locationbar": [
        {
            "slug": "API/Window/locationbar",
            "summary": "Returns the locationbar object, whose visibility can be checked.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.locationbar"
        }
    ],
    "dom-window-menubar": [
        {
            "slug": "API/Window/menubar",
            "summary": "Returns the menubar object, whose visibility can be checked.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.menubar"
        }
    ],
    "dom-window-personalbar": [
        {
            "slug": "API/Window/personalbar",
            "summary": "Returns the personalbar object, whose visibility can be toggled in the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.personalbar"
        }
    ],
    "dom-window-postmessage": [
        {
            "slug": "API/Window/postMessage",
            "summary": "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "Supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons.",
                        "version_added": "8"
                    },
                    {
                        "notes": "The <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself.",
                        "version_added": "6"
                    },
                    {
                        "notes": "The <code>message</code> parameter must be a string.",
                        "version_added": true,
                        "version_removed": "6"
                    }
                ],
                "firefox_android": [
                    {
                        "notes": "Supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons.",
                        "version_added": "8"
                    },
                    {
                        "notes": "The <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself.",
                        "version_added": "6"
                    },
                    {
                        "notes": "The <code>message</code> parameter must be a string.",
                        "version_added": true,
                        "version_removed": "6"
                    }
                ],
                "ie": [
                    {
                        "notes": "IE10 had an important limitation: see this <a href='https://stackoverflow.com/questions/16226924/is-cross-origin-postmessage-broken-in-ie10'>article</a> for details.",
                        "version_added": "10"
                    },
                    {
                        "notes": "Support only for <code>&lt;frame&gt;</code> and <code>&lt;iframe&gt;</code>.",
                        "version_added": "8",
                        "version_removed": "10"
                    }
                ],
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "notes": "For security reasons, to work properly on Safari, construct using <code>document.getElementById('your-frame').contentWindow</code>.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.postMessage()"
        }
    ],
    "dom-window-scrollbars": [
        {
            "slug": "API/Window/scrollbars",
            "summary": "The Window.scrollbars property returns the scrollbars object, whose visibility can be checked.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.scrollbars"
        }
    ],
    "dom-window-statusbar": [
        {
            "slug": "API/Window/statusbar",
            "summary": "The Window.statusbar property returns the statusbar object, whose visibility can be toggled in the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.statusbar"
        }
    ],
    "dom-window-stop": [
        {
            "slug": "API/Window/stop",
            "summary": "The window.stop() stops further resource loading in the current browsing context, equivalent to the stop button in the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.stop()"
        }
    ],
    "dom-window-toolbar": [
        {
            "slug": "API/Window/toolbar",
            "summary": "The Window.toolbar property returns the toolbar object, whose visibility can be toggled in the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.toolbar"
        }
    ],
    "dom-worker": [
        {
            "slug": "API/Worker/Worker",
            "summary": "The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "Worker()"
        }
    ],
    "dom-worker-navigator": [
        {
            "slug": "API/WorkerGlobalScope/navigator",
            "summary": "The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WorkerGlobalScope.navigator"
        }
    ],
    "dom-worker-postmessage": [
        {
            "slug": "API/Worker/postMessage",
            "summary": "The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "Internet Explorer does not support <code>Transferable</code> objects.",
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Worker.postMessage()"
        }
    ],
    "dom-worker-terminate": [
        {
            "slug": "API/Worker/terminate",
            "summary": "The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "Worker.terminate()"
        }
    ],
    "dom-workerglobalscope-importscripts": [
        {
            "slug": "API/WorkerGlobalScope/importScripts",
            "summary": "The importScripts() method of the WorkerGlobalScope interface synchronously imports one or more scripts into the worker's scope.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WorkerGlobalScope.importScripts()"
        }
    ],
    "dom-workerglobalscope-location": [
        {
            "slug": "API/WorkerGlobalScope/location",
            "summary": "The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WorkerGlobalScope.location"
        }
    ],
    "dom-workerglobalscope-self": [
        {
            "slug": "API/WorkerGlobalScope/self",
            "summary": "The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope,  SharedWorkerGlobalScope, or ServiceWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "34"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WorkerGlobalScope.self"
        }
    ],
    "dragevent": [
        {
            "slug": "API/DragEvent",
            "summary": "The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DragEvent"
        }
    ],
    "e-mail-state-(type=email)": [
        {
            "slug": "HTML/Element/input/email",
            "summary": "input elements of type email are used to let the user enter and edit an e-mail address, or, if the multiple attribute is specified, a list of e-mail addresses.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "notes": [
                        "Doesn't do validation, but instead offers a custom 'email' keyboard, which is designed to make entering email addresses easier.",
                        "Automatically applies a default style of <code>opacity: 0.4</code> to disable textual <code>&lt;input&gt;</code> elements, including those of type 'email'. Other major browsers don't currently share this particular default style."
                    ],
                    "version_added": "3.1"
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "<input type=\"email\">"
        }
    ],
    "embedding-custom-non-visible-data-with-the-data-*-attributes": [
        {
            "slug": "HTML/Global_attributes/data-*",
            "summary": "The data-* global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "data-*"
        }
    ],
    "event-handler-attributes": [
        {
            "slug": "Guide/Events/Event_handlers",
            "summary": "The Web platform provides several ways to get notified of DOM events.  Two common styles are: the generalized addEventListener() and a set of specific on-event handlers.",
            "support": {},
            "title": "DOM on-event handlers"
        }
    ],
    "fakepath-srsly": [
        {
            "slug": "HTML/Element/input",
            "summary": "The HTML input element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.",
            "support": {},
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "file-upload-state-(type=file)": [
        {
            "slug": "HTML/Element/input/file",
            "summary": "input elements with type=\"file\" let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "You can set as well as get the value of <code>HTMLInputElement.files</code> in all modern browsers; this was most recently added to Firefox, in version 57 (see <a href='https://bugzil.la/1384030'>bug 1384030</a>).",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"file\">"
        }
    ],
    "filters": [
        {
            "slug": "API/CanvasRenderingContext2D/filter",
            "summary": "The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects such as blurring and grayscaling. It is similar to the CSS filter property and accepts the same values.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": {
                    "version_added": "52"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "49"
                    },
                    {
                        "flags": [
                            {
                                "name": "canvas.filters.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "35",
                        "version_removed": "48"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "49"
                    },
                    {
                        "flags": [
                            {
                                "name": "canvas.filters.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "35",
                        "version_removed": "48"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "52"
                }
            },
            "title": "CanvasRenderingContext2D.filter"
        }
    ],
    "global-attributes": [
        {
            "slug": "HTML/Global_attributes",
            "summary": "Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.",
            "support": {},
            "title": "Global attributes"
        }
    ],
    "globaleventhandlers": [
        {
            "slug": "API/GlobalEventHandlers",
            "summary": "The GlobalEventHandlers mixin describes the event handlers common to several interfaces like HTMLElement, Document, or Window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers"
        }
    ],
    "handler-abstractworker-onerror": [
        {
            "slug": "API/AbstractWorker/onerror",
            "summary": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "AbstractWorker.onerror"
        }
    ],
    "handler-broadcastchannel-onmessage": [
        {
            "slug": "API/BroadcastChannel/onmessage",
            "summary": "The BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel. Such an event is sent by the browser with a message broadcasted to the channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "firefox": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "BroadcastChannel.onmessage"
        }
    ],
    "handler-broadcastchannel-onmessageerror": [
        {
            "slug": "API/BroadcastChannel/onmessageerror",
            "summary": "The onmessageerror event handler of the BroadcastChannel interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the BroadcastChannel instance \u2014 that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "firefox": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "BroadcastChannel.onmessageerror"
        }
    ],
    "handler-dedicatedworkerglobalscope-onmessage": [
        {
            "slug": "API/DedicatedWorkerGlobalScope/onmessage",
            "summary": "The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker \u2014 i.e. when a message is sent to the worker using the Worker.postMessage method.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "DedicatedWorkerGlobalScope.onmessage"
        }
    ],
    "handler-dedicatedworkerglobalscope-onmessageerror": [
        {
            "slug": "API/DedicatedWorkerGlobalScope/onmessageerror",
            "summary": "The onmessageerror event handler of the DedicatedWorkerGlobalScope interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the worker\u2014that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "DedicatedWorkerGlobalScope.onmessageerror"
        }
    ],
    "handler-eventsource-onerror": [
        {
            "slug": "API/EventSource/onerror",
            "summary": "The onerror property of the EventSource interface is an EventHandler called when an error occurs and the error event is dispatched on an EventSource object.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource.onerror"
        }
    ],
    "handler-eventsource-onmessage": [
        {
            "slug": "API/EventSource/onmessage",
            "summary": "The onmessage property of the EventSource interface is an EventHandler called when a message event is received, that is when a message is coming from the source.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource.onmessage"
        }
    ],
    "handler-eventsource-onopen": [
        {
            "slug": "API/EventSource/onopen",
            "summary": "The onopen property of the EventSource interface is an EventHandler called when an open event is received, that is when the connection was just opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource.onopen"
        }
    ],
    "handler-messageport-onmessage": [
        {
            "slug": "API/MessagePort/onmessage",
            "summary": "The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port \u2014 that is, when the port receives a message.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MessagePort.onmessage"
        }
    ],
    "handler-messageport-onmessageerror": [
        {
            "slug": "API/MessagePort/onmessageerror",
            "summary": "The onmessageerror event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the port\u2014that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "MessagePort.onmessageerror"
        }
    ],
    "handler-onabort": [
        {
            "slug": "API/GlobalEventHandlers/onabort",
            "summary": "The onabort property of the GlobalEventHandlers mixin is the EventHandler for processing abort events sent to the window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onabort"
        }
    ],
    "handler-onblur": [
        {
            "slug": "API/GlobalEventHandlers/onblur",
            "summary": "The onblur property of the GlobalEventHandlers mixin is the EventHandler for processing blur events. It's available on Element, Document, and Window.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onblur"
        }
    ],
    "handler-oncancel": [
        {
            "slug": "API/GlobalEventHandlers/oncancel",
            "summary": "The oncancel property of the GlobalEventHandlers mixin is an EventHandler for processing cancel events sent to a dialog element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncancel"
        }
    ],
    "handler-oncanplay": [
        {
            "slug": "API/GlobalEventHandlers/oncanplay",
            "summary": "The oncanplay property of the GlobalEventHandlers mixin is the EventHandler for processing canplay events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncanplay"
        }
    ],
    "handler-oncanplaythrough": [
        {
            "slug": "API/GlobalEventHandlers/oncanplaythrough",
            "summary": "The oncanplaythrough property of the GlobalEventHandlers mixin is the EventHandler for processing canplaythrough events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncanplaythrough"
        }
    ],
    "handler-onchange": [
        {
            "slug": "API/GlobalEventHandlers/onchange",
            "summary": "The onchange property of the GlobalEventHandlers mixin is an EventHandler for processing change events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onchange"
        }
    ],
    "handler-onclick": [
        {
            "slug": "API/GlobalEventHandlers/onclick",
            "summary": "The onclick property of the GlobalEventHandlers mixin is the EventHandler for processing click events on a given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onclick"
        }
    ],
    "handler-onclose": [
        {
            "slug": "API/GlobalEventHandlers/onclose",
            "summary": "The onclose property of the GlobalEventHandlers mixin is an EventHandler for processing close events sent to a dialog element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onclose"
        }
    ],
    "handler-oncontextmenu": [
        {
            "slug": "API/GlobalEventHandlers/oncontextmenu",
            "summary": "The oncontextmenu property of the GlobalEventHandlers mixin is an EventHandler that processes contextmenu events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.oncontextmenu"
        }
    ],
    "handler-oncuechange": [
        {
            "slug": "API/GlobalEventHandlers/oncuechange",
            "summary": "The oncuechange property of the GlobalEventHandlers mixin is the EventHandler for processing cuechange events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oncuechange"
        }
    ],
    "handler-ondblclick": [
        {
            "slug": "API/GlobalEventHandlers/ondblclick",
            "summary": "The ondblclick property of the GlobalEventHandlers mixin is an EventHandler that processes dblclick events on the given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondblclick"
        }
    ],
    "handler-ondurationchange": [
        {
            "slug": "API/GlobalEventHandlers/ondurationchange",
            "summary": "The ondurationchange property of the GlobalEventHandlers mixin is the EventHandler for processing durationchange events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.ondurationchange"
        }
    ],
    "handler-onemptied": [
        {
            "slug": "API/GlobalEventHandlers/onemptied",
            "summary": "The onemptied property sets and returns the event handler for the emptied event.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onemptied"
        }
    ],
    "handler-onended": [
        {
            "slug": "API/GlobalEventHandlers/onended",
            "summary": "The onended property of the GlobalEventHandlers mixin is the EventHandler for processing ended events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onended"
        }
    ],
    "handler-onerror": [
        {
            "slug": "API/GlobalEventHandlers/onerror",
            "summary": "The onerror property of the GlobalEventHandlers mixin is an EventHandler that processes error events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onerror"
        },
        {
            "slug": "API/HTMLMediaElement/onerror",
            "summary": "The onerror property of the HTMLMediaElement interface is the EventHandler for processing error events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.onerror"
        }
    ],
    "handler-onfocus": [
        {
            "slug": "API/GlobalEventHandlers/onfocus",
            "summary": "The onfocus property of the GlobalEventHandlers mixin is an EventHandler that processes focus events on the given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onfocus"
        }
    ],
    "handler-oninvalid": [
        {
            "slug": "API/GlobalEventHandlers/oninvalid",
            "summary": "The oninvalid property of the GlobalEventHandlers mixin is the EventHandler for processing invalid events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oninvalid"
        }
    ],
    "handler-onkeydown": [
        {
            "slug": "API/GlobalEventHandlers/onkeydown",
            "summary": "The onkeydown property of the GlobalEventHandlers mixin is an EventHandler that processes keydown events on a given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onkeydown"
        }
    ],
    "handler-onkeypress": [
        {
            "slug": "API/GlobalEventHandlers/onkeypress",
            "summary": "The onkeypress property of the GlobalEventHandlers mixin is an EventHandler that processes keypress events on a given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onkeypress"
        }
    ],
    "handler-onkeyup": [
        {
            "slug": "API/GlobalEventHandlers/onkeyup",
            "summary": "The onkeyup property of the GlobalEventHandlers mixin is an EventHandler that processes keyup events on a given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onkeyup"
        }
    ],
    "handler-onload": [
        {
            "slug": "API/GlobalEventHandlers/onload",
            "summary": "The onload property of the GlobalEventHandlers mixin is an event handler for the load event of a Window, XMLHttpRequest, img element, etc., which fires when the resource has loaded.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onload"
        }
    ],
    "handler-onloadeddata": [
        {
            "slug": "API/GlobalEventHandlers/onloadeddata",
            "summary": "The onloadeddata property of the GlobalEventHandlers mixin is the EventHandler for processing loadeddata events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onloadeddata"
        }
    ],
    "handler-onloadedmetadata": [
        {
            "slug": "API/GlobalEventHandlers/onloadedmetadata",
            "summary": "The onloadedmetadata property of the GlobalEventHandlers mixin is the EventHandler for processing loadedmetadata events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onloadedmetadata"
        }
    ],
    "handler-onloadend": [
        {
            "slug": "API/GlobalEventHandlers/onloadend",
            "summary": "The onloadend property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadend event is raised (when progress has stopped on the loading of a resource.)",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.onloadend"
        }
    ],
    "handler-onloadstart": [
        {
            "slug": "API/GlobalEventHandlers/onloadstart",
            "summary": "The onloadstart property of the GlobalEventHandlers mixin is an EventHandler representing the code to be called when the loadstart event is raised (when progress has begun on the loading of a resource.)",
            "support": {
                "chrome": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                },
                "safari": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                },
                "webview_android": {
                    "notes": "The <code>loadstart</code> event is not fired on <code>&lt;img&gt;</code> elements.",
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onloadstart"
        }
    ],
    "handler-onmousedown": [
        {
            "slug": "API/GlobalEventHandlers/onmousedown",
            "summary": "The onmousedown property of the GlobalEventHandlers mixin is an EventHandler that processes mousedown events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmousedown"
        }
    ],
    "handler-onmouseenter": [
        {
            "slug": "API/GlobalEventHandlers/onmouseenter",
            "summary": "The onmouseenter property of the GlobalEventHandlers mixin is the EventHandler for processing mouseenter events.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "17"
                },
                "opera_android": {
                    "version_added": "17"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseenter"
        }
    ],
    "handler-onmouseleave": [
        {
            "slug": "API/GlobalEventHandlers/onmouseleave",
            "summary": "The onmouseleave property of the GlobalEventHandlers mixin is the EventHandler for processing mouseleave events.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "17"
                },
                "opera_android": {
                    "version_added": "17"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseleave"
        }
    ],
    "handler-onmousemove": [
        {
            "slug": "API/GlobalEventHandlers/onmousemove",
            "summary": "The onmousemove property of the GlobalEventHandlers mixin is an EventHandler that processes mousemove events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmousemove"
        }
    ],
    "handler-onmouseout": [
        {
            "slug": "API/GlobalEventHandlers/onmouseout",
            "summary": "The onmouseout property of the GlobalEventHandlers mixin is an EventHandler that processes mouseout events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseout"
        }
    ],
    "handler-onmouseover": [
        {
            "slug": "API/GlobalEventHandlers/onmouseover",
            "summary": "The onmouseover property of the GlobalEventHandlers mixin is an EventHandler that processes mouseover events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseover"
        }
    ],
    "handler-onmouseup": [
        {
            "slug": "API/GlobalEventHandlers/onmouseup",
            "summary": "The onmouseup property of the GlobalEventHandlers mixin is an EventHandler that processes mouseup events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onmouseup"
        }
    ],
    "handler-onpause": [
        {
            "slug": "API/GlobalEventHandlers/onpause",
            "summary": "The onpause property of the GlobalEventHandlers mixin is the EventHandler for processing pause events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onpause"
        }
    ],
    "handler-onplay": [
        {
            "slug": "API/GlobalEventHandlers/onplay",
            "summary": "The onplay property of the GlobalEventHandlers mixin is the EventHandler for processing play events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onplay"
        }
    ],
    "handler-onreset": [
        {
            "slug": "API/GlobalEventHandlers/onreset",
            "summary": "The onreset property of the GlobalEventHandlers mixin is an EventHandler that processes reset events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onreset"
        }
    ],
    "handler-onresize": [
        {
            "slug": "API/GlobalEventHandlers/onresize",
            "summary": "The onresize property of the GlobalEventHandlers interface is an EventHandler that processes resize events.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "GlobalEventHandlers.onresize"
        }
    ],
    "handler-onscroll": [
        {
            "slug": "API/GlobalEventHandlers/onscroll",
            "summary": "The onscroll property of the GlobalEventHandlers mixin is an EventHandler that processes scroll events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onscroll"
        }
    ],
    "handler-onselect": [
        {
            "slug": "API/GlobalEventHandlers/onselect",
            "summary": "The onselect property of the GlobalEventHandlers mixin is an EventHandler that processes select events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onselect"
        }
    ],
    "handler-onsubmit": [
        {
            "slug": "API/GlobalEventHandlers/onsubmit",
            "summary": "The onsubmit property of the GlobalEventHandlers mixin is an EventHandler that processes submit events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.onsubmit"
        }
    ],
    "handler-onwheel": [
        {
            "slug": "API/GlobalEventHandlers/onwheel",
            "summary": "The onwheel property of the GlobalEventHandlers mixin is an EventHandler that processes wheel events.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "48"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "61"
                }
            },
            "title": "GlobalEventHandlers.onwheel"
        }
    ],
    "handler-sharedworkerglobalscope-onconnect": [
        {
            "slug": "API/SharedWorkerGlobalScope/onconnect",
            "summary": "The onconnect property of the SharedWorkerGlobalScope interface is an EventHandler representing the code to be called when the connect event is raised \u2014 that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "SharedWorkerGlobalScope.onconnect"
        }
    ],
    "handler-tracklist-onaddtrack": [
        {
            "slug": "API/AudioTrackList/onaddtrack",
            "summary": "The AudioTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new audio track has been added to the media element whose audio tracks the AudioTrackList represents.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "AudioTrackList.onaddtrack"
        },
        {
            "slug": "API/VideoTrackList/onaddtrack",
            "summary": "The VideoTrackList property onaddtrack is an event handler which is called when the addtrack event occurs, indicating that a new video track has been added to the media element whose video tracks the VideoTrackList represents.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "VideoTrackList.onaddtrack"
        }
    ],
    "handler-tracklist-onchange": [
        {
            "slug": "API/AudioTrackList/onchange",
            "summary": "The AudioTrackList property onchange is an event handler which is called when the change event occurs, indicating that one or more of the AudioTracks in the AudioTrackList have been enabled or disabled.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "AudioTrackList.onchange"
        },
        {
            "slug": "API/VideoTrackList/onchange",
            "summary": "The VideoTrackList property onchange is an event handler which is called when the change event occurs, indicating that a VideoTrack in the VideoTrackList has been made active.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "VideoTrackList.onchange"
        }
    ],
    "handler-tracklist-onremovetrack": [
        {
            "slug": "API/AudioTrackList/onremovetrack",
            "summary": "The AudioTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that an audio track has been removed from the media element, and therefore also from the AudioTrackList.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "AudioTrackList.onremovetrack"
        },
        {
            "slug": "API/VideoTrackList/onremovetrack",
            "summary": "The VideoTrackList onremovetrack event handler is called when the removetrack event occurs, indicating that a video track has been removed from the media element, and therefore also from the VideoTrackList.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "VideoTrackList.onremovetrack"
        }
    ],
    "handler-websocket-onclose": [
        {
            "slug": "API/WebSocket/onclose",
            "summary": "The WebSocket.onclose property returns the event listener to be called when the WebSocket connection's readyState changes to CLOSED. The listener receives a CloseEvent named \"close\".",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.onclose"
        }
    ],
    "handler-websocket-onerror": [
        {
            "slug": "API/WebSocket/onerror",
            "summary": "The WebSocket.onerror property returns the event listener to be called when an error occurs. This is a simple event named \"error\".",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.onerror"
        }
    ],
    "handler-websocket-onmessage": [
        {
            "slug": "API/WebSocket/onmessage",
            "summary": "The WebSocket.onmessage property returns the event listener to be called when a message is received from the server. The listener receives a MessageEvent named \"message\".",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.onmessage"
        }
    ],
    "handler-websocket-onopen": [
        {
            "slug": "API/WebSocket/onopen",
            "summary": "The WebSocket.onopen property returns the event listener to be called when the WebSocket connection's readyState changes to OPEN; this indicates that the connection is ready to send and receive data. The event is a simple one with the name \"open\".",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket.onopen"
        }
    ],
    "handler-window-onafterprint": [
        {
            "slug": "API/WindowEventHandlers/onafterprint",
            "summary": "The onafterprint property of the WindowEventHandlers mixin is the EventHandler for processing afterprint events for the current window. These events are raised after the user prints, or if they abort the print dialog.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": {
                    "version_added": "63"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "50"
                },
                "opera_android": {
                    "version_added": "50"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "63"
                }
            },
            "title": "WindowEventHandlers.onafterprint"
        }
    ],
    "handler-window-onbeforeprint": [
        {
            "slug": "API/WindowEventHandlers/onbeforeprint",
            "summary": "The onbeforeprint property of the WindowEventHandlers mixin is the EventHandler for processing beforeprint events for the current window. These events are raised before the print dialog window is opened.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": {
                    "version_added": "63"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "50"
                },
                "opera_android": {
                    "version_added": "50"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "63"
                }
            },
            "title": "WindowEventHandlers.onbeforeprint"
        }
    ],
    "handler-window-onbeforeunload": [
        {
            "slug": "API/WindowEventHandlers/onbeforeunload",
            "summary": "The onbeforeunload property of the WindowEventHandlers mixin is the EventHandler for processing beforeunload events. These events fire when a window is about to unload its resources. At this point, the document is still visible and the event is still cancelable.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "notes": "Implementation seems <a href='https://bugs.webkit.org/show_bug.cgi?id=19324'>defect</a>.",
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WindowEventHandlers.onbeforeunload"
        }
    ],
    "handler-window-onhashchange": [
        {
            "slug": "API/WindowEventHandlers/onhashchange",
            "summary": "The WindowEventHandlers.onhashchange property of the WindowEventHandlers mixin is the EventHandler for processing hashchange events.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WindowEventHandlers.onhashchange"
        }
    ],
    "handler-window-onmessage": [
        {
            "slug": "API/WindowEventHandlers/onmessage",
            "summary": "The onmessage property of the WindowEventHandlers mixin is the EventHandler called whenever an object receives a message event.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "WindowEventHandlers.onmessage"
        }
    ],
    "handler-window-onmessageerror": [
        {
            "slug": "API/WindowEventHandlers/onmessageerror",
            "summary": "The onmessageerror event handler of the WindowEventHandlers interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on a window\u2014that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "WindowEventHandlers.onmessageerror"
        }
    ],
    "handler-window-onrejectionhandled": [
        {
            "slug": "API/WindowEventHandlers/onrejectionhandled",
            "summary": "The onrejectionhandled property of the WindowEventHandlers mixin is the EventHandler for processing rejectionhandled events. These events are raised when Promises are rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "Firefox implements the <code>PromiseRejectionEvent</code> interface if you go to about:config and set the <code>dom.promise_rejection_events.enabled</code> pref to <code>true</code>. However, Firefox doesn't yet actually send the <code>unhandledrejection</code> or understand <code>rejectionhandled</code> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Firefox implements the <code>PromiseRejectionEvent</code> interface if you go to about:config and set the <code>dom.promise_rejection_events.enabled</code> pref to <code>true</code>. However, Firefox doesn't yet actually send the <code>unhandledrejection</code> or understand <code>rejectionhandled</code> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "WindowEventHandlers.onrejectionhandled"
        }
    ],
    "handler-window-onstorage": [
        {
            "slug": "API/WindowEventHandlers/onstorage",
            "summary": "The onstorage property of the WindowEventHandlers mixin is the EventHandler for processing storage events. These events fire when a storage area is changed (e.g., a new item is stored.)",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "WindowEventHandlers.onstorage"
        }
    ],
    "handler-window-onunhandledrejection": [
        {
            "slug": "API/WindowEventHandlers/onunhandledrejection",
            "summary": "The onunhandledrejection property of the WindowEventHandlers mixin is the EventHandler for processing unhandledrejection events. These events are raised for unhandled Promise rejections.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Firefox implements the <code>PromiseRejectionEvent</code> interface if you go to about:config and set the <code>dom.promise_rejection_events.enabled</code> pref to <code>true</code>. However, Firefox doesn't yet actually send the <code>unhandledrejection</code> or understand <code>rejectionhandled</code> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "notes": "Firefox implements the <code>PromiseRejectionEvent</code> interface if you go to about:config and set the <code>dom.promise_rejection_events.enabled</code> pref to <code>true</code>. However, Firefox doesn't yet actually send the <code>unhandledrejection</code> or understand <code>rejectionhandled</code> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "WindowEventHandlers.onunhandledrejection"
        }
    ],
    "handler-window-onunload": [
        {
            "slug": "API/WindowEventHandlers/onunload",
            "summary": "The onunload property of the WindowEventHandlers mixin is the EventHandler for processing unload events. These events fire when the window is unloading its content and resources. The resource removal is processed after the unload event occurs.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WindowEventHandlers.onunload"
        }
    ],
    "handler-worker-onmessage": [
        {
            "slug": "API/Worker/onmessage",
            "summary": "The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "Worker.onmessage"
        }
    ],
    "handler-worker-onmessageerror": [
        {
            "slug": "API/Worker/onmessageerror",
            "summary": "The onmessageerror event handler of the Worker interface is an EventListener, called whenever an MessageEvent of type messageerror is fired on the Worker instance \u2014 that is, when it receives a message that cannot be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "Worker.onmessageerror"
        }
    ],
    "handler-workerglobalscope-onerror": [
        {
            "slug": "API/WorkerGlobalScope/onerror",
            "summary": "The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WorkerGlobalScope.onerror"
        }
    ],
    "handler-workerglobalscope-onlanguagechange": [
        {
            "slug": "API/WindowEventHandlers/onlanguagechange",
            "summary": "The onlanguagechange property of the WindowEventHandlers mixin is the EventHandler for processing languagechange events.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "37"
                }
            },
            "title": "WindowEventHandlers.onlanguagechange"
        },
        {
            "slug": "API/WorkerGlobalScope/onlanguagechange",
            "summary": "The onlanguagechange property of the WorkerGlobalScope interface represents an EventHandler to be called when the languagechange event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WorkerGlobalScope.onlanguagechange"
        }
    ],
    "handler-workerglobalscope-onoffline": [
        {
            "slug": "API/WorkerGlobalScope/onoffline",
            "summary": "The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WorkerGlobalScope.onoffline"
        }
    ],
    "handler-workerglobalscope-ononline": [
        {
            "slug": "API/WorkerGlobalScope/ononline",
            "summary": "The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "29"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WorkerGlobalScope.ononline"
        }
    ],
    "hashchangeevent": [
        {
            "slug": "API/HashChangeEvent",
            "summary": "The HashChangeEvent event fires when the fragment identifier of the URL has changed.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.0"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HashChangeEvent"
        }
    ],
    "hidden-state-(type=hidden)": [
        {
            "slug": "HTML/Element/input/hidden",
            "summary": "input elements of type \"hidden\" let web developers include data that cannot be seen or modified by users when a form is submitted. For example, the ID of the content that is currently being ordered or edited, or a unique security token. Hidden inputs are completely invisible in the rendered page, and there is no way to make it visible in the page's content.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"hidden\">"
        }
    ],
    "hiddenCSS": [
        {
            "slug": "HTML/Global_attributes/hidden",
            "summary": "The hidden global attribute is a Boolean attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "hidden"
        }
    ],
    "history": [
        {
            "slug": "API/History/pushState",
            "summary": "The DOM window object provides access to the browser's history through the history object. It exposes useful methods and properties that let you move back and forth through the user's history, as well as -- starting with HTML5 -- manipulate the contents of the history stack.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "In Firefox 2 through 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using <a href='https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm'>the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed.",
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4.3"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "History.pushState()"
        }
    ],
    "hostgetimportmetaproperties": [
        {
            "slug": "JavaScript/Reference/Statements/import.meta",
            "summary": "The import.meta object is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the module, like the module's URL.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": {
                    "version_added": "64"
                },
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": {
                    "version_added": "62"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "51"
                },
                "opera_android": {
                    "version_added": "51"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "64"
                }
            },
            "title": "import.meta"
        }
    ],
    "htmlanchorelement": [
        {
            "slug": "API/HTMLAnchorElement",
            "summary": "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLAnchorElement"
        }
    ],
    "htmlareaelement": [
        {
            "slug": "API/HTMLAreaElement",
            "summary": "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLAreaElement"
        }
    ],
    "htmlaudioelement": [
        {
            "slug": "API/HTMLAudioElement",
            "summary": "The HTMLAudioElement interface provides access to the properties of audio elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLAudioElement"
        }
    ],
    "htmlbaseelement": [
        {
            "slug": "API/HTMLBaseElement",
            "summary": "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLBaseElement"
        }
    ],
    "htmlbodyelement": [
        {
            "slug": "API/HTMLBodyElement",
            "summary": "The HTMLBodyElement interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating body elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLBodyElement"
        }
    ],
    "htmlbrelement": [
        {
            "slug": "API/HTMLBRElement",
            "summary": "The HTMLBRElement interface represents a HTML line break element (br). It inherits from HTMLElement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLBRElement"
        }
    ],
    "htmlbuttonelement-htmlbuttonelement": [
        {
            "slug": "API/HTMLButtonElement",
            "summary": "The HTMLButtonElement interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating button elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLButtonElement"
        }
    ],
    "htmlcanvaselement": [
        {
            "slug": "API/HTMLCanvasElement",
            "summary": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of canvas elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "notes": "Opera Mini 5.0 and later has partial support.",
                    "version_added": "9"
                },
                "opera_android": {
                    "notes": "Opera Mini 5.0 and later has partial support.",
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLCanvasElement"
        }
    ],
    "htmldataelement": [
        {
            "slug": "API/HTMLDataElement",
            "summary": "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating data elements.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "49"
                },
                "opera_android": {
                    "version_added": "49"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "62"
                }
            },
            "title": "HTMLDataElement"
        }
    ],
    "htmldatalistelement": [
        {
            "slug": "API/HTMLDataListElement",
            "summary": "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate datalist elements and their content.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLDataListElement"
        }
    ],
    "htmldialogelement": [
        {
            "slug": "API/HTMLDialogElement",
            "summary": "The HTMLDialogElement interface provides methods to manipulate dialog elements. It inherits properties and methods from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "HTMLDialogElement"
        }
    ],
    "htmldivelement": [
        {
            "slug": "API/HTMLDivElement",
            "summary": "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLDivElement"
        }
    ],
    "htmldlistelement": [
        {
            "slug": "API/HTMLDListElement",
            "summary": "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (dl) elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLDListElement"
        }
    ],
    "htmldocument": [
        {
            "slug": "API/HTMLDocument",
            "summary": "The HTMLDocument property of Window objects is an alias that browsers expose for the Document interface object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLDocument"
        }
    ],
    "htmlelement": [
        {
            "slug": "API/HTMLElement",
            "summary": "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement"
        }
    ],
    "htmlembedelement": [
        {
            "slug": "API/HTMLEmbedElement",
            "summary": "The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating embed elements.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "notes": "Starting with Opera 45, this interface can no longer be called as a function.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "Starting with Opera 45, this interface can no longer be called as a function.",
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function.",
                    "version_added": true
                }
            },
            "title": "HTMLEmbedElement"
        }
    ],
    "htmlfieldsetelement": [
        {
            "slug": "API/HTMLFieldSetElement",
            "summary": "The HTMLFieldSetElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of fieldset elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLFieldSetElement"
        }
    ],
    "htmlformcontrolscollection": [
        {
            "slug": "API/HTMLFormControlsCollection",
            "summary": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": {
                    "version_added": "27"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLFormControlsCollection"
        }
    ],
    "htmlformelement": [
        {
            "slug": "API/HTMLFormElement",
            "summary": "The HTMLFormElement interface represents a form element in the DOM; it allows access to and in some cases modification of aspects of the form, as well as access to its component elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLFormElement"
        }
    ],
    "htmlframesetelement": [
        {
            "slug": "API/HTMLFrameSetElement",
            "summary": "The HTMLFrameSetElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating frameset elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLFrameSetElement"
        }
    ],
    "htmlheadelement": [
        {
            "slug": "API/HTMLHeadElement",
            "summary": "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLHeadElement"
        }
    ],
    "htmlheadingelement": [
        {
            "slug": "API/HTMLHeadingElement",
            "summary": "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLHeadingElement"
        }
    ],
    "htmlhrelement": [
        {
            "slug": "API/HTMLHRElement",
            "summary": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating hr elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLHRElement"
        }
    ],
    "htmlhtmlelement": [
        {
            "slug": "API/HTMLHtmlElement",
            "summary": "The HTMLHtmlElement interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLHtmlElement"
        }
    ],
    "htmlhyperlinkelementutils": [
        {
            "slug": "API/HTMLHyperlinkElementUtils",
            "summary": "The HTMLHyperlinkElementUtils mixin defines utility methods and properties to work with HTMLAnchorElement and HTMLAreaElement. These utilities allow to deal with common features like URLs.",
            "support": {
                "chrome": {
                    "notes": "Starting in Chrome 52, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting in Chrome 52, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "This mixin was called <code>URLUtils</code> before Firefox 45, and was also implemented to other by other interfaces, like <a href='https://developer.mozilla.org/docs/Web/API/Location'><code>Location</code></a>. From Firefox 45, the other interfaces implement their own version of the properties and methods they need.",
                        "Firefox was a bug whereby single contained in URLs are escaped when accessed via URL APIs (<a href='https://bugzil.la/1386683'>bug 1386683</a>). This has been as of Firefox 57."
                    ],
                    "version_added": "22"
                },
                "firefox_android": {
                    "notes": [
                        "This mixin was called <code>URLUtils</code> before Firefox 45, and was also implemented to other by other interfaces, like <a href='https://developer.mozilla.org/docs/Web/API/Location'><code>Location</code></a>. From Firefox 45, the other interfaces implement their own version of the properties and methods they need.",
                        "Firefox was a bug whereby single contained in URLs are escaped when accessed via URL APIs (<a href='https://bugzil.la/1386683'>bug 1386683</a>). This has been as of Firefox 57."
                    ],
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting in Chrome 52, the members of this interface were moved to <a href='https://developer.mozilla.org/docs/Web/API/URL'>URL</a>",
                    "version_added": true
                }
            },
            "title": "HTMLHyperlinkElementUtils"
        }
    ],
    "htmliframeelement": [
        {
            "slug": "API/HTMLIFrameElement",
            "summary": "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLIFrameElement"
        }
    ],
    "htmlimageelement": [
        {
            "slug": "API/HTMLImageElement",
            "summary": "The HTMLImageElement interface provides special properties and methods for manipulating img elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLImageElement"
        }
    ],
    "htmlinputelement": [
        {
            "slug": "API/HTMLInputElement",
            "summary": "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of input elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLInputElement"
        }
    ],
    "htmllabelelement": [
        {
            "slug": "API/HTMLLabelElement",
            "summary": "The HTMLLabelElement interface gives access to properties specific to label elements. It inherits methods and properties from the base HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLabelElement"
        }
    ],
    "htmllegendelement": [
        {
            "slug": "API/HTMLLegendElement",
            "summary": "The HTMLLegendElement is an interface allowing to access properties of the legend elements. It inherits properties and methods from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLegendElement"
        }
    ],
    "htmllielement": [
        {
            "slug": "API/HTMLLIElement",
            "summary": "The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Prior to Firefox 10, Gecko incorrectly reflected negative value attributes to 0.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "notes": "Prior to Firefox 10, Gecko incorrectly reflected negative value attributes to 0.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLIElement"
        }
    ],
    "htmllinkelement": [
        {
            "slug": "API/HTMLLinkElement",
            "summary": "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice-versa. This object inherits all of the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLLinkElement"
        }
    ],
    "htmlmapelement": [
        {
            "slug": "API/HTMLMapElement",
            "summary": "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMapElement"
        }
    ],
    "htmlmediaelement": [
        {
            "slug": "API/HTMLMediaElement",
            "summary": "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement"
        }
    ],
    "htmlmetaelement": [
        {
            "slug": "API/HTMLMetaElement",
            "summary": "The HTMLMetaElement interface contains descriptive metadata about a document. It inherits all of the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMetaElement"
        }
    ],
    "htmlmeterelement": [
        {
            "slug": "API/HTMLMeterElement",
            "summary": "The HTML meter elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of meter elements.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                }
            },
            "title": "HTMLMeterElement"
        }
    ],
    "htmlmodelement": [
        {
            "slug": "API/HTMLModElement",
            "summary": "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is del and ins.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLModElement"
        }
    ],
    "htmlobjectelement": [
        {
            "slug": "API/HTMLObjectElement",
            "summary": "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of object element, representing external resources.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLObjectElement"
        }
    ],
    "htmlolistelement": [
        {
            "slug": "API/HTMLOListElement",
            "summary": "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLOListElement"
        }
    ],
    "htmloptgroupelement": [
        {
            "slug": "API/HTMLOptGroupElement",
            "summary": "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of optgroup elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLOptGroupElement"
        }
    ],
    "htmloptionelement": [
        {
            "slug": "API/HTMLOptionElement",
            "summary": "The HTMLOptionElement interface represents option elements and inherits all classes and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLOptionElement"
        }
    ],
    "htmloutputelement": [
        {
            "slug": "API/HTMLOutputElement",
            "summary": "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of output elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLOutputElement"
        }
    ],
    "htmlparagraphelement": [
        {
            "slug": "API/HTMLParagraphElement",
            "summary": "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating p elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLParagraphElement"
        }
    ],
    "htmlparamelement": [
        {
            "slug": "API/HTMLParamElement",
            "summary": "The HTMLParamElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating param elements, representing a pair of a key and a value that acts as a parameter for an object element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLParamElement"
        }
    ],
    "htmlpictureelement": [
        {
            "slug": "API/HTMLPictureElement",
            "summary": "The HTMLPictureElement interface represents a picture HTML element. It doesn't implement specific properties or methods.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": {
                    "version_added": "38"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.image.picture.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "32",
                        "version_removed": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.image.picture.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "32",
                        "version_removed": "52"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "25"
                },
                "opera_android": {
                    "version_added": "25"
                },
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "38"
                }
            },
            "title": "HTMLPictureElement"
        }
    ],
    "htmlpreelement": [
        {
            "slug": "API/HTMLPreElement",
            "summary": "The HTMLPreElement interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (pre).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLPreElement"
        }
    ],
    "htmlprogresselement": [
        {
            "slug": "API/HTMLProgressElement",
            "summary": "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of progress elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLProgressElement"
        }
    ],
    "htmlquoteelement": [
        {
            "slug": "API/HTMLQuoteElement",
            "summary": "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like blockquote and q, but not the cite element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLQuoteElement"
        }
    ],
    "htmlscriptelement": [
        {
            "slug": "API/HTMLScriptElement",
            "summary": "HTML script elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of script elements (beyond the inherited HTMLElement interface).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLScriptElement"
        }
    ],
    "htmlselectelement": [
        {
            "slug": "API/HTMLSelectElement",
            "summary": "The HTMLSelectElement interface represents a select HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "You should watch for <a href='https://developer.mozilla.org/docs/Web/Events/change'>change</a> events on <a href='https://developer.mozilla.org/docs/Web/HTML/Element/select'><code>&lt;select&gt;</code></a> instead of watching <code>&lt;option&gt;</code> elements for events. See <a href='https://bugzil.la/1090602'>bug 1090602</a> and <a href='https://developer.mozilla.org/Firefox/Multiprocess_Firefox/Web_content_compatibility'>Multiprocess Firefox Web content compatibility</a> for details.",
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "1"
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "HTMLSelectElement"
        }
    ],
    "htmlslotelement": [
        {
            "slug": "API/HTMLSlotElement",
            "summary": "The HTMLSlotElement interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML slot element.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "HTMLSlotElement"
        }
    ],
    "htmlsourceelement": [
        {
            "slug": "API/HTMLSourceElement",
            "summary": "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating source elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSourceElement"
        }
    ],
    "htmlspanelement": [
        {
            "slug": "API/HTMLSpanElement",
            "summary": "The HTMLSpanElement interface represents a span element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLSpanElement"
        }
    ],
    "htmlstyleelement": [
        {
            "slug": "API/HTMLStyleElement",
            "summary": "The HTMLStyleElement interface represents a style element. It inherits properties and methods from its parent, HTMLElement, and from LinkStyle.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLStyleElement"
        }
    ],
    "htmltablecaptionelement": [
        {
            "slug": "API/HTMLTableCaptionElement",
            "summary": "The HTMLTableCaptionElement interface special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableCaptionElement"
        }
    ],
    "htmltablecellelement": [
        {
            "slug": "API/HTMLTableCellElement",
            "summary": "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header or data cells, in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableCellElement"
        }
    ],
    "htmltablecolelement": [
        {
            "slug": "API/HTMLTableColElement",
            "summary": "The HTMLTableColElement interface provides special properties (beyond the HTMLElement interface it also has available to it inheritance) for manipulating single or grouped table column elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableColElement"
        }
    ],
    "htmltableelement": [
        {
            "slug": "API/HTMLTableElement",
            "summary": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableElement"
        }
    ],
    "htmltablerowelement": [
        {
            "slug": "API/HTMLTableRowElement",
            "summary": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableRowElement"
        }
    ],
    "htmltablesectionelement": [
        {
            "slug": "API/HTMLTableSectionElement",
            "summary": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTableSectionElement"
        }
    ],
    "htmltemplateelement": [
        {
            "slug": "API/HTMLTemplateElement",
            "summary": "The HTMLTemplateElement interface enables access to the contents of an HTML template element.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTemplateElement"
        }
    ],
    "htmltextareaelement": [
        {
            "slug": "API/HTMLTextAreaElement",
            "summary": "The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of textarea elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "HTMLTextAreaElement"
        }
    ],
    "htmltimeelement": [
        {
            "slug": "API/HTMLTimeElement",
            "summary": "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating time elements.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "62"
                }
            },
            "title": "HTMLTimeElement"
        }
    ],
    "htmltitleelement": [
        {
            "slug": "API/HTMLTitleElement",
            "summary": "The HTMLTitleElement interface contains the title for a document. This element inherits all of the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTitleElement"
        }
    ],
    "htmltrackelement": [
        {
            "slug": "API/HTMLTrackElement",
            "summary": "The HTMLTrackElement",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "Prior to Firefox 50, text tracks would only load if the <track> element is in a document.",
                        "version_added": "31"
                    },
                    {
                        "flags": [
                            {
                                "name": "media.webvtt.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "24",
                        "version_removed": "30"
                    }
                ],
                "firefox_android": [
                    {
                        "notes": "Prior to Firefox 50, text tracks would only load if the <track> element is in a document.",
                        "version_added": "31"
                    },
                    {
                        "flags": [
                            {
                                "name": "media.webvtt.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "24",
                        "version_removed": "30"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLTrackElement"
        }
    ],
    "htmlulistelement": [
        {
            "slug": "API/HTMLUListElement",
            "summary": "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLUListElement"
        }
    ],
    "htmlunknownelement": [
        {
            "slug": "API/HTMLUnknownElement",
            "summary": "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLUnknownElement"
        }
    ],
    "htmlvideoelement": [
        {
            "slug": "API/HTMLVideoElement",
            "summary": "The HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLVideoElement"
        }
    ],
    "image-button-state-(type=image)": [
        {
            "slug": "HTML/Element/input/image",
            "summary": "input elements of type image are used to create graphical submit buttons, i.e. submit buttons that take the form of an image rather than text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"image\">"
        }
    ],
    "imagebitmap": [
        {
            "slug": "API/ImageBitmap",
            "summary": "The ImageBitmap interface represents a bitmap image which can be drawn to a canvas without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": {
                    "version_added": "50"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": {
                    "version_added": "42"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "50"
                }
            },
            "title": "ImageBitmap"
        }
    ],
    "imagedata": [
        {
            "slug": "API/ImageData",
            "summary": "The ImageData interface represents the underlying pixel data of an area of a canvas element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ImageData"
        }
    ],
    "imagesmoothingquality": [
        {
            "slug": "API/CanvasRenderingContext2D/imageSmoothingQuality",
            "summary": "The imageSmoothingQuality property of the CanvasRenderingContext2D interface, part of the Canvas API, lets you set the quality of image smoothing.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "CanvasRenderingContext2D.imageSmoothingQuality"
        }
    ],
    "input-modalities:-the-inputmode-attribute": [
        {
            "slug": "HTML/Global_attributes/inputmode",
            "summary": "The inputmode global attribute is an enumerated attribute that provides a hint as to the type of data that might be entered by the user while editing the element or its contents.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "inputmode"
        }
    ],
    "ix-handler-ondrag": [
        {
            "slug": "API/GlobalEventHandlers/ondrag",
            "summary": "A global event handler for the drag event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondrag"
        }
    ],
    "ix-handler-ondragend": [
        {
            "slug": "API/GlobalEventHandlers/ondragend",
            "summary": "A global event handler for the dragend event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondragend"
        }
    ],
    "ix-handler-ondragenter": [
        {
            "slug": "API/GlobalEventHandlers/ondragenter",
            "summary": "A global event handler for the dragenter event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondragenter"
        }
    ],
    "ix-handler-ondragexit": [
        {
            "slug": "API/GlobalEventHandlers/ondragexit",
            "summary": "The GlobalEventHandler.ondragexit property is an event handler for the dragexit event.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondragexit"
        }
    ],
    "ix-handler-ondragleave": [
        {
            "slug": "API/GlobalEventHandlers/ondragleave",
            "summary": "A global event handler for the dragleave event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondragleave"
        }
    ],
    "ix-handler-ondragover": [
        {
            "slug": "API/GlobalEventHandlers/ondragover",
            "summary": "A global event handler for the dragover event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondragover"
        }
    ],
    "ix-handler-ondragstart": [
        {
            "slug": "API/GlobalEventHandlers/ondragstart",
            "summary": "A global event handler for the dragstart event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondragstart"
        }
    ],
    "ix-handler-ondrop": [
        {
            "slug": "API/GlobalEventHandlers/ondrop",
            "summary": "A global event handler for the drop event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "GlobalEventHandlers.ondrop"
        }
    ],
    "ix-handler-oninput": [
        {
            "slug": "API/GlobalEventHandlers/oninput",
            "summary": "The oninput property of the GlobalEventHandlers mixin is an EventHandler that processes input events on the input, select, and textarea elements. It also handles these events on elements where contenteditable or designMode are turned on.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "GlobalEventHandlers.oninput"
        }
    ],
    "linkTypes": [
        {
            "slug": "HTML/Link_types",
            "summary": "In HTML, link types indicate the relationship between two documents, in which one links to the other using an a, area, or link element.",
            "support": {},
            "title": "Link types"
        }
    ],
    "local-date-and-time-state-(type=datetime-local)": [
        {
            "slug": "HTML/Element/input/datetime-local",
            "summary": "input elements of type datetime-local create input controls that let the user easily enter both a date and a time, including the year, month, and day as well as the time in hours and minutes.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a> and <a href='https://wiki.mozilla.org/TPE_DOM/Date_time_input_types'>TPE DOM/Date time input types</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "notes": "The input type is recognized, but there is no date-specific control.",
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"datetime-local\">"
        }
    ],
    "making-entire-documents-editable:-the-designmode-idl-attribute": [
        {
            "slug": "API/Document/designMode",
            "summary": "document.designMode controls whether the entire document is editable. Valid values are \"on\" and \"off\". According to the specification, this property is meant to default to \"off\". Firefox follows this standard. The earlier versions of Chrome and IE default to \"inherit\". Starting in Chrome 43, the default is \"off\" and \"inherit\" is no longer supported. In IE6-10, the value is capitalized.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.designMode"
        }
    ],
    "media-elements": [
        {
            "slug": "API/HTMLMediaElement/buffered",
            "summary": "The HTMLMediaElement.buffered read-only property returns a new TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLMediaElement.buffered"
        }
    ],
    "mediaerror": [
        {
            "slug": "API/MediaError",
            "summary": "The MediaError interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as audio or video.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MediaError"
        }
    ],
    "message-channels": [
        {
            "slug": "API/MessageChannel",
            "summary": "The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": {
                    "version_added": "41"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": "MessageChannel"
        }
    ],
    "message-ports": [
        {
            "slug": "API/MessagePort",
            "summary": "The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MessagePort"
        }
    ],
    "messageevent": [
        {
            "slug": "API/MessageEvent",
            "summary": "The MessageEvent interface represents a message received by a target object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "MessageEvent"
        }
    ],
    "mimetype": [
        {
            "slug": "API/MimeType",
            "summary": "The MimeType interface provides contains information about a MIME type associated with a particular plugin. NavigatorPlugins.mimeTypes returns an array of this object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MimeType"
        }
    ],
    "mimetypearray": [
        {
            "slug": "API/MimeTypeArray",
            "summary": "The MimeTypeArray interface returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by NavigatorPlugins.mimeTypes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MimeTypeArray"
        }
    ],
    "month-state-(type=month)": [
        {
            "slug": "HTML/Element/input/month",
            "summary": "input elements of type month create input fields that let the user enter a month and year allowing a month and year to be easily entered. The value is a string whose value is in the format \"YYYY-MM\", where YYYY is the four-digit year and MM is the month number.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "The input type is recognized, but there is no month-specific control.",
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"month\">"
        }
    ],
    "names:-the-itemprop-attribute": [
        {
            "slug": "HTML/Global_attributes/itemprop",
            "summary": "The itemprop global attribute is used to add properties to an item. Every HTML element can have an itemprop attribute specified, and an itemprop consists of a name-value pair. Each name-value pair is called a property, and a group of one or more properties forms an item. Property values are either a string or a URL and can be associated with a very wide range of elements including audio, embed, iframe, img, link, object, source , track, and video.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "itemprop"
        }
    ],
    "navigatorconcurrenthardware": [
        {
            "slug": "API/NavigatorConcurrentHardware",
            "summary": "The NavigatorConcurrentHardware mixin adds to the Navigator interface features which allow Web content to determine how many logical processors the user has available, in order to let content and Web apps optimize their operations to best take advantage of the user's CPU.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "37"
                }
            },
            "title": "NavigatorConcurrentHardware"
        }
    ],
    "navigatorid": [
        {
            "slug": "API/NavigatorID",
            "summary": "The NavigatorID interface contains methods and properties related to the identity of the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorID"
        }
    ],
    "navigatorlanguage": [
        {
            "slug": "API/NavigatorLanguage",
            "summary": "NavigatorLanguage contains methods and properties related to the language of the navigator.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorLanguage"
        }
    ],
    "navigatoronline": [
        {
            "slug": "API/NavigatorOnLine",
            "summary": "The NavigatorOnLine interface contains methods and properties related to the connectivity status of the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorOnLine"
        }
    ],
    "navigatorplugins": [
        {
            "slug": "API/NavigatorPlugins",
            "summary": "The NavigatorPlugins mixin adds to the Navigator interface methods and properties for discovering and interacting with plugins installed into the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NavigatorPlugins"
        }
    ],
    "number-state-(type=number)": [
        {
            "slug": "HTML/Element/input/number",
            "summary": "input elements of type number are used to let the user enter a number. They include built-in validation to reject non-numerical entries.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"number\">"
        }
    ],
    "password-state-(type=password)": [
        {
            "slug": "HTML/Element/input/password",
            "summary": "input elements of type password provide a way for the user to securely enter a password.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "2"
                },
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "<input type=\"password\">"
        }
    ],
    "pluginarray": [
        {
            "slug": "API/PluginArray",
            "summary": "The PluginArray interface is used to store a list of Plugin objects describing the available plugins; it's returned by the window.navigator.plugins property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\"name\") methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PluginArray"
        }
    ],
    "printing": [
        {
            "slug": "API/Window/print",
            "summary": "Opens the Print Dialog to print the current document.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 46.0 this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>.",
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.print()"
        }
    ],
    "promiserejectionevent": [
        {
            "slug": "API/PromiseRejectionEvent",
            "summary": "The PromiseRejectionEvent interface represents events which are fired when JavaScript Promises are rejected. These events are particularly useful for telemetry and debugging purposes.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "PromiseRejectionEvent"
        }
    ],
    "pseudo-classes": [
        {
            "slug": "CSS/Pseudo-classes",
            "summary": "A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s).",
            "support": {},
            "title": "Pseudo-classes"
        }
    ],
    "radio-button-state-(type=radio)": [
        {
            "slug": "HTML/Element/input/radio",
            "summary": "input elements of type radio are generally used in radio groups\u2014collections of radio buttons describing a set of related options.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"radio\">"
        }
    ],
    "radionodelist": [
        {
            "slug": "API/RadioNodeList",
            "summary": "The RadioNodeList interface represents a collection of radio elements in a form or a fieldset element.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "RadioNodeList"
        }
    ],
    "range-state-(type=range)": [
        {
            "slug": "HTML/Element/input/range",
            "summary": "input elements of type range let the user specify a numeric value which must be no less than a given value, and no more than another given value. The precise value, however, is not considered important. This is typically represented using a slider or dial control rather than a text entry box like the number input type.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "57"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "notes": "Android WebView recognizes the <code>range</code> type, but doesn't implement a range-specific control.",
                        "partial_implementation": true,
                        "version_added": "2",
                        "version_removed": "4.4"
                    }
                ]
            },
            "title": "<input type=\"range\">"
        }
    ],
    "relaxing-the-same-origin-restriction": [
        {
            "slug": "API/Document/domain",
            "summary": "The domain property of the Document interface gets/sets the domain portion of the origin of the current document, as used by the same origin policy.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "From Firefox 62, if the domain cannot be identified, <code>domain</code> returns an empty string instead of <code>null</code>. See <a href='https://bugzil.la/819475'>bug 819475</a>.",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "From Firefox 62, if the domain cannot be identified, <code>domain</code> returns an empty string instead of <code>null</code>. See <a href='https://bugzil.la/819475'>bug 819475</a>.",
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.domain"
        }
    ],
    "renderingcontext": [
        {
            "slug": "API/RenderingContext",
            "summary": "RenderingContext is a WebIDL typedef which can refer to any one of the interfaces that represent a graphics rendering context within a canvas element: CanvasRenderingContext2D, WebGLRenderingContext, or WebGL2RenderingContext.",
            "support": {},
            "title": "RenderingContext"
        }
    ],
    "reset-button-state-(type=reset)": [
        {
            "slug": "HTML/Element/input/reset",
            "summary": "input elements of type \"reset\"  are rendered as buttons, with a default click event handler that resets all of the inputs in the form to their initial values.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code>&ltbutton&gt</code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code>&ltbutton&gt</code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"reset\">"
        }
    ],
    "selector-active": [
        {
            "slug": "CSS/:active",
            "summary": "The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": ":active"
        }
    ],
    "selector-checked": [
        {
            "slug": "CSS/:checked",
            "summary": "The :checked CSS pseudo-class selector represents any radio (input type=\"radio\"), checkbox (input type=\"checkbox\"), or option (option in a select) element that is checked or toggled to an on state.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9.5"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "2"
                }
            },
            "title": ":checked"
        }
    ],
    "selector-default": [
        {
            "slug": "CSS/:default",
            "summary": "The :default CSS pseudo-class represents any form element that is the default among a group of related elements.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":default"
        }
    ],
    "selector-defined": [
        {
            "slug": "CSS/:defined",
            "summary": "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": ":defined"
        }
    ],
    "selector-disabled": [
        {
            "slug": "CSS/:disabled",
            "summary": "The :disabled CSS pseudo-class represents any disabled element. An element is disabled if it can't be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has an enabled state, in which it can be activated or accept focus.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "notes": "Internet Explorer does not recognize <code>:disabled</code> on the <a href='https://developer.mozilla.org/docs/Web/HTML/Element/fieldset'><code>&lt;fieldset&gt;</code></a> element.",
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9.5"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "2"
                }
            },
            "title": ":disabled"
        }
    ],
    "selector-enabled": [
        {
            "slug": "CSS/:enabled",
            "summary": "The :enabled CSS pseudo-class represents any enabled element. An element is enabled if it can be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has a disabled state, in which it can't be activated or accept focus.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9.5"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "2"
                }
            },
            "title": ":enabled"
        }
    ],
    "selector-focus": [
        {
            "slug": "CSS/:focus",
            "summary": "The :focus CSS pseudo-class represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's \"tab\" key.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": ":focus"
        }
    ],
    "selector-hover": [
        {
            "slug": "CSS/:hover",
            "summary": "The :hover CSS pseudo-class matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "4"
                },
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "notes": "As of Safari for iOS 7.1.2, tapping a <a href='https://developer.mozilla.org/docs/Web/Events/click#Safari_Mobile'>clickable element</a> causes the element to enter the <code>:hover</code> state. The element will remain in the <code>:hover</code> state until a different element has entered the <code>:hover</code> state.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":hover"
        }
    ],
    "selector-in-range": [
        {
            "slug": "CSS/:in-range",
            "summary": "The :in-range CSS pseudo-class represents an input element whose current value is within the range limits specified by the min and max attributes.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Chrome 52, it was changed to only match enabled read-write inputs.",
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 50, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://bugzil.la/1264157'>bug 1264157</a>). In Firefox 50, it was changed to only match enabled read-write inputs.",
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "notes": "Before Opera 39, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Opera 39, it was changed to only match enabled read-write inputs.",
                    "version_added": "11"
                },
                "opera_android": {
                    "notes": "Before Opera 39, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Opera 39, it was changed to only match enabled read-write inputs.",
                    "version_added": true
                },
                "safari": {
                    "notes": "In Safari, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://bugs.webkit.org/show_bug.cgi?id=156530'>bug 156530</a>). It was later changed to only match enabled read-write inputs.",
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "In Safari, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://bugs.webkit.org/show_bug.cgi?id=156530'>bug 156530</a>). It was later changed to only match enabled read-write inputs.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "notes": "Before version 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In version 52, it was changed to only match enabled read-write inputs.",
                    "version_added": "2.3"
                }
            },
            "title": ":in-range"
        }
    ],
    "selector-indeterminate": [
        {
            "slug": "CSS/:indeterminate",
            "summary": "The :indeterminate CSS pseudo-class represents any form element whose state is indeterminate.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":indeterminate"
        }
    ],
    "selector-invalid": [
        {
            "slug": "CSS/:invalid",
            "summary": "The :invalid CSS pseudo-class represents any input or other form element whose contents fail to validate.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":invalid"
        }
    ],
    "selector-link": [
        {
            "slug": "CSS/:link",
            "summary": "The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited a, area, or link element that has an href attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "3"
                },
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "1.5"
                }
            },
            "title": ":link"
        }
    ],
    "selector-ltr": [
        {
            "slug": "CSS/:dir",
            "summary": "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "49"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "17",
                        "version_removed": "53"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "49"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "17",
                        "version_removed": "53"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": ":dir()"
        }
    ],
    "selector-optional": [
        {
            "slug": "CSS/:optional",
            "summary": "The :optional CSS pseudo-class represents any input, select, or textarea element that does not have the required attribute set on it.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":optional"
        }
    ],
    "selector-out-of-range": [
        {
            "slug": "CSS/:out-of-range",
            "summary": "The :out-of-range CSS pseudo-class represents an input element whose current value is outside the range limits specified by the min and max attributes.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "2.3"
                }
            },
            "title": ":out-of-range"
        }
    ],
    "selector-read-only": [
        {
            "slug": "CSS/:read-only",
            "summary": "The :read-only CSS pseudo-class represents an element (such as a locked text input) that is not editable by the user.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "See <a href='https://bugzil.la/312971'>bug 312971</a> for unprefixed status.",
                    "prefix": "-moz-",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "See <a href='https://bugzil.la/312971'>bug 312971</a> for unprefixed status.",
                    "prefix": "-moz-",
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":read-only"
        }
    ],
    "selector-read-write": [
        {
            "slug": "CSS/:read-write",
            "summary": "The :read-write CSS pseudo-class represents an element (such as a text input) that is editable by the user.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "See <a href='https://bugzil.la/312971'>bug 312971</a> for unprefixed status.",
                    "prefix": "-moz-",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "See <a href='https://bugzil.la/312971'>bug 312971</a> for unprefixed status.",
                    "prefix": "-moz-",
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":read-write"
        }
    ],
    "selector-required": [
        {
            "slug": "CSS/:required",
            "summary": "The :required CSS pseudo-class represents any input, select, or textarea element that has the required attribute set on it.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4.3"
                }
            },
            "title": ":required"
        }
    ],
    "selector-target": [
        {
            "slug": "CSS/:target",
            "summary": "The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "9.5"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "2"
                }
            },
            "title": ":target"
        }
    ],
    "selector-valid": [
        {
            "slug": "CSS/:valid",
            "summary": "The :valid CSS pseudo-class represents any input or other form element whose contents validate successfully. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": ":valid"
        }
    ],
    "selector-visited": [
        {
            "slug": "CSS/:visited",
            "summary": "The :visited CSS pseudo-class represents links that the user has already visited. For privacy reasons, the styles that can be modified using this selector are very limited.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "4.4"
                }
            },
            "title": ":visited"
        }
    ],
    "server-sent-events": [
        {
            "slug": "API/Server-sent_events",
            "summary": "Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as Events + data inside the web page.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Server-sent events"
        }
    ],
    "sharedworker": [
        {
            "slug": "API/SharedWorker",
            "summary": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5",
                    "version_removed": "6.1"
                },
                "safari_ios": {
                    "version_added": "5.1",
                    "version_removed": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "SharedWorker"
        }
    ],
    "sharedworkerglobalscope": [
        {
            "slug": "API/SharedWorkerGlobalScope",
            "summary": "The SharedWorkerGlobalScope object (the SharedWorker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "SharedWorkerGlobalScope"
        }
    ],
    "spelling-and-grammar-checking": [
        {
            "slug": "HTML/Global_attributes/spellcheck",
            "summary": "The spellcheck global attribute is an enumerated attribute defines whether the element may be checked for spelling errors.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": {
                    "version_added": "47"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": {
                    "version_added": "47"
                }
            },
            "title": "spellcheck"
        }
    ],
    "submit-button-state-(type=submit)": [
        {
            "slug": "HTML/Element/input/submit",
            "summary": "input elements of type submit are rendered as buttons. When the click event occurs (typically because the user clicked the button), the user agent attempts to submit the form to the server.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code><button></code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "notes": "Unlike other browsers, Firefox by default <a href='http://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code><button></code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"submit\">"
        }
    ],
    "tel-state-(type=tel)": [
        {
            "slug": "HTML/Element/input/tel",
            "summary": "input elements of type tel are used to let the user enter and edit a telephone number. Unlike input type=\"email\" and input type=\"url\" , the input value is not automatically validated to a particular format before the form can be submitted, because formats for telephone numbers vary so much around the world.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"tel\">"
        }
    ],
    "text-(type=text)-state-and-search-state-(type=search)": [
        {
            "slug": "HTML/Element/input/search",
            "summary": "input elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent. ",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"search\">"
        },
        {
            "slug": "HTML/Element/input/text",
            "summary": "input elements of type text create basic single-line text fields.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"text\">"
        }
    ],
    "textmetrics": [
        {
            "slug": "API/TextMetrics",
            "summary": "The TextMetrics interface represents the dimensions of a piece of text in the canvas, as created by the CanvasRenderingContext2D.measureText() method.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "TextMetrics"
        }
    ],
    "texttrackcue": [
        {
            "slug": "API/TextTrackCue",
            "summary": "TextTrackCues represent a string of text that will be displayed for some duration of time on a TextTrack. This includes the start and end times that the cue will be displayed. A TextTrackCue cannot be used directly, instead one of the derived types (e.g. VTTCue) must be used.",
            "support": {},
            "title": "TextTrackCue"
        }
    ],
    "the-a-element": [
        {
            "slug": "HTML/Element/a",
            "summary": "The HTML a element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting with Firefox 41, &lt;a&gt; without <code>href</code> attribute is no longer classified as interactive content: clicking it inside &lt;label&gt; will activate labelled content (<a href='https://bugzil.la/1167816'>bug 1167816</a>).",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "Starting with Firefox 41, &lt;a&gt; without <code>href</code> attribute is no longer classified as interactive content: clicking it inside &lt;label&gt; will activate labelled content (<a href='https://bugzil.la/1167816'>bug 1167816</a>).",
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<a>: The Anchor element"
        }
    ],
    "the-abbr-element": [
        {
            "slug": "HTML/Element/abbr",
            "summary": "The HTML Abbreviation element (abbr) represents an abbreviation or acronym; the optional title attribute can provide an expansion or description for the abbreviation.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "7"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<abbr>: The Abbreviation element"
        }
    ],
    "the-accesskey-attribute": [
        {
            "slug": "HTML/Global_attributes/accesskey",
            "summary": "The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element. The attribute value must consist of a single printable character (which includes accented and other characters that can be generated by the keyboard).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "accesskey"
        }
    ],
    "the-address-element": [
        {
            "slug": "HTML/Element/address",
            "summary": "The HTML address element indicates that the enclosed HTML provides contact information for a person or people, or for an organization.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<address>: The Contact Address element"
        }
    ],
    "the-area-element": [
        {
            "slug": "HTML/Element/area",
            "summary": "The HTML area element defines a hot-spot region on an image, and optionally associates it with a hypertext link. This element is used only within a map element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<area>"
        }
    ],
    "the-article-element": [
        {
            "slug": "HTML/Element/article",
            "summary": "The HTML article element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<article>: The Article Contents element"
        }
    ],
    "the-aside-element": [
        {
            "slug": "HTML/Element/aside",
            "summary": "The HTML aside element represents a portion of a document whose content is only indirectly related to the document's main content.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<aside>: The Aside element"
        }
    ],
    "the-audio-element": [
        {
            "slug": "HTML/Element/audio",
            "summary": "The HTML audio element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the source element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "For Firefox to play audio, the server must serve the file using the correct MIME type.",
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "notes": "For Firefox to play audio, the server must serve the file using the correct MIME type.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "<audio>: The Embed Audio element"
        }
    ],
    "the-b-element": [
        {
            "slug": "HTML/Element/b",
            "summary": "The HTML Bring Attention To element (b)  is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<b>: The Bring Attention To element"
        }
    ],
    "the-base-element": [
        {
            "slug": "HTML/Element/base",
            "summary": "The HTML base element specifies the base URL to use for all relative URLs contained within a document. There can be only one base element in a document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "notes": "Before Internet Explorer 7, <code>&lt;base&gt;</code> can be positioned anywhere in the document and the nearest value of <code>&lt;base&gt;</code> is used.",
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<base>: The Document Base URL element"
        }
    ],
    "the-bdi-element": [
        {
            "slug": "HTML/Element/bdi",
            "summary": "The HTML Bidirectional Isolate element (bdi)  tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "<bdi>: The Bidirectional Isolate element"
        }
    ],
    "the-bdo-element": [
        {
            "slug": "HTML/Element/bdo",
            "summary": "The HTML Bidirectional Text Override element (bdo) overrides the current directionality of text, so that the text within is rendered in a different direction.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<bdo>: The Bidirectional Text Override element"
        }
    ],
    "the-blockquote-element": [
        {
            "slug": "HTML/Element/blockquote",
            "summary": "The HTML blockquote Element (or HTML Block Quotation Element) indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the cite element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<blockquote>: The Block Quotation element"
        }
    ],
    "the-body-element": [
        {
            "slug": "HTML/Element/body",
            "summary": "The HTML body Element represents the content of an HTML document. There can be only one body element in a document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<body>: The Document Body element"
        }
    ],
    "the-br-element": [
        {
            "slug": "HTML/Element/br",
            "summary": "The HTML br element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<br>: The Line Break element"
        }
    ],
    "the-button-element": [
        {
            "slug": "HTML/Element/button",
            "summary": "The HTML button element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<button>: The Button element"
        }
    ],
    "the-canvas-element": [
        {
            "slug": "HTML/Element/canvas",
            "summary": "Use the HTML canvas element with either the canvas scripting API or the WebGL API to draw graphics and animations.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "Before Firefox 5, the canvas width and height were signed integers instead of unsigned integers.",
                        "Prior to Firefox 6, a &lt;canvas&gt; element with a zero width or height would be rendered as if it had default dimensions.",
                        "Before Firefox 12, if JavaScript is disabled, the &lt;canvas&gt; element was being rendered instead of showing the fallback content as per the specification. Since then, the fallback content is rendered instead."
                    ],
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "notes": [
                        "Before Firefox 5, the canvas width and height were signed integers instead of unsigned integers.",
                        "Prior to Firefox 6, a &lt;canvas&gt; element with a zero width or height would be rendered as if it had default dimensions.",
                        "Before Firefox 12, if JavaScript is disabled, the &lt;canvas&gt; element was being rendered instead of showing the fallback content as per the specification. Since then, the fallback content is rendered instead."
                    ],
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "notes": "Although early versions of Apple's Safari browser don't require the closing tag, the specification indicates that it is required, so you should be sure to include it for broadest compatibility. Versions of Safari prior to version 2 will render the content of the fallback in addition to the canvas itself unless you use CSS tricks to mask it.",
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "<canvas>: The Graphics Canvas element"
        }
    ],
    "the-caption-element": [
        {
            "slug": "HTML/Element/caption",
            "summary": "The HTML Table Caption element (caption) specifies the caption (or title) of a table, and if used is always the first child of a table.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<caption>: The Table Caption element"
        }
    ],
    "the-cite-element": [
        {
            "slug": "HTML/Element/cite",
            "summary": "The HTML Citation element (cite) is used to describe a reference to a cited creative work, and must include either the title or author or the URL of that work.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<cite>: The Citation element"
        }
    ],
    "the-code-element": [
        {
            "slug": "HTML/Element/code",
            "summary": "The HTML code element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<code>: The Inline Code element"
        }
    ],
    "the-col-element": [
        {
            "slug": "HTML/Element/col",
            "summary": "The HTML col element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a colgroup element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<col>"
        }
    ],
    "the-colgroup-element": [
        {
            "slug": "HTML/Element/colgroup",
            "summary": "The HTML colgroup element defines a group of columns within a table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<colgroup>"
        }
    ],
    "the-constraint-validation-api": [
        {
            "slug": "API/ValidityState",
            "summary": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ValidityState"
        }
    ],
    "the-data-element": [
        {
            "slug": "HTML/Element/data",
            "summary": "The HTML data element links a given content with a machine-readable translation. If the content is time- or date-related, the time element must be used.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "49"
                },
                "opera_android": {
                    "version_added": "49"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "62"
                }
            },
            "title": "<data>"
        }
    ],
    "the-datalist-element": [
        {
            "slug": "HTML/Element/datalist",
            "summary": "The HTML datalist element contains a set of option elements that represent the values available for other controls.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "<datalist>"
        }
    ],
    "the-datatransferitemlist-interface": [
        {
            "slug": "API/DataTransferItemList/DataTransferItem",
            "summary": "The DataTransferItem() getter method implements support for accessing items in the DataTransferItemList using array-style syntax (that is DataTransferItem[index]).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DataTransferItemList.DataTransferItem()"
        }
    ],
    "the-dd-element": [
        {
            "slug": "HTML/Element/dd",
            "summary": "The HTML dd element provides the details about or the definition of the preceding term (dt) in a description list (dl).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 4, this element was implemented using the <code>HTMLSpanElement</code> interface instead of <code>HTMLElement</code>.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<dd>: The Description Details element"
        }
    ],
    "the-del-element": [
        {
            "slug": "HTML/Element/del",
            "summary": "The HTML del element represents a range of text that has been deleted from a document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<del>: The Deleted Text element"
        }
    ],
    "the-details-element": [
        {
            "slug": "HTML/Element/details",
            "summary": "The HTML Details Element (details) creates a disclosure widget in which information is visible only when the widget is toggled into an \"open\" state.",
            "support": {
                "chrome": {
                    "version_added": "12"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/detailssummary?q=details'>Under consideration</a>.",
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "notes": "Before Firefox 57, there was a bug meaning that <code>&lt;details&gt;</code> elements can't be made open by default using the <code>open</code> attribute if they have a CSS <code>animation</code> active on them.",
                    "version_added": "49"
                },
                "firefox_android": {
                    "notes": "There is a bug meaning that <code>&lt;details&gt;</code> elements can't be made open by default using the <code>open</code> attribute if they have a CSS <code>animation</code> active on them.",
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<details>: The Details disclosure element"
        }
    ],
    "the-dfn-element": [
        {
            "slug": "HTML/Element/dfn",
            "summary": "The HTML Definition element (dfn) is used to indicate the term being defined within the context of a definition phrase or sentence.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<dfn>: The Definition element"
        }
    ],
    "the-dialog-element": [
        {
            "slug": "HTML/Element/dialog",
            "summary": "The HTML dialog element represents a dialog box or other interactive component, such as an inspector or window.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": "37"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.dialog_element.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "See <a href='https://bugzil.la/840640'>bug 840640</a>.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "37"
                }
            },
            "title": "<dialog>: The Dialog element"
        }
    ],
    "the-dir-attribute": [
        {
            "slug": "HTML/Global_attributes/dir",
            "summary": "The dir global attribute is an enumerated attribute indicates the directionality of the element's text.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "dir"
        }
    ],
    "the-div-element": [
        {
            "slug": "HTML/Element/div",
            "summary": "The HTML Content Division element (div) is the generic container for flow content. It has no effect on the content or layout until styled using CSS.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<div>: The Content Division element"
        }
    ],
    "the-dl-element": [
        {
            "slug": "HTML/Element/dl",
            "summary": "The HTML dl element represents a description list. The element encloses a list of groups of terms (specified using the dt element) and descriptions (provided by dd elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<dl>: The Description List element"
        }
    ],
    "the-document-object": [
        {
            "slug": "API/Document",
            "summary": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document"
        }
    ],
    "the-domstringlist-interface": [
        {
            "slug": "API/DOMStringList",
            "summary": "A type returned by some APIs which contains a list of DOMString (strings).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMStringList"
        }
    ],
    "the-dragevent-interface": [
        {
            "slug": "API/DragEvent/DragEvent",
            "summary": "This constructor is used to create a synthetic DragEvent object.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "DragEvent()"
        }
    ],
    "the-draggable-attribute": [
        {
            "slug": "HTML/Global_attributes/draggable",
            "summary": "The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, using the HTML Drag and Drop API.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "draggable"
        }
    ],
    "the-dt-element": [
        {
            "slug": "HTML/Element/dt",
            "summary": "The HTML dt element specifies a term in a description or definition list, and as such must be used inside a dl element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<dt>: The Description Term element"
        }
    ],
    "the-em-element": [
        {
            "slug": "HTML/Element/em",
            "summary": "The HTML em element marks text that has stress emphasis. The em element can be nested, with each level of nesting indicating a greater degree of emphasis.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<em>: The Emphasis element"
        }
    ],
    "the-embed-element": [
        {
            "slug": "HTML/Element/embed",
            "summary": "The HTML embed element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "<embed>: The Embed External Content element"
        }
    ],
    "the-errorevent-interface": [
        {
            "slug": "API/ErrorEvent",
            "summary": "The ErrorEvent interface represents events providing information related to errors in scripts or in files.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ErrorEvent"
        }
    ],
    "the-eventsource-interface": [
        {
            "slug": "API/EventSource",
            "summary": "The EventSource interface is web content's interface to server-sent events. An EventSource instance opens a persistent connection to an HTTP server, which sends events in text/event-stream format.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "EventSource"
        }
    ],
    "the-fieldset-element": [
        {
            "slug": "HTML/Element/fieldset",
            "summary": "The HTML fieldset element is used to group several controls as well as labels (label) within a web form.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<fieldset>: The Field Set element"
        }
    ],
    "the-figcaption-element": [
        {
            "slug": "HTML/Element/figcaption",
            "summary": "The HTML figcaption element represents a caption or legend for the rest of the contents its parent figure element, if any.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<figcaption>"
        }
    ],
    "the-figure-element": [
        {
            "slug": "HTML/Element/figure",
            "summary": "The HTML figure element represents self-contained content, frequently with a caption (figcaption), and is typically referenced as a single unit.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<figure>"
        }
    ],
    "the-footer-element": [
        {
            "slug": "HTML/Element/footer",
            "summary": "The HTML footer element represents a footer for its nearest sectioning content or sectioning root element. A footer typically contains information about the author of the section, copyright data or links to related documents.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<footer>"
        }
    ],
    "the-form-element": [
        {
            "slug": "HTML/Element/form",
            "summary": "The HTML form element represents a document section that contains interactive controls for submitting information to a web server.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<form>"
        }
    ],
    "the-h1,-h2,-h3,-h4,-h5,-and-h6-elements": [
        {
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML h1\u2013h6 elements represent six levels of section headings. h1 is the highest section level and h6 is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<h1>\u2013<h6>: The HTML Section Heading elements"
        },
        {
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML h1\u2013h6 elements represent six levels of section headings. h1 is the highest section level and h6 is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<h1>\u2013<h6>: The HTML Section Heading elements"
        },
        {
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML h1\u2013h6 elements represent six levels of section headings. h1 is the highest section level and h6 is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<h1>\u2013<h6>: The HTML Section Heading elements"
        },
        {
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML h1\u2013h6 elements represent six levels of section headings. h1 is the highest section level and h6 is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<h1>\u2013<h6>: The HTML Section Heading elements"
        },
        {
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML h1\u2013h6 elements represent six levels of section headings. h1 is the highest section level and h6 is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<h1>\u2013<h6>: The HTML Section Heading elements"
        },
        {
            "slug": "HTML/Element/Heading_Elements",
            "summary": "The HTML h1\u2013h6 elements represent six levels of section headings. h1 is the highest section level and h6 is the lowest.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<h1>\u2013<h6>: The HTML Section Heading elements"
        }
    ],
    "the-head-element": [
        {
            "slug": "HTML/Element/head",
            "summary": "The HTML head element provides general information (metadata) about the document, including its title and links to its scripts and style sheets.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<head>: The Document Metadata (Header) element"
        }
    ],
    "the-header-element": [
        {
            "slug": "HTML/Element/header",
            "summary": "The HTML header element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also other elements like a logo, a search form, an author name, and so on.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<header>"
        }
    ],
    "the-hgroup-element": [
        {
            "slug": "HTML/Element/hgroup",
            "summary": "The HTML hgroup element represents a multi-level heading for a section of a document. It groups a set of h1\u2013h6 elements.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "2.2"
                }
            },
            "title": "<hgroup>"
        }
    ],
    "the-hidden-attribute": [
        {
            "slug": "HTML/Global_attributes/hidden",
            "summary": "The hidden global attribute is a Boolean attribute indicating that the element is not yet, or is no longer, relevant. For example, it can be used to hide elements of the page that can't be used until the login process has been completed.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "hidden"
        }
    ],
    "the-history-interface": [
        {
            "slug": "API/History",
            "summary": "The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "History"
        },
        {
            "slug": "API/Window/history",
            "summary": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.history"
        }
    ],
    "the-hr-element": [
        {
            "slug": "HTML/Element/hr",
            "summary": "The HTML hr element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic with a section.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<hr>: The Thematic Break (Horizontal Rule) element"
        }
    ],
    "the-html-element": [
        {
            "slug": "HTML/Element/html",
            "summary": "The HTML html element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<html>: The HTML Document / Root element"
        }
    ],
    "the-i-element": [
        {
            "slug": "HTML/Element/i",
            "summary": "The HTML i element represents a range of text that is set off from the normal text for some reason. Some examples include technical terms, foreign language phrases, or fictional character thoughts. It is typically displayed in italic type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<i>"
        }
    ],
    "the-id-attribute": [
        {
            "slug": "HTML/Global_attributes/id",
            "summary": "The id global attribute defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "32"
                    },
                    {
                        "notes": "<code>id</code> is a true global attribute only since Firefox 32.",
                        "partial_implementation": true,
                        "version_added": true,
                        "version_removed": "32"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "32"
                    },
                    {
                        "notes": "<code>id</code> is a true global attribute only since Firefox 32.",
                        "partial_implementation": true,
                        "version_added": true,
                        "version_removed": "32"
                    }
                ],
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "id"
        }
    ],
    "the-iframe-element": [
        {
            "slug": "HTML/Element/iframe",
            "summary": "The HTML Inline Frame element (iframe) represents a nested browsing context, embedding another HTML page into the current one.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "The <code>resize</code> CSS property doesn't have any effect on this element due to <a href='https://bugzil.la/680823'>bug 680823</a>.",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "The <code>resize</code> CSS property doesn't have any effect on this element due to <a href='https://bugzil.la/680823'>bug 680823</a>.",
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "Safari has a <a href='https://www.quirksmode.org/bugreports/archives/2005/02/hidden_iframes.html'>bug</a> that prevents iframes from loading if the <code>iframe</code> element was hidden when added to the page. <code>iframeElement.src = iframeElement.src</code> should cause it to load the iframe.",
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "Safari has a <a href='https://www.quirksmode.org/bugreports/archives/2005/02/hidden_iframes.html'>bug</a> that prevents iframes from loading if the <code>iframe</code> element was hidden when added to the page. <code>iframeElement.src = iframeElement.src</code> should cause it to load the iframe.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<iframe>: The Inline Frame element"
        }
    ],
    "the-imagebitmaprenderingcontext-interface": [
        {
            "slug": "API/ImageBitmapRenderingContext",
            "summary": "The ImageBitmapRenderingContext interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap. Its context id (the first argument to HTMLCanvasElement.getContext() or OffscreenCanvas.getContext()) is \"bitmaprenderer\".",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": {
                    "version_added": "46"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "ImageBitmapRenderingContext"
        }
    ],
    "the-img-element": [
        {
            "slug": "HTML/Element/img",
            "summary": "The HTML img element embeds an image into the document. It is a replaced element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<img>: The Image Embed element"
        }
    ],
    "the-innertext-idl-attribute": [
        {
            "slug": "API/HTMLElement/innerText",
            "summary": "The innerText property of the HTMLElement interface represents the \"rendered\" text content of a node and its descendants.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "9.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLElement.innerText"
        }
    ],
    "the-input-element": [
        {
            "slug": "HTML/Element/input",
            "summary": "The HTML input element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.",
            "support": {},
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "the-ins-element": [
        {
            "slug": "HTML/Element/ins",
            "summary": "The HTML ins element represents a range of text that has been added to a document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<ins>"
        }
    ],
    "the-kbd-element": [
        {
            "slug": "HTML/Element/kbd",
            "summary": "The HTML Keyboard Input element (kbd) represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 4, creating a &lt;kbd&gt; element incorrectly resulted in an <code>HTMLSpanElement</code> object, instead of the expected <code>HTMLElement</code>.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<kbd>: The Keyboard Input element"
        }
    ],
    "the-label-element": [
        {
            "slug": "HTML/Element/label",
            "summary": "The HTML label element represents a caption for an item in a user interface.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<label>"
        }
    ],
    "the-lang-and-xml:lang-attributes": [
        {
            "slug": "HTML/Global_attributes/lang",
            "summary": "The lang global attribute helps define the language of an element: the language that non-editable elements are written in, or the language that the editable elements should be written in by the user. The attribute contains a single \u201clanguage tag\u201d in the format defined in Tags for Identifying Languages (BCP47).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "lang"
        }
    ],
    "the-legend-element": [
        {
            "slug": "HTML/Element/legend",
            "summary": "The HTML legend element represents a caption for the content of its parent fieldset.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<legend>"
        }
    ],
    "the-li-element": [
        {
            "slug": "HTML/Element/li",
            "summary": "The HTML li element is used to represent an item in a list. It must be contained in a parent element: an ordered list (ol), an unordered list (ul), or a menu (menu). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<li>"
        }
    ],
    "the-link-element": [
        {
            "slug": "HTML/Element/link",
            "summary": "The HTML External Resource Link element (link) specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both \"favicon\" style icons and mobile home screen/app icons) among other things.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<link>: The External Resource Link element"
        }
    ],
    "the-location-interface": [
        {
            "slug": "API/Document/location",
            "summary": "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.location"
        },
        {
            "slug": "API/Location",
            "summary": "The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Location"
        },
        {
            "slug": "API/Window/location",
            "summary": "The Window.location read-only property returns a Location object with information about the current location of the document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 57, single quotes contained in URLs were escaped when accessed via URL APIs. See <a href='https://bugzil.la/1386683'>bug 1386683</a>.",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "Before Firefox 57, single quotes contained in URLs were escaped when accessed via URL APIs. See <a href='https://bugzil.la/1386683'>bug 1386683</a>.",
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Window.location"
        }
    ],
    "the-main-element": [
        {
            "slug": "HTML/Element/main",
            "summary": "The HTML main element represents the dominant content of the body of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "21"
                },
                "firefox_android": {
                    "version_added": "21"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "16"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<main>"
        }
    ],
    "the-map-element": [
        {
            "slug": "HTML/Element/map",
            "summary": "The HTML map element is used with area elements to define an image map (a clickable link area).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "Before Firefox 5, in Quirks Mode, empty maps were longer skipped over in favor of non-empty ones when matching.",
                        "Before Firefox 17, the default styling of the <code>&lt;map&gt;</code> HTML element was <code>display: block;</code>. This is now <code>display: inline;</code> and matches the behavior of the other browsers. It was already the case in Quirks Mode."
                    ],
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "<map>"
        }
    ],
    "the-mark-element": [
        {
            "slug": "HTML/Element/mark",
            "summary": "The HTML Mark Text element (mark) represents text which is marked or highlighted for reference or notation purposes, due to the marked passage's relevance or importance in the enclosing context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<mark>: The Mark Text element"
        }
    ],
    "the-menu-element": [
        {
            "slug": "HTML/Element/menu",
            "summary": "The HTML menu element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": {
                    "notes": "Nested menus are not supported.",
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "flags": [
                        {
                            "name": "Enable Experimental Web Platform Features",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": true
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "<menu>"
        }
    ],
    "the-meta-element": [
        {
            "slug": "HTML/Element/meta",
            "summary": "The HTML meta element represents metadata that cannot be represented by other HTML meta-related elements, like base, link, script, style or title.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<meta>: The Document-level Metadata element"
        }
    ],
    "the-meter-element": [
        {
            "slug": "HTML/Element/meter",
            "summary": "The HTML meter element represents either a scalar value within a known range or a fractional value.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "<meter>"
        }
    ],
    "the-nav-element": [
        {
            "slug": "HTML/Element/nav",
            "summary": "The HTML nav element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<nav>: The Navigation Section element"
        }
    ],
    "the-navigator-object": [
        {
            "slug": "API/Navigator",
            "summary": "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Navigator"
        }
    ],
    "the-noscript-element": [
        {
            "slug": "HTML/Element/noscript",
            "summary": "The HTML noscript element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<noscript>"
        }
    ],
    "the-object-element": [
        {
            "slug": "HTML/Element/object",
            "summary": "The HTML object element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<object>"
        }
    ],
    "the-offscreencanvas-interface": [
        {
            "slug": "API/OffscreenCanvas",
            "summary": "The OffscreenCanvas interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "gfx.offscreencanvas.enabled",
                            "type": "preference"
                        }
                    ],
                    "version_added": "44"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "flags": [
                        {
                            "name": "Experimental canvas features",
                            "type": "preference"
                        }
                    ],
                    "version_added": true
                }
            },
            "title": "OffscreenCanvas"
        }
    ],
    "the-ol-element": [
        {
            "slug": "HTML/Element/ol",
            "summary": "The HTML ol element represents an ordered list of items, typically rendered as a numbered list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<ol>: The Ordered List element"
        }
    ],
    "the-optgroup-element": [
        {
            "slug": "HTML/Element/optgroup",
            "summary": "The HTML optgroup element creates a grouping of options within a select element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<optgroup>"
        }
    ],
    "the-option-element": [
        {
            "slug": "HTML/Element/option",
            "summary": "The HTML option element is used to define an item contained in a select, an optgroup, or a datalist element. As such, option can represent menu items in popups and other lists of items in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<option>"
        }
    ],
    "the-output-element": [
        {
            "slug": "HTML/Element/output",
            "summary": "The HTML Output element (output) is a container element into which a site or app can inject the results of a calculation or the outcome of a user action.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<output>: The Output element"
        }
    ],
    "the-p-element": [
        {
            "slug": "HTML/Element/p",
            "summary": "The HTML p element represents a paragraph.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<p>: The Paragraph element"
        }
    ],
    "the-pagetransitionevent-interface": [
        {
            "slug": "API/PageTransitionEvent",
            "summary": "The PageTransitionEvent is fired when a document is being loaded or unloaded.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "PageTransitionEvent"
        }
    ],
    "the-param-element": [
        {
            "slug": "HTML/Element/param",
            "summary": "The HTML param element defines parameters for an object element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<param>: The Object Parameter element"
        }
    ],
    "the-picture-element": [
        {
            "slug": "HTML/Element/picture",
            "summary": "The HTML picture element contains zero or more source elements and one img element to provide versions of an image for different display/device scenarios.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": {
                    "version_added": "38"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "38"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.image.picture.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "32",
                        "version_removed": "52"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "38"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.image.picture.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "32",
                        "version_removed": "52"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "25"
                },
                "opera_android": {
                    "version_added": "25"
                },
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "38"
                }
            },
            "title": "<picture>: The Picture element"
        }
    ],
    "the-pre-element": [
        {
            "slug": "HTML/Element/pre",
            "summary": "The HTML pre element represents preformatted text which is to be presented exactly as written in the HTML file.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<pre>: The Preformatted Text element"
        }
    ],
    "the-progress-element": [
        {
            "slug": "HTML/Element/progress",
            "summary": "The HTML progress element displays an indicator showing the completion progress of a task, typically displayed as a progress bar.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "Prior to Firefox 14, the <code>&lt;progress&gt;</code> element was incorrectly classified as a form element, and therefore had a <code>form</code> attribute. This has been fixed.",
                        "Firefox provides the <code>::-moz-progress-bar</code> pseudo-element, which lets you style the part of the interior of the progress bar representing the amount of work completed so far."
                    ],
                    "version_added": "6"
                },
                "firefox_android": {
                    "notes": [
                        "Prior to Firefox 14, the <code>&lt;progress&gt;</code> element was incorrectly classified as a form element, and therefore had a <code>form</code> attribute. This has been fixed.",
                        "Firefox provides the <code>::-moz-progress-bar</code> pseudo-element, which lets you style the part of the interior of the progress bar representing the amount of work completed so far."
                    ],
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "notes": "Safari on iOS does not support indeterminate progress bars (they are rendered like 0%-completed progress bars).",
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<progress>: The Progress Indicator element"
        }
    ],
    "the-promiserejectionevent-interface": [
        {
            "slug": "API/PromiseRejectionEvent/PromiseRejectionEvent",
            "summary": "The PromiseRejectionEvent() constructor returns a newly created PromiseRejectionEvent, which represents events fired when a JavaScript Promise is rejected. With promise rejection events, it becomes possible to detect and report promises which fail and whose failures go unnoticed. It also becomes easier to write a global handler for errors.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.promise_rejection_events.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "notes": "Firefox doesn't yet send the <a href='https://developer.mozilla.org/docs/Web/Events/unhandledrejection'>unhandledrejection</a> or understand <a href='https://developer.mozilla.org/docs/Web/Events/rejectionhandled'>rejectionhandled<a> events. Completing the implementation will be addressed in <a href='https://bugzil.la/1362272'>bug 1362272</a>.",
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "PromiseRejectionEvent.PromiseRejectionEvent()"
        }
    ],
    "the-q-element": [
        {
            "slug": "HTML/Element/q",
            "summary": "The HTML q element  indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. ",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<q>: The Inline Quotation element"
        }
    ],
    "the-rp-element": [
        {
            "slug": "HTML/Element/rp",
            "summary": "The HTML Ruby Fallback Parenthesis (rp) element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the ruby element.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<rp>: The Ruby Fallback Parenthesis element"
        }
    ],
    "the-rt-element": [
        {
            "slug": "HTML/Element/rt",
            "summary": "The HTML Ruby Text (rt) element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The rt element must always be contained within a ruby element.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<rt>: The Ruby Text element"
        }
    ],
    "the-ruby-element": [
        {
            "slug": "HTML/Element/ruby",
            "summary": "The HTML ruby element represents a ruby annotation. Ruby annotations are for showing pronunciation of East Asian characters.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": {
                    "version_added": "38"
                },
                "ie": {
                    "version_added": "5"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<ruby>"
        }
    ],
    "the-s-element": [
        {
            "slug": "HTML/Element/s",
            "summary": "The HTML s element renders text with a strikethrough, or a line through it. Use the s element to represent things that are no longer relevant or no longer accurate. However, s is not appropriate when indicating document edits; for that, use the del and ins elements, as appropriate.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<s>"
        }
    ],
    "the-samp-element": [
        {
            "slug": "HTML/Element/samp",
            "summary": "The HTML Sample Element (samp) is used to enclose inline text which represents sample (or quoted) output from a computer program.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<samp>: The Sample Output element"
        }
    ],
    "the-script-element": [
        {
            "slug": "HTML/Element/script",
            "summary": "The HTML script element is used to embed or reference executable code; this is typically used to embed or refer to JavaScript code.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 4, inserting &lt;script&gt; elements that have been created by calling <code>document.createElement(\"script\")</code> no longer enforces execution in insertion order. This change lets Firefox properly abide by the specification. To make script-inserted external scripts execute in their insertion order, set <code>.async=false</code> on them.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<script>: The Script element"
        }
    ],
    "the-section-element": [
        {
            "slug": "HTML/Element/section",
            "summary": "The HTML section element represents a standalone section \u2014 which doesn't have a more specific semantic element to represent it \u2014 contained within an HTML document.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<section>: The Generic Section element"
        }
    ],
    "the-select-element": [
        {
            "slug": "HTML/Element/select",
            "summary": "The HTML select element represents a control that provides a menu of options",
            "support": {
                "chrome": {
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Historically, Firefox has allowed keyboard and mouse events to bubble up from the <code>&lt;option&gt;</code> element to the parent <code>&lt;select&gt;</code> element, although this behavior is inconsistent across many browsers. For better Web compatibility (and for technical reasons), when Firefox is in multi-process mode the <code>&lt;select&gt;</code> element is displayed as a drop-down list. The behavior is unchanged if the <code>&lt;select&gt;</code> is presented inline and it has either the multiple attribute defined or a size attribute set to more than 1. Rather than watching <code>&lt;option&gt;</code> elements for events, you should watch for change events on <code>&lt;select&gt;</code>. See <a href='https://bugzil.la/1090602'>bug 1090602</a> for details.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "notes": "Firefox for Android, by default, sets a <code>background-image</code> gradient on all <code>&lt;select multiple&gt;</code> elements. This can be disabled using <code>background-image: none</code>.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value.",
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": [
                        "In the Browser app for Android 4.1 (and possibly later versions), there is a bug where the menu indicator triangle on the side of a <code>&lt;select&gt;</code> will not be displayed if a <code>background</code>, <code>border</code>, or <code>border-radius</code> style is applied to the <code>&lt;select&gt;</code>.",
                        "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                    ],
                    "version_added": true
                }
            },
            "title": "<select>"
        }
    ],
    "the-slot-element": [
        {
            "slug": "HTML/Element/slot",
            "summary": "The HTML slot element\u2014part of the Web Components technology suite\u2014is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "<slot>"
        }
    ],
    "the-small-element": [
        {
            "slug": "HTML/Element/small",
            "summary": "The HTML small element makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size.  In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<small>"
        }
    ],
    "the-source-element": [
        {
            "slug": "HTML/Element/source",
            "summary": "The HTML source element specifies multiple media resources for the picture, the audio element, or the video element. It is an empty element. It is commonly used to serve the same media content in multiple formats supported by different browsers.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Until Firefox 15, Firefox picked the first source element that has a type matching the MIME-type of a supported media format; see <a href='https://bugzil.la/449363'>bug 449363</a> for details.",
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "notes": "Until Firefox 15, Firefox picked the first source element that has a type matching the MIME-type of a supported media format; see <a href='https://bugzil.la/449363'>bug 449363</a> for details.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<source>"
        }
    ],
    "the-span-element": [
        {
            "slug": "HTML/Element/span",
            "summary": "The HTML span element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<span>"
        }
    ],
    "the-storage-interface": [
        {
            "slug": "API/Storage",
            "summary": "The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Storage"
        }
    ],
    "the-strong-element": [
        {
            "slug": "HTML/Element/strong",
            "summary": "The HTML Strong Importance Element (strong) indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 4, creating a <code>&lt;strong&gt;</code> element incorrectly resulted in an <code>HTMLSpanElement</code> object, instead of the expected <code>HTMLElement</code>.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<strong>: The Strong Importance element"
        }
    ],
    "the-style-attribute": [
        {
            "slug": "HTML/Global_attributes/style",
            "summary": "The style global attribute contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the style element have mainly the purpose of allowing for quick styling, for example for testing purposes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "style"
        }
    ],
    "the-style-element": [
        {
            "slug": "HTML/Element/style",
            "summary": "The HTML style element contains style information for a document, or part of a document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "3"
                },
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "<style>: The Style Information element"
        }
    ],
    "the-sub-and-sup-elements": [
        {
            "slug": "HTML/Element/sub",
            "summary": "The HTML Subscript element (sub) specifies inline text which should be displayed as subscript for solely typographical reasons.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<sub>: The Subscript element"
        },
        {
            "slug": "HTML/Element/sup",
            "summary": "The HTML Superscript element (sup) specifies inline text which is to be displayed as superscript for solely typographical reasons.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<sup>: The Superscript element"
        }
    ],
    "the-summary-element": [
        {
            "slug": "HTML/Element/summary",
            "summary": "The HTML Disclosure Summary element (summary) element specifies a summary, caption, or legend for a details element's disclosure box.",
            "support": {
                "chrome": {
                    "version_added": "12"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/detailssummary?filter=f3f0000bf&search=details'>In development</a>.",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/detailssummary?filter=f3f0000bf&search=details'>In development</a>.",
                    "version_added": false
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "<summary>: The Disclosure Summary element"
        }
    ],
    "the-table-element": [
        {
            "slug": "HTML/Element/table",
            "summary": "The HTML table element represents tabular data \u2014 that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "<table>: The Table element"
        }
    ],
    "the-tbody-element": [
        {
            "slug": "HTML/Element/tbody",
            "summary": "The HTML Table Body element (tbody) encapsulates a set of table row (tr elements), indicating that they comprise the body of the table (table).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<tbody>: The Table Body element"
        }
    ],
    "the-td-element": [
        {
            "slug": "HTML/Element/td",
            "summary": "The HTML td element defines a cell of a table that contains data. It participates in the table model.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<td>: The Table Data Cell element"
        }
    ],
    "the-template-element": [
        {
            "slug": "HTML/Element/template",
            "summary": "The HTML Content Template (template) element is a mechanism for holding client-side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "13"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<template>: The Content Template element"
        }
    ],
    "the-textarea-element": [
        {
            "slug": "HTML/Element/textarea",
            "summary": "The HTML textarea element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "Before Firefox 6, when a <code>&lt;textarea&gt;</code> was focused, the insertion point was placed at the end of the text by default. Other major browsers place the insertion point at the beginning of the text.",
                        "A default background-image gradient is applied to all <code>&lt;textarea&gt;</code> elements, which can be disabled using <code>background-image: none</code>."
                    ],
                    "version_added": true
                },
                "firefox_android": {
                    "notes": [
                        "Before Firefox 6, when a <code>&lt;textarea&gt;</code> was focused, the insertion point was placed at the end of the text by default. Other major browsers place the insertion point at the beginning of the text.",
                        "A default background-image gradient is applied to all <code>&lt;textarea&gt;</code> elements, which can be disabled using <code>background-image: none</code>."
                    ],
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "Unlike other major browsers, a default style of <code>opacity: 0.4</code> is applied to disabled <code>&lt;textarea&gt;</code> elements.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<textarea>"
        }
    ],
    "the-tfoot-element": [
        {
            "slug": "HTML/Element/tfoot",
            "summary": "The HTML tfoot element defines a set of rows summarizing the columns of the table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<tfoot>: The Table Foot element"
        }
    ],
    "the-th-element": [
        {
            "slug": "HTML/Element/th",
            "summary": "The HTML th element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<th>"
        }
    ],
    "the-thead-element": [
        {
            "slug": "HTML/Element/thead",
            "summary": "The HTML thead element defines a set of rows defining the head of the columns of the table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<thead>: The Table Head element"
        }
    ],
    "the-time-element": [
        {
            "slug": "HTML/Element/time",
            "summary": "The HTML time element represents a specific period in time.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": {
                    "version_added": "62"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "12"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "12"
                    }
                ],
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "62"
                }
            },
            "title": "<time>"
        }
    ],
    "the-title-attribute": [
        {
            "slug": "HTML/Global_attributes/title",
            "summary": "The title global attribute contains text representing advisory information related to the element it belongs to.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "title"
        }
    ],
    "the-title-element": [
        {
            "slug": "HTML/Element/title",
            "summary": "The HTML Title element (title) defines the document's title that is shown in a browser's title bar or a page's tab.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "1"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<title>: The Document Title element"
        }
    ],
    "the-tr-element": [
        {
            "slug": "HTML/Element/tr",
            "summary": "The HTML tr element defines a row of cells in a table. The row's cells can then be established using a mix of td (data cell) and th (header cell) elements.The HTML tr element specifies that the markup contained inside the tr block comprises one row of a table, inside which the th and td elements create header and data cells, respectively, within the row.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<tr>: The Table Row element"
        }
    ],
    "the-track-element": [
        {
            "slug": "HTML/Element/track",
            "summary": "The HTML track element is used as a child of the media elements audio and video. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) \u2014 Web Video Text Tracks or Timed Text Markup Language (TTML).",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "notes": "Doesn\u2019t work for fullscreen video.",
                    "version_added": "25"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "31"
                    },
                    {
                        "flags": [
                            {
                                "name": "media.webvtt.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "24",
                        "version_removed": "50"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "31"
                    },
                    {
                        "flags": [
                            {
                                "name": "media.webvtt.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "24",
                        "version_removed": "50"
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Doesn\u2019t work for fullscreen video.",
                    "version_added": true
                }
            },
            "title": "<track>"
        }
    ],
    "the-u-element": [
        {
            "slug": "HTML/Element/u",
            "summary": "The HTML Unarticulated Annotation Element (u) represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface.",
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<u>: The Unarticulated Annotation (Underline) element"
        }
    ],
    "the-ul-element": [
        {
            "slug": "HTML/Element/ul",
            "summary": "The HTML ul element represents an unordered list of items, typically rendered as a bulleted list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<ul>: The Unordered List element"
        }
    ],
    "the-var-element": [
        {
            "slug": "HTML/Element/var",
            "summary": "The HTML Variable element (var) represents the name of a variable in a mathematical expression or a programming context.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<var>: The Variable element"
        }
    ],
    "the-video-element": [
        {
            "slug": "HTML/Element/video",
            "summary": "The HTML Video element (video) embeds a media player which supports video playback into the document.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<video>: The Video Embed element"
        }
    ],
    "the-wbr-element": [
        {
            "slug": "HTML/Element/wbr",
            "summary": "The HTML wbr element represents a word break opportunity\u2014a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5",
                    "version_removed": "7"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<wbr>"
        }
    ],
    "the-websocket-interface": [
        {
            "slug": "API/WebSocket",
            "summary": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "notes": "See <a href='https://bugzil.la/695635'>bug 695635</a>.",
                        "version_added": "11"
                    },
                    {
                        "notes": "Message size limited to 16 MB (see <a href='https://bugzil.la/711205'>bug 711205</a>).",
                        "prefix": "Moz",
                        "version_added": "7",
                        "version_removed": "11"
                    },
                    {
                        "notes": "Message size limited to 16 MB (see <a href='https://bugzil.la/711205'>bug 711205</a>).",
                        "version_added": "4",
                        "version_removed": "6"
                    }
                ],
                "firefox_android": [
                    {
                        "notes": "See <a href='https://bugzil.la/695635'>bug 695635</a>.",
                        "version_added": "14"
                    },
                    {
                        "notes": "Message size limited to 16 MB (see <a href='https://bugzil.la/711205'>bug 711205</a>).",
                        "prefix": "Moz",
                        "version_added": "7",
                        "version_removed": "14"
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WebSocket"
        }
    ],
    "time-ranges": [
        {
            "slug": "API/TimeRanges",
            "summary": "The TimeRanges interface is used to represent a set of time ranges, primarily for the purpose of tracking which portions of media have been buffered when loading it for use by the audio and video elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "TimeRanges"
        }
    ],
    "time-state-(type=time)": [
        {
            "slug": "HTML/Element/input/time",
            "summary": "input elements of type time create input fields designed to let the user easily enter a time (hours and minutes, and optionally seconds).",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "25"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"time\">"
        }
    ],
    "transferable-objects": [
        {
            "slug": "API/Transferable",
            "summary": "The Transferable interface represents an object that can be transfered between different execution contexts, like the main thread and Web workers.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "notes": "Internet Explorer 10 only accepts a single <code>Transferable</code> object as parameter, but not an array.",
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Transferable"
        }
    ],
    "url-state-(type=url)": [
        {
            "slug": "HTML/Element/input/url",
            "summary": "input elements of type url are used to let the user enter and edit a URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"url\">"
        }
    ],
    "videotrack": [
        {
            "slug": "API/VideoTrack",
            "summary": "The VideoTrack interface represents a single video track from a video element.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "VideoTrack"
        }
    ],
    "videotracklist": [
        {
            "slug": "API/VideoTrackList",
            "summary": "The VideoTrackList interface is used to represent a list of the video tracks contained within a video element, with each track represented by a separate VideoTrack object in the list.",
            "support": {
                "chrome": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "chrome_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "45"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "media.track.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "33"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "opera_android": {
                    "flags": [
                        {
                            "name": "enable-experimental-web-platform-features",
                            "type": "preference",
                            "value_to_set": "enabled"
                        }
                    ],
                    "version_added": "32"
                },
                "safari": {
                    "version_added": "6.1"
                },
                "safari_ios": {
                    "version_added": "7.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "VideoTrackList"
        }
    ],
    "webstorage": [
        {
            "slug": "API/Web_Storage_API",
            "summary": "The Web Storage API provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using cookies.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Web Storage API"
        },
        {
            "slug": "API/Web_Storage_API/Using_the_Web_Storage_API",
            "summary": "The Web Storage API provides mechanisms by which browsers can securely store key/value pairs.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Using the Web Storage API"
        }
    ],
    "week-state-(type=week)": [
        {
            "slug": "HTML/Element/input/week",
            "summary": "input elements of type week create input fields allowing easy entry of a year plus the ISO 8601 week number during that year (i.e., week 1 to 52 or 53).",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a>.",
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "<input type=\"week\">"
        }
    ],
    "windoweventhandlers": [
        {
            "slug": "API/WindowEventHandlers",
            "summary": "The WindowEventHandlers mixin describes the event handlers common to several interfaces like Window, or HTMLBodyElement and HTMLFrameSetElement. Each of these interfaces can implement additional specific event handlers.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WindowEventHandlers"
        }
    ],
    "windoworworkerglobalscope-mixin": [
        {
            "slug": "API/WindowOrWorkerGlobalScope",
            "summary": "The WindowOrWorkerGlobalScope mixin describes several features common to the Window and WorkerGlobalScope interfaces.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WindowOrWorkerGlobalScope"
        }
    ],
    "worker": [
        {
            "slug": "API/Worker",
            "summary": "The Worker interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "Worker"
        }
    ],
    "workerglobalscope": [
        {
            "slug": "API/WorkerGlobalScope",
            "summary": "The WorkerGlobalScope interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects \u2014 in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "WorkerGlobalScope"
        }
    ],
    "workerlocation": [
        {
            "slug": "API/WorkerLocation",
            "summary": "The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WorkerLocation"
        }
    ],
    "workernavigator": [
        {
            "slug": "API/WorkerNavigator",
            "summary": "The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.navigator property obtained by calling window.self.navigator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "WorkerNavigator"
        }
    ],
    "workers": [
        {
            "slug": "API/Web_Workers_API",
            "summary": "Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "Web Workers API"
        },
        {
            "slug": "API/Web_Workers_API/Using_web_workers",
            "summary": "Web Workers is a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5.1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "Using Web Workers"
        }
    ]
}
