{
    "callbackdef-eventlistener": [
        {
            "slug": "API/EventListener",
            "summary": "The EventListener interface represents an object that can handle an event dispatched by an EventTarget object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "EventListener"
        }
    ],
    "characterdata": [
        {
            "slug": "API/CharacterData",
            "summary": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CharacterData"
        }
    ],
    "comment": [
        {
            "slug": "API/Comment",
            "summary": "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view. Comments are represented in HTML and XML as content between '!--' and '--'. In XML, the character sequence '--' cannot be used within a comment.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Comment"
        }
    ],
    "dictdef-mutationobserverinit": [
        {
            "slug": "API/MutationObserverInit",
            "summary": "The MutationObserverInit dictionary describes the configuration of a mutation observer. As such, it's primarily used as the type of the options parameter on the MutationObserver.observe() method.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit"
        }
    ],
    "documenttype": [
        {
            "slug": "API/DocumentType",
            "summary": "The DocumentType interface represents a Node containing a doctype.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DocumentType"
        }
    ],
    "dom-abortcontroller-abort": [
        {
            "slug": "API/AbortController/abort",
            "summary": "The abort() method of the AbortController interface aborts a DOM request (e.g. a Fetch request) before it has completed. This is able to abort fetch requests, consumption of any response Body, and streams.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "edge_mobile": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "53"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.1"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "AbortController.abort()"
        }
    ],
    "dom-abortcontroller-abortcontroller": [
        {
            "slug": "API/AbortController/AbortController",
            "summary": "The AbortController() constructor creates a new AbortController object instance.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "edge_mobile": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "53"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.1"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "AbortController.AbortController()"
        }
    ],
    "dom-abortcontroller-signal": [
        {
            "slug": "API/AbortController/signal",
            "summary": "The signal read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort a DOM request as desired.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "edge_mobile": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "53"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.1"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "AbortController.signal"
        }
    ],
    "dom-abortsignal-aborted": [
        {
            "slug": "API/AbortSignal/onabort",
            "summary": "The onabort read-only property of the FetchSignal interface is an event handler Invoked when an abort event fires, i.e. when the fetch request(s) the signal is communicating with is/are aborted.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "edge_mobile": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "53"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.1"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "AbortSignal.onabort"
        }
    ],
    "dom-abortsignal-onabort": [
        {
            "slug": "API/AbortSignal/aborted",
            "summary": "The aborted read-only property returns a Boolean that indicates whether the DOM request(s) the signal is communicating with is/are aborted (true) or not (false).",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "edge_mobile": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "53"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.1"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "AbortSignal.aborted"
        }
    ],
    "dom-attr-localname": [
        {
            "slug": "API/Attr/localName",
            "summary": "The Attr.localName read-only property returns the local part of the qualified name of an element.",
            "support": {
                "chrome": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "46"
                },
                "firefox": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "48"
                },
                "firefox_android": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Attr.localName"
        }
    ],
    "dom-attr-namespaceuri": [
        {
            "slug": "API/Attr/namespaceURI",
            "summary": "The Attr.namespaceURI read-only property returns the namespace URI of the attribute, or null if the element is not in a namespace.",
            "support": {
                "chrome": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "46"
                },
                "firefox": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "48"
                },
                "firefox_android": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Attr.namespaceURI"
        }
    ],
    "dom-attr-prefixr": [
        {
            "slug": "API/Attr/prefix",
            "summary": "The Attr.prefix read-only property returns the namespace prefix of the specified attribute, or null if no prefix is specified.",
            "support": {
                "chrome": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "46"
                },
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "48"
                },
                "firefox_android": {
                    "notes": "This API was previously available on the <a href='https://developer.mozilla.org/docs/Web/API/Node'><code>Node</code></a> API.",
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Attr.prefix"
        }
    ],
    "dom-childnode-after": [
        {
            "slug": "API/ChildNode/after",
            "summary": "The ChildNode.after() method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just after this ChildNode. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "ChildNode.after()"
        }
    ],
    "dom-childnode-before": [
        {
            "slug": "API/ChildNode/before",
            "summary": "The ChildNode.before method inserts a set of Node or DOMString objects in the children list of this ChildNode's parent, just before this ChildNode. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "ChildNode.before()"
        }
    ],
    "dom-childnode-remove": [
        {
            "slug": "API/ChildNode/remove",
            "summary": "The ChildNode.remove() method removes the object from the tree it belongs to.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "23"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ChildNode.remove()"
        }
    ],
    "dom-childnode-replacewith": [
        {
            "slug": "API/ChildNode/replaceWith",
            "summary": "The ChildNode.replaceWith() method replaces this ChildNode in the children list of its parent with a set of Node or DOMString objects. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "ChildNode.replaceWith()"
        }
    ],
    "dom-comment-comment": [
        {
            "slug": "API/Comment/Comment",
            "summary": "The Comment() constructor returns a newly created Comment object with the optional DOMString given in parameter as its textual content.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Comment()"
        }
    ],
    "dom-customevent-customevent": [
        {
            "slug": "API/CustomEvent/CustomEvent",
            "summary": "The CustomEvent() constructor creates a new CustomEvent.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "Available on Nightly build (535.2)",
                    "version_added": false
                },
                "safari_ios": {
                    "notes": "Available on Nightly build (535.2)",
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CustomEvent()"
        }
    ],
    "dom-customeventinit-detail": [
        {
            "slug": "API/CustomEvent/detail",
            "summary": "The detail readonly property of the CustomEvent interface returns any data passed when initializing the event.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "Available on Nightly build (535.2)",
                    "version_added": false
                },
                "safari_ios": {
                    "notes": "Available on Nightly build (535.2)",
                    "version_added": false
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CustomEvent.detail"
        }
    ],
    "dom-document-characterset": [
        {
            "slug": "API/Document/characterSet",
            "summary": "The Document.characterSet read-only property returns the character encoding of the document that it's currently rendered with.",
            "support": {
                "chrome": [
                    {
                        "version_added": "45"
                    },
                    {
                        "alternative_name": "charset",
                        "notes": "<code>charset</code> alias was made read-only in 45.",
                        "version_added": true
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": true
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "45"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": true
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": true
                    }
                ],
                "edge": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": true
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "edge_mobile": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": true
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "firefox": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": true
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": true
                    }
                ],
                "ie": [
                    {
                        "version_added": null
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": null
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "opera": [
                    {
                        "version_added": null
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": null
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "opera_android": [
                    {
                        "version_added": null
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": null
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "safari": [
                    {
                        "version_added": null
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": null
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": null
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": null
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "45"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": true
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": true
                    }
                ]
            },
            "title": "Document.characterSet"
        }
    ],
    "dom-document-contenttype": [
        {
            "slug": "API/Document/contentType",
            "summary": "The Document.contentType read-only property returns the MIME type that the document is being rendered as. This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.contentType"
        }
    ],
    "dom-document-createattribute": [
        {
            "slug": "API/Document/createAttribute",
            "summary": "The Document.createAttribute() method creates a new attribute node, and returns it. The object created a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "44"
                    },
                    {
                        "notes": "The parameter was not converted to its lowercase variant.",
                        "version_added": "4",
                        "version_removed": "44"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "44"
                    },
                    {
                        "notes": "The parameter was not converted to its lowercase variant.",
                        "version_added": "4",
                        "version_removed": "44"
                    }
                ],
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.createAttribute()"
        }
    ],
    "dom-document-createdocumentfragment": [
        {
            "slug": "API/Document/createDocumentFragment",
            "summary": "Creates a new empty DocumentFragment.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.createDocumentFragment()"
        }
    ],
    "dom-document-createelement": [
        {
            "slug": "API/Document/createElement",
            "summary": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Doesn't conform to the DOM spec for XUL and XHTML documents: <code>localName</code> and <code>namespaceURI</code> are not set to null on the created element.",
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.createElement()"
        }
    ],
    "dom-document-createelementns": [
        {
            "slug": "API/Document/createElementNS",
            "summary": "Creates an element with the specified namespace URI and qualified name.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Doesn't conform to the DOM spec for XUL and XHTML documents: <code>localName</code> and <code>namespaceURI</code> are not set to null on the created element.",
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.createElementNS()"
        }
    ],
    "dom-document-createprocessinginstruction": [
        {
            "slug": "API/Document/createProcessingInstruction",
            "summary": "createProcessingInstruction() generates a new processing instruction node and returns it.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.createProcessingInstruction()"
        }
    ],
    "dom-document-createtextnode": [
        {
            "slug": "API/Document/createTextNode",
            "summary": "Creates a new Text node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.createTextNode()"
        }
    ],
    "dom-document-createtreewalker": [
        {
            "slug": "API/Document/createTreeWalker",
            "summary": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.createTreeWalker()"
        }
    ],
    "dom-document-doctype": [
        {
            "slug": "API/Document/doctype",
            "summary": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.doctype"
        }
    ],
    "dom-document-documentelement": [
        {
            "slug": "API/Document/documentElement",
            "summary": "Document.documentElement returns the Element that is the root element of the document (for example, the html element for HTML documents).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.documentElement"
        }
    ],
    "dom-document-documenturi": [
        {
            "slug": "API/Document/documentURI",
            "summary": "The documentURI property of the Document interface returns the document location as a string.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.documentURI"
        }
    ],
    "dom-document-importnode": [
        {
            "slug": "API/Document/importNode",
            "summary": "The Document object's importNode() method creates a copy of a Node or DocumentFragment from another document, to be inserted into the current document later.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.importNode()"
        }
    ],
    "dom-document-origin": [
        {
            "slug": "API/Document/origin",
            "summary": "The Document.origin read-only property returns the document's origin. In most cases, this property is equivalent to document.defaultView.location.origin.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "41"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": false
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.origin"
        }
    ],
    "dom-document-url": [
        {
            "slug": "API/Document/URL",
            "summary": "The URL read-only property of the Document interface returns the document location as a string.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.URL"
        }
    ],
    "dom-documentfragment-documentfragment": [
        {
            "slug": "API/DocumentFragment/DocumentFragment",
            "summary": "The DocumentFragment() constructor returns a new, empty DocumentFragment object .",
            "support": {
                "chrome": {
                    "version_added": "28"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DocumentFragment()"
        }
    ],
    "dom-domimplementation-createdocument": [
        {
            "slug": "API/DOMImplementation/createDocument",
            "summary": "The DOMImplementation.createDocument() method creates and returns an XMLDocument.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation.createDocument()"
        }
    ],
    "dom-domimplementation-createdocumenttype": [
        {
            "slug": "API/DOMImplementation/createDocumentType",
            "summary": "The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation.createDocumentType()"
        }
    ],
    "dom-domimplementation-createhtmldocument": [
        {
            "slug": "API/DOMImplementation/createHTMLDocument",
            "summary": "The DOMImplementation.createHTMLDocument() method creates a new HTML Document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "The <code>title</code> parameter is required, but can be empty string.",
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation.createHTMLDocument()"
        }
    ],
    "dom-domtokenlist-add": [
        {
            "slug": "API/DOMTokenList/add",
            "summary": "The add() method of the DOMTokenList interface adds the given token to the list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMTokenList.add()"
        }
    ],
    "dom-domtokenlist-contains": [
        {
            "slug": "API/DOMTokenList/contains",
            "summary": "The contains() method of the DOMTokenList interface returns a Boolean \u2014 true if the underlying list contains the given token, otherwise false.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMTokenList.contains()"
        }
    ],
    "dom-domtokenlist-item": [
        {
            "slug": "API/DOMTokenList/item",
            "summary": "The item() method of the DOMTokenList interface returns an item in the list by its index.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMTokenList.item()"
        }
    ],
    "dom-domtokenlist-length": [
        {
            "slug": "API/DOMTokenList/length",
            "summary": "The length read-only property of the DOMTokenList interface is an integer representing the number of objects stored in the object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMTokenList.length"
        }
    ],
    "dom-domtokenlist-remove": [
        {
            "slug": "API/DOMTokenList/remove",
            "summary": "The remove() method of the DOMTokenList interface removes the specified tokens from the list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMTokenList.remove()"
        }
    ],
    "dom-domtokenlist-replace": [
        {
            "slug": "API/DOMTokenList/replace",
            "summary": "The replace() method of the DOMTokenList interface replaces an existing token with a new token.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "48"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "61"
                }
            },
            "title": "DOMTokenList.replace()"
        }
    ],
    "dom-domtokenlist-toggle": [
        {
            "slug": "API/DOMTokenList/toggle",
            "summary": "The toggle() method of the DOMTokenList interface removes a given token from the list and returns false. If token doesn't exist it's added and the function returns true.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMTokenList.toggle()"
        }
    ],
    "dom-domtokenlist-value": [
        {
            "slug": "API/DOMTokenList/value",
            "summary": "The value property of the DOMTokenList interface returns the value of the list as a DOMString, or clears and sets the list to the given value.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface.",
                    "version_added": "50"
                },
                "chrome_android": {
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface.",
                    "version_added": "50"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "notes": "Before Opera 37, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface.",
                    "version_added": "37"
                },
                "opera_android": {
                    "notes": "Before Opera 37, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface.",
                    "version_added": "37"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface.",
                    "version_added": "50"
                }
            },
            "title": "DOMTokenList.value"
        }
    ],
    "dom-element-attachshadow": [
        {
            "slug": "API/Element/attachShadow",
            "summary": "The Element.attachShadow() method attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/microsoft-edge/platform/status/shadowdom/'>Under consideration</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/microsoft-edge/platform/status/shadowdom/'>Under consideration</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "Element.attachShadow()"
        }
    ],
    "dom-element-attributes": [
        {
            "slug": "API/Element/attributes",
            "summary": "The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": {
                    "version_added": "22"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.attributes"
        }
    ],
    "dom-element-classlist": [
        {
            "slug": "API/Element/classList",
            "summary": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": [
                    {
                        "version_added": "16"
                    },
                    {
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true,
                        "version_added": "12"
                    }
                ],
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.classList"
        }
    ],
    "dom-element-classname": [
        {
            "slug": "API/Element/className",
            "summary": "The className property of the Element interface gets and sets the value of the class attribute of the specified element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.className"
        }
    ],
    "dom-element-closest": [
        {
            "slug": "API/Element/closest",
            "summary": "For browsers that do not support Element.closest(), but carry support for element.matches() (or a prefixed equivalent, meaning IE9+), a polyfill exists:",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": "15"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "35"
                },
                "firefox_android": {
                    "version_added": "35"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "28"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Element.closest()"
        }
    ],
    "dom-element-getattributenames": [
        {
            "slug": "API/Element/getAttributeNames",
            "summary": "Element.getAttributeNames() returns the attribute names of the element as an Array of strings.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "18"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "48"
                },
                "opera_android": {
                    "version_added": "48"
                },
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "61"
                }
            },
            "title": "Element.getAttributeNames()"
        }
    ],
    "dom-element-getattributens": [
        {
            "slug": "API/Element/getAttributeNS",
            "summary": "getAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 13, <code>null</code> is always returned instead of the empty string, as per the DOM4 specification. Previously, there were cases in which an empty string could be returned.",
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.getAttributeNS()"
        }
    ],
    "dom-element-getelementsbyclassname": [
        {
            "slug": "API/Element/getElementsByClassName",
            "summary": "The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec.",
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "notes": "Safari on iOS 8 and OS X 10.10 returns a <code>NodeList</code>.",
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Element.getElementsByClassName()"
        }
    ],
    "dom-element-getelementsbytagname": [
        {
            "slug": "API/Element/getElementsByTagName",
            "summary": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name.",
            "support": {
                "chrome": {
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change.",
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec.",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec.",
                    "version_added": true
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change.",
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change.",
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.getElementsByTagName()"
        }
    ],
    "dom-element-getelementsbytagnamens": [
        {
            "slug": "API/Element/getElementsByTagNameNS",
            "summary": "The Element.getElementsByTagNameNS() method returns a live HTMLCollection of elements with the given tag name belonging to the given namespace. It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.",
            "support": {
                "chrome": {
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change.",
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": [
                        "The behavior of <code>element.getElementsByTagNameNS</code> changed between Firefox 3.5 and Firefox 3.6. In Firefox 3.5 and before, this function would automatically case-fold any queries so that a search for \"foo\" would match \"Foo\" or \"foo\". In Firefox 3.6 and later this function is now case-sensitive so that a query for \"foo\" will only match \"foo\" and not \"Foo\". For more background on this, please see the <a href='https://bugzil.la/542185#c5'>comment from Henri Sivonen about the change</a>. You can also look at the <a href='https://developer.mozilla.org/docs/Case_Sensitivity_in_class_and_id_Names'>relevant part of the standard, which states which parts of the API are case-sensitive and which parts aren't.</a>",
                        "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflects the spec change."
                    ],
                    "version_added": true
                },
                "firefox_android": {
                    "notes": [
                        "The behavior of <code>element.getElementsByTagNameNS</code> changed between Firefox 3.5 and Firefox 3.6. In Firefox 3.5 and before, this function would automatically case-fold any queries so that a search for \"foo\" would match \"Foo\" or \"foo\". In Firefox 3.6 and later this function is now case-sensitive so that a query for \"foo\" will only match \"foo\" and not \"Foo\". For more background on this, please see the <a href='https://bugzil.la/542185#c5'>comment from Henri Sivonen about the change</a>. You can also look at the <a href='https://developer.mozilla.org/docs/Case_Sensitivity_in_class_and_id_Names'>relevant part of the standard, which states which parts of the API are case-sensitive and which parts aren't.</a>",
                        "Prior to Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflects the spec change."
                    ],
                    "version_added": true
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change.",
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change.",
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.getElementsByTagNameNS()"
        }
    ],
    "dom-element-hasattribute": [
        {
            "slug": "API/Element/hasAttribute",
            "summary": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.hasAttribute()"
        }
    ],
    "dom-element-hasattributes": [
        {
            "slug": "API/Element/hasAttributes",
            "summary": "The Element.hasAttributes() method returns Boolean value, indicating if the current element has any attributes or not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "[1] Before Firefox 35, it was implemented on the <code>Node</code> interface.",
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Element.hasAttributes()"
        }
    ],
    "dom-element-id": [
        {
            "slug": "API/Element/id",
            "summary": "The id property of the Element interface represents the element's identifier, reflecting the id global attribute.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.id"
        }
    ],
    "dom-element-insertadjacentelement": [
        {
            "slug": "API/Element/insertAdjacentElement",
            "summary": "The insertAdjacentElement() method inserts a given element node at a given position relative to the element it is invoked upon.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "2.3"
                }
            },
            "title": "Element.insertAdjacentElement()"
        }
    ],
    "dom-element-insertadjacenttext": [
        {
            "slug": "API/Element/insertAdjacentText",
            "summary": "The insertAdjacentText() method inserts a given text node at a given position relative to the element it is invoked upon.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": "48"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "2.3"
                }
            },
            "title": "Element.insertAdjacentText()"
        }
    ],
    "dom-element-localname": [
        {
            "slug": "API/Element/localName",
            "summary": "The Element.localName read-only property returns the local part of the qualified name of an element.",
            "support": {
                "chrome": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "48"
                },
                "firefox_android": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Element.localName"
        }
    ],
    "dom-element-matches": [
        {
            "slug": "API/Element/matches",
            "summary": "The Element.matches() method returns true if the element would be selected by the specified selector string; otherwise, returns false.",
            "support": {
                "chrome": [
                    {
                        "version_added": "34"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": true
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "34"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": true
                    }
                ],
                "edge": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": true
                    },
                    {
                        "alternative_name": "msMatchesSelector",
                        "version_added": true
                    }
                ],
                "edge_mobile": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": true
                    },
                    {
                        "alternative_name": "msMatchesSelector",
                        "version_added": true
                    }
                ],
                "firefox": [
                    {
                        "version_added": "34"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "mozMatchesSelector",
                        "notes": [
                            "Prior to Firefox 4, invalid selector strings caused false to be returned instead of throwing an exception.",
                            "See <a href='https://bugzil.la/1119718'>bug 1119718</a> for removal."
                        ],
                        "version_added": "3.6"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "34"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "mozMatchesSelector",
                        "notes": "See <a href='https://bugzil.la/1119718'>bug 1119718</a> for removal.",
                        "version_added": "4"
                    }
                ],
                "ie": {
                    "alternative_name": "msMatchesSelector",
                    "version_added": "9"
                },
                "opera": [
                    {
                        "version_added": "21"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": "15"
                    },
                    {
                        "alternative_name": "oMatchesSelector",
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "21"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": "15"
                    },
                    {
                        "alternative_name": "oMatchesSelector",
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": "5"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "8"
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": true
                    }
                ],
                "samsunginternet_android": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": true
                    }
                ],
                "webview_android": [
                    {
                        "version_added": true
                    },
                    {
                        "alternative_name": "webkitMatchesSelector",
                        "version_added": true
                    }
                ]
            },
            "title": "Element.matches()"
        }
    ],
    "dom-element-namespaceuri": [
        {
            "slug": "API/Element/namespaceURI",
            "summary": "The Element.namespaceURI read-only property returns the namespace URI of the element, or null if the element is not in a namespace.",
            "support": {
                "chrome": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "48"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Element.namespaceURI"
        }
    ],
    "dom-element-prefix": [
        {
            "slug": "API/Element/prefix",
            "summary": "The Element.prefix read-only property returns the namespace prefix of the specified element, or null if no prefix is specified.",
            "support": {
                "chrome": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "48"
                },
                "firefox_android": {
                    "notes": "This API was previously available on the<code>Node</code> API.",
                    "version_added": "48"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Element.prefix"
        }
    ],
    "dom-element-shadowroot": [
        {
            "slug": "API/Element/shadowRoot",
            "summary": "The Element.shadowRoot read-only property represents the shadow root hosted by the element.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/microsoft-edge/platform/status/shadowdom/'>Under consideration</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/microsoft-edge/platform/status/shadowdom/'>Under consideration</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "Element.shadowRoot"
        }
    ],
    "dom-element-slot": [
        {
            "slug": "API/Element/slot",
            "summary": "The slot property of the Element interface returns the name of the shadow DOM slot the element is inserted in.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "Element.slot"
        },
        {
            "slug": "HTML/Global_attributes/slot",
            "summary": "The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the slot element whose name attribute's value matches that slot attribute's value.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "prefix": "-webkit-",
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "slot"
        }
    ],
    "dom-element-tagname": [
        {
            "slug": "API/Element/tagName",
            "summary": "The tagName read-only property of the Element interface returns the tag name of the element on which it's called.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Element.tagName"
        }
    ],
    "dom-element-toggleattribute": [
        {
            "slug": "API/Element/toggleAttribute",
            "summary": "The toggleAttribute() method of the Element interface toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": {
                    "version_added": "69"
                },
                "edge": {
                    "version_added": "18"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": {
                    "version_added": "63"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "56"
                },
                "opera_android": {
                    "version_added": "56"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "69"
                }
            },
            "title": "Element.toggleAttribute()"
        }
    ],
    "dom-event-bubbles": [
        {
            "slug": "API/Event/bubbles",
            "summary": "The Event property bubbles indicates whether the event bubbles up through the DOM or not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.bubbles"
        }
    ],
    "dom-event-cancelable": [
        {
            "slug": "API/Event/cancelable",
            "summary": "Events' cancelable property indicates if the event can be canceled, and therefore prevented as if the event never happened.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.cancelable"
        }
    ],
    "dom-event-cancelbubble": [
        {
            "slug": "API/Event/cancelBubble",
            "summary": "The Event.cancelBubble property is a historical alias to Event.stopPropagation(). Setting its value to true before returning from an event handler prevents propagation of the event. In later implementations, setting this to false does nothing. See Browser compatibility for details.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Prior to Firefox 53, this property was defined on the <a href='https://developer.mozilla.org/docs/Web/API/UIEvent'><code>UIEvent</code></a> interface. See <a href='https://bugzil.la/1298970'>bug 1298970</a> for more details.",
                    "version_added": "53"
                },
                "firefox_android": {
                    "notes": "Prior to Firefox 53, this property was defined on the <a href='https://developer.mozilla.org/docs/Web/API/UIEvent'><code>UIEvent</code></a> interface. See <a href='https://bugzil.la/1298970'>bug 1298970</a> for more details.",
                    "version_added": "53"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>.",
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Starting with Chrome 58 and Opera 45, setting this property to false does nothing, as per <a href='https://github.com/whatwg/dom/issues/211'>spec discussion</a>.",
                    "version_added": true
                }
            },
            "title": "Event.cancelBubble"
        }
    ],
    "dom-event-composed": [
        {
            "slug": "API/Event/composed",
            "summary": "The read-only composed property of the Event interface returns a Boolean which indicates whether or not the event will propagate across the shadow DOM boundary into the standard DOM.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "Event.composed"
        }
    ],
    "dom-event-composedpath": [
        {
            "slug": "API/Event/composedPath",
            "summary": "The composedPath() method of the Event interface returns the event\u2019s path which is an array of the objects on which listeners will be invoked. This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "53"
                    },
                    {
                        "alternative_name": "deepPath",
                        "version_added": "50",
                        "version_removed": "53"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "53"
                    },
                    {
                        "alternative_name": "deepPath",
                        "version_added": "50",
                        "version_removed": "53"
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "opera": [
                    {
                        "version_added": "40"
                    },
                    {
                        "alternative_name": "deepPath",
                        "version_added": "37",
                        "version_removed": "40"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "40"
                    },
                    {
                        "alternative_name": "deepPath",
                        "version_added": "37",
                        "version_removed": "40"
                    }
                ],
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "webview_android": [
                    {
                        "version_added": "53"
                    },
                    {
                        "alternative_name": "deepPath",
                        "version_added": "50",
                        "version_removed": "53"
                    }
                ]
            },
            "title": "Event.composedPath()"
        }
    ],
    "dom-event-currenttarget": [
        {
            "slug": "API/Event/currentTarget",
            "summary": "Identifies the current target for the event, as the event traverses the DOM. It always refers to the element to which the event handler has been attached, as opposed to event.target which identifies the element on which the event occurred.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "notes": "On Internet Explorer 6 through 8, the event model is different. Event listeners are attached with the non-standard <a href='https://developer.mozilla.org/docs/Web/API/EventTarget/attachEvent'><code>EventTarget.attachEvent</code></a> method. In this model, there is no equivalent to <code>event.currentTarget</code> and <code>this</code> is the global object. One solution to emulate the <code>event.currentTarget</code> feature is to wrap your handler in a function calling the handler using <code>Function.prototype.call</code> with the element as a first argument. This way, <code>this</code> will be the expected value.",
                        "partial_implementation": true,
                        "version_added": "6",
                        "version_removed": "9"
                    }
                ],
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.currentTarget"
        }
    ],
    "dom-event-defaultprevented": [
        {
            "slug": "API/Event/defaultPrevented",
            "summary": "Returns a boolean indicating whether or not event.preventDefault() was called on the event.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.defaultPrevented"
        }
    ],
    "dom-event-event": [
        {
            "slug": "API/Event/Event",
            "summary": "The Event() constructor creates a new Event.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "11.6"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event()"
        }
    ],
    "dom-event-eventphase": [
        {
            "slug": "API/Event/eventPhase",
            "summary": "Indicates which phase of the event flow is currently being evaluated.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "Event.eventPhase"
        }
    ],
    "dom-event-istrusted": [
        {
            "slug": "API/Event/isTrusted",
            "summary": "The isTrusted read-only property of the Event interface is a boolean that is true when the event was generated by a user action, and false when the event was created or modified by a script or dispatched via dispatchEvent.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action.",
                    "version_added": "46"
                },
                "chrome_android": {
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action.",
                    "version_added": "46"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "In Internet Explorer, all events are trusted except those that are created with the <code>createEvent()</code> method.",
                    "version_added": false
                },
                "opera": {
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action.",
                    "version_added": "33"
                },
                "opera_android": {
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action.",
                    "version_added": "33"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "webview_android": {
                    "notes": "Starting with version 53, untrusted events do not invoke the default action.",
                    "version_added": "46"
                }
            },
            "title": "Event.isTrusted"
        }
    ],
    "dom-event-preventdefault": [
        {
            "slug": "API/Event/preventDefault",
            "summary": "The Event interface's preventDefault() method tells the user agent that if the event does not get explicitly handled, its default action should not be taken as it normally would be. The event continues to propagate as usual, unless one of its event listeners calls stopPropagation() or stopImmediatePropagation(), either of which terminates propagation at once.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.preventDefault()"
        }
    ],
    "dom-event-srcelement": [
        {
            "slug": "API/Event/srcElement",
            "summary": "Event.srcElement is a proprietary alias (implemented in Internet Explorer) for the standard Event.target property, which is supported in some other browsers for web compatibility purposes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": {
                    "version_added": "62"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.srcElement"
        }
    ],
    "dom-event-stopimmediatepropagation": [
        {
            "slug": "API/Event/stopImmediatePropagation",
            "summary": "Prevents other listeners of the same event from being called.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": {
                    "version_added": "10"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.stopImmediatePropagation()"
        }
    ],
    "dom-event-stoppropagation": [
        {
            "slug": "API/Event/stopPropagation",
            "summary": "The stopPropagation() method prevents further propagation of the current event in the capturing and bubbling phases.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.stopPropagation()"
        }
    ],
    "dom-event-target": [
        {
            "slug": "API/Event/target",
            "summary": "A reference to the object that dispatched the event. It is different from event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event.target"
        }
    ],
    "dom-event-timestamp": [
        {
            "slug": "API/Event/timeStamp",
            "summary": "Returns the time (in milliseconds) at which the event was created.",
            "support": {
                "chrome": {
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": "49"
                },
                "chrome_android": {
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": "49"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": true
                },
                "firefox_android": {
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": true
                },
                "ie": {
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": true
                },
                "opera": {
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": "36"
                },
                "opera_android": {
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": "36"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Starting with version 49, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>.",
                    "version_added": "49"
                }
            },
            "title": "Event.timeStamp"
        }
    ],
    "dom-event-type": [
        {
            "slug": "API/Event/type",
            "summary": "The Event.type read-only property returns a string containing the event's type. It is set when the event is constructed and is the name commonly used to refer to the specific event, such as click, load, or error.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "Event.type"
        }
    ],
    "dom-eventlistener-handleevent": [
        {
            "slug": "API/EventListener/handleEvent",
            "summary": "The EventListener method handleEvent() method is called by the user agent when an event is sent to the EventListener, in order to handle events that occur on an observed EventTarget.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "EventListener.handleEvent()"
        }
    ],
    "dom-eventtarget-addeventlistener": [
        {
            "slug": "API/EventTarget/addEventListener",
            "summary": "The EventTarget method addEventListener() sets up a function that will be called whenever the specified event is delivered to the target.",
            "support": {
                "chrome": {
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional.",
                    "version_added": "1"
                },
                "chrome_android": {
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional.",
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "attachEvent",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.attachEvent()</code> method.",
                        "version_added": "6",
                        "version_removed": "11"
                    }
                ],
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "7"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional.",
                    "version_added": "1"
                }
            },
            "title": "EventTarget.addEventListener()"
        }
    ],
    "dom-eventtarget-dispatchevent": [
        {
            "slug": "API/EventTarget/dispatchEvent",
            "summary": "Dispatches an Event at the specified EventTarget, (synchronously) invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) also apply to events dispatched manually with dispatchEvent().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "fireEvent",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.fireEvent()</code> method.",
                        "version_added": "6",
                        "version_removed": "11"
                    }
                ],
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "4"
                }
            },
            "title": "EventTarget.dispatchEvent()"
        }
    ],
    "dom-eventtarget-eventtarget": [
        {
            "slug": "API/EventTarget/EventTarget",
            "summary": "The EventTarget() constructor creates a new EventTarget object instance.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": {
                    "version_added": "64"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "59"
                },
                "firefox_android": {
                    "version_added": "59"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "51"
                },
                "opera_android": {
                    "version_added": "51"
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "64"
                }
            },
            "title": "EventTarget()"
        }
    ],
    "dom-eventtarget-removeeventlistener": [
        {
            "slug": "API/EventTarget/removeEventListener",
            "summary": "The EventTarget.removeEventListener() method removes from the EventTarget an event listener previously registered with EventTarget.addEventListener(). The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; see Matching event listeners for removal",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "detachEvent",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.detachEvent()</code> method.",
                        "version_added": "6",
                        "version_removed": "11"
                    }
                ],
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "7"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "EventTarget.removeEventListener()"
        }
    ],
    "dom-mutationobserver-disconnect": [
        {
            "slug": "API/MutationObserver/disconnect",
            "summary": "The MutationObserver method disconnect() tells the observer to stop watching for mutations.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MutationObserver.disconnect()"
        }
    ],
    "dom-mutationobserver-mutationobserver": [
        {
            "slug": "API/MutationObserver/MutationObserver",
            "summary": "The DOM MutationObserver() constructor \u2014 part of the MutationObserver interface \u2014 creates and returns a new observer which invokes a specified callback when DOM events occur.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": [
                    {
                        "version_added": true
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": true,
                        "version_removed": true
                    }
                ]
            },
            "title": "MutationObserver.MutationObserver()"
        }
    ],
    "dom-mutationobserver-observe": [
        {
            "slug": "API/MutationObserver/observe",
            "summary": "The MutationObserver method observe() configures the MutationObserver callback to begin receiving notifications of changes to the DOM that match the given options.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MutationObserver.observe()"
        }
    ],
    "dom-mutationobserver-takerecords": [
        {
            "slug": "API/MutationObserver/takeRecords",
            "summary": "The MutationObserver method takeRecords() returns a list of all matching DOM changes that have been detected but not yet processed by the observer's callback function, leaving the mutation queue empty.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "MutationObserver.takeRecords()"
        }
    ],
    "dom-mutationobserverinit-attributefilter": [
        {
            "slug": "API/MutationObserverInit/attributeFilter",
            "summary": "The MutationObserverInit dictionary's optional attributeFilter property is an array of strings specifying the names of the attributes whose values are to be monitored for changes.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit.attributeFilter"
        }
    ],
    "dom-mutationobserverinit-attributeoldvalue": [
        {
            "slug": "API/MutationObserverInit/attributeOldValue",
            "summary": "The MutationObserverInit dictionary's optional attributeOldValue property is used to specify whether or not to record the prior value of the altered attribute in MutationRecord objects denoting attribute value changes.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 36, <code>attributeOldValue</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "firefox_android": {
                    "notes": "Starting in Firefox 36, <code>attributeOldValue</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit.attributeOldValue"
        }
    ],
    "dom-mutationobserverinit-attributes": [
        {
            "slug": "API/MutationObserverInit/attributes",
            "summary": "The MutationObserverInit dictionary's optional attributes property is used to specify whether or not to watch for attribute value changes on the node or nodes being observed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 36, <code>attributes</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "firefox_android": {
                    "notes": "Starting in Firefox 36, <code>attributes</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit.attributes"
        }
    ],
    "dom-mutationobserverinit-characterdata": [
        {
            "slug": "API/MutationObserverInit/characterData",
            "summary": "The MutationObserverInit dictionary's optional characterData property is used to specify whether or not to monitor the node or nodes being observed for changes to their textual contents.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 36, <code>characterData</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "firefox_android": {
                    "notes": "Starting in Firefox 36, <code>characterData</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit.characterData"
        }
    ],
    "dom-mutationobserverinit-characterdataoldvalue": [
        {
            "slug": "API/MutationObserverInit/characterDataOldValue",
            "summary": "The MutationObserverInit dictionary's optional characterDataOldValue property is used to specify whether or not the MutationRecord.oldValue property for DOM mutations should be set to the previous value of text nodes which changed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 36, <code>characterDataOldValue</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "firefox_android": {
                    "notes": "Starting in Firefox 36, <code>characterDataOldValue</code> has no default value; previously, its default value was <code>false</code>.",
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit.characterDataOldValue"
        }
    ],
    "dom-mutationobserverinit-childlist": [
        {
            "slug": "API/MutationObserverInit/childList",
            "summary": "The MutationObserverInit dictionary's optional childList property indicates whether or not to monitor the specified node or nodes for the addition or removal of new child nodes.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit.childList"
        }
    ],
    "dom-mutationobserverinit-subtree": [
        {
            "slug": "API/MutationObserverInit/subtree",
            "summary": "The MutationObserverInit dictionary's optional subtree property can be set to true to monitor the targeted node and all of its descendants.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": null
                }
            },
            "title": "MutationObserverInit.subtree"
        }
    ],
    "dom-node-appendchild": [
        {
            "slug": "API/Node/appendChild",
            "summary": "The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.appendChild()"
        }
    ],
    "dom-node-childnodes": [
        {
            "slug": "API/Node/childNodes",
            "summary": "The Node.childNodes read-only property returns a live NodeList of child nodes of the given element where the first child node is assigned index 0.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.childNodes"
        }
    ],
    "dom-node-clonenode": [
        {
            "slug": "API/Node/cloneNode",
            "summary": "The Node.cloneNode() method returns a duplicate of the node on which this method was called.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.cloneNode()"
        }
    ],
    "dom-node-comparedocumentposition": [
        {
            "slug": "API/Node/compareDocumentPosition",
            "summary": "The Node.compareDocumentPosition() method compares the position of the given node against another node in any document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": {
                    "version_added": "9"
                },
                "ie": {
                    "notes": "Only supports <code>contains</code> for elements",
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.compareDocumentPosition()"
        }
    ],
    "dom-node-contains": [
        {
            "slug": "API/Node/contains",
            "summary": "The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node, i.e. the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "Only supports <code>contains</code> for HTML elements and not for SVG elements.",
                    "version_added": "5"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.contains()"
        }
    ],
    "dom-node-firstchild": [
        {
            "slug": "API/Node/firstChild",
            "summary": "The Node.firstChild read-only property returns the node's first child in the tree, or null if the node has no children.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.firstChild"
        }
    ],
    "dom-node-getrootnode": [
        {
            "slug": "API/Node/getRootNode",
            "summary": "The getRootNode() method of the Node interface returns the context object's root, which optionally includes the shadow root if it is available.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "Node.getRootNode()"
        }
    ],
    "dom-node-insertbefore": [
        {
            "slug": "API/Node/insertBefore",
            "summary": "The Node.insertBefore() method inserts a node before the reference node as a child of a specified parent node. If the given child is a reference to an existing node in the document, insertBefore() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "Node.insertBefore()"
        }
    ],
    "dom-node-isconnected": [
        {
            "slug": "API/Node/isConnected",
            "summary": "The isConnected read-only property of the Node interface returns a boolean indicating whether the node is connected (directly or indirectly) to the context object, for example the Document object in the case of the normal DOM, or the ShadowRoot in the case of a shadow DOM.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": {
                    "version_added": "51"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "38"
                },
                "opera_android": {
                    "version_added": "38"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "51"
                }
            },
            "title": "Node.isConnected"
        }
    ],
    "dom-node-isequalnode": [
        {
            "slug": "API/Node/isEqualNode",
            "summary": "The Node.isEqualNode() method tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that must match varies depending on the types of the nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.isEqualNode()"
        }
    ],
    "dom-node-issamenode": [
        {
            "slug": "API/Node/isSameNode",
            "summary": "The Node.isSameNode() method tests whether two nodes are the same, that is if they reference the same object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": [
                    {
                        "version_added": "48"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "10"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "48"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "10"
                    }
                ],
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.isSameNode()"
        }
    ],
    "dom-node-lastchild": [
        {
            "slug": "API/Node/lastChild",
            "summary": "The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.lastChild"
        }
    ],
    "dom-node-nextsibling": [
        {
            "slug": "API/Node/nextSibling",
            "summary": "The Node.nextSibling read-only property returns the node immediately following the specified one in their parent's childNodes, or returns null if the specified node is the last child in the parent element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.nextSibling"
        }
    ],
    "dom-node-nodetype": [
        {
            "slug": "API/Node/nodeType",
            "summary": "The read-only Node.nodeType property that represents the type of the node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.nodeType"
        }
    ],
    "dom-node-ownerdocument": [
        {
            "slug": "API/Node/ownerDocument",
            "summary": "The Node.ownerDocument read-only property returns the top-level document object for this node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": true
                    },
                    {
                        "notes": "The <code>ownerDocument</code> of doctype nodes (that is, nodes for which <code>Node.nodeType</code> is <code>Node.DOCUMENT_TYPE_NODE</code> or 10) is no longer null. Instead, the <code>ownerDocument</code> is the document on which <code>document.implementation.createDocumentType()</code> was called.",
                        "version_added": "9"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": true
                    },
                    {
                        "notes": "The <code>ownerDocument</code> of doctype nodes (that is, nodes for which <code>Node.nodeType</code> is <code>Node.DOCUMENT_TYPE_NODE</code> or 10) is no longer null. Instead, the <code>ownerDocument</code> is the document on which <code>document.implementation.createDocumentType()</code> was called.",
                        "version_added": "9"
                    }
                ],
                "ie": {
                    "notes": "See <a href='http://msdn.microsoft.com/en-us/library/ie/ms534315(v=vs.85).aspx'>MSDN</a>.",
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.ownerDocument"
        }
    ],
    "dom-node-previousSibling": [
        {
            "slug": "API/Node/previousSibling",
            "summary": "The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.previousSibling"
        }
    ],
    "dom-node-textcontent": [
        {
            "slug": "API/Node/textContent",
            "summary": "The textContent property of the Node interface represents the text content of a node and its descendants.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Node.textContent"
        }
    ],
    "dom-nodeiterator-filter": [
        {
            "slug": "API/NodeIterator/filter",
            "summary": "The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator.filter"
        }
    ],
    "dom-nodeiterator-nextnode": [
        {
            "slug": "API/NodeIterator/nextNode",
            "summary": "The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set.  The first call to nextNode() returns the first node in the set.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator.nextNode()"
        }
    ],
    "dom-nodeiterator-pointerbeforereferencenode": [
        {
            "slug": "API/NodeIterator/pointerBeforeReferenceNode",
            "summary": "The NodeIterator.pointerBeforeReferenceNode read-only property returns a Boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false) the anchor node indicated by the NodeIterator.referenceNode property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator.pointerBeforeReferenceNode"
        }
    ],
    "dom-nodeiterator-previousnode": [
        {
            "slug": "API/NodeIterator/previousNode",
            "summary": "The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator.previousNode()"
        }
    ],
    "dom-nodeiterator-referencenode": [
        {
            "slug": "API/NodeIterator/referenceNode",
            "summary": "The NodeIterator.referenceNode read-only returns the Node to which the iterator is anchored; as new nodes are inserted, the iterator remains anchored to the reference node as specified by this property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator.referenceNode"
        }
    ],
    "dom-nodeiterator-root": [
        {
            "slug": "API/NodeIterator/root",
            "summary": "The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator.root"
        }
    ],
    "dom-nodeiterator-whattoshow": [
        {
            "slug": "API/NodeIterator/whatToShow",
            "summary": "The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator.whatToShow"
        }
    ],
    "dom-nondocumenttypechildnode-nextelementsibling": [
        {
            "slug": "API/NonDocumentTypeChildNode/nextElementSibling",
            "summary": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NonDocumentTypeChildNode.nextElementSibling"
        }
    ],
    "dom-nondocumenttypechildnode-previouselementsibling": [
        {
            "slug": "API/NonDocumentTypeChildNode/previousElementSibling",
            "summary": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NonDocumentTypeChildNode.previousElementSibling"
        }
    ],
    "dom-parentnode-append": [
        {
            "slug": "API/ParentNode/append",
            "summary": "The ParentNode.append() method inserts a set of Node objects or DOMString objects after the last child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10.2"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "ParentNode.append()"
        }
    ],
    "dom-parentnode-childElementCount": [
        {
            "slug": "API/ParentNode/childElementCount",
            "summary": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ParentNode.childElementCount"
        }
    ],
    "dom-parentnode-children": [
        {
            "slug": "API/ParentNode/children",
            "summary": "The ParentNode property children is a read-only property that returns a live HTMLCollection which contains all of the child elements of the node upon which it was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "notes": "Internet Explorer 6, 7 and 8 supported it, but erroneously includes <code>Comment</code> nodes.",
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ParentNode.children"
        }
    ],
    "dom-parentnode-firstelementchild": [
        {
            "slug": "API/ParentNode/firstElementChild",
            "summary": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ParentNode.firstElementChild"
        }
    ],
    "dom-parentnode-lastelementchild": [
        {
            "slug": "API/ParentNode/lastElementChild",
            "summary": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ParentNode.lastElementChild"
        }
    ],
    "dom-parentnode-prepend": [
        {
            "slug": "API/ParentNode/prepend",
            "summary": "The ParentNode.prepend() method inserts a set of Node objects or DOMString objects before the first child of the ParentNode. DOMString objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": {
                    "version_added": "54"
                },
                "edge": {
                    "version_added": "17"
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "49"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "39"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "54"
                }
            },
            "title": "ParentNode.prepend()"
        }
    ],
    "dom-parentnode-queryselectorall": [
        {
            "slug": "API/Document/querySelectorAll",
            "summary": "The Document method querySelectorAll() returns a static (not live) NodeList representing a list of the document's elements that match the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "8"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document.querySelectorAll()"
        },
        {
            "slug": "API/Element/querySelector",
            "summary": "Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "notes": "<code>querySelector()</code> is supported, but only for CSS 2.1 selectors.",
                        "partial_implementation": true,
                        "version_added": "8"
                    }
                ],
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.querySelector()"
        },
        {
            "slug": "API/Element/querySelectorAll",
            "summary": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "notes": "<code>querySelectorAll()</code> is supported, but only for CSS 2.1 selectors.",
                        "partial_implementation": true,
                        "version_added": "8"
                    }
                ],
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element.querySelectorAll()"
        },
        {
            "slug": "API/ParentNode/querySelectorAll",
            "summary": "The ParentNode mixin defines the querySelectorAll() method as returning a NodeList representing a list of elements matching the specified group of selectors which are descendants of the object on which the method was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "notes": "Internet Explorer 8 only supported CSS2 selectors.",
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "3.2"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ParentNode.querySelectorAll()"
        }
    ],
    "dom-range": [
        {
            "slug": "API/Range/Range",
            "summary": "The Range() constructor returns a newly created Range object whose start and end is the global Document object.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range()"
        }
    ],
    "dom-range-clonecontents": [
        {
            "slug": "API/Range/cloneContents",
            "summary": "The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.cloneContents()"
        }
    ],
    "dom-range-clonerange": [
        {
            "slug": "API/Range/cloneRange",
            "summary": "The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.cloneRange()"
        }
    ],
    "dom-range-collapse": [
        {
            "slug": "API/Range/collapse",
            "summary": "The Range.collapse() method collapses the Range to one of its boundary points.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.collapse()"
        }
    ],
    "dom-range-collapsed": [
        {
            "slug": "API/Range/collapsed",
            "summary": "The Range.collapsed read-only property returns a Boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.collapsed"
        },
        {
            "slug": "API/StaticRange/collapsed",
            "summary": "The collapsed read-only property of the StaticRange interface returns true if the range's start position and end position are the same.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "StaticRange.collapsed"
        }
    ],
    "dom-range-commonancestorcontainer": [
        {
            "slug": "API/Range/commonAncestorContainer",
            "summary": "The Range.commonAncestorContainer read-only property returns the deepest \u2014 or furthest down the document tree \u2014 Node that contains both boundary points of the range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the commonAncestorContainer.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.commonAncestorContainer"
        }
    ],
    "dom-range-compareboundarypoints": [
        {
            "slug": "API/Range/compareBoundaryPoints",
            "summary": "The Range.compareBoundaryPoints() method compares the boundary points of the Range with another one.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.compareBoundaryPoints()"
        }
    ],
    "dom-range-comparepoint": [
        {
            "slug": "API/Range/comparePoint",
            "summary": "The Range.comparePoint() method returns -1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.comparePoint()"
        }
    ],
    "dom-range-deletecontents": [
        {
            "slug": "API/Range/deleteContents",
            "summary": "The Range.deleteContents() removes the contents of the Range from the Document.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.deleteContents()"
        }
    ],
    "dom-range-detach": [
        {
            "slug": "API/Range/detach",
            "summary": "The Range.detach() method does nothing. It used to disable the Range object and enable the browser to release associated resources. The method has been kept for compatibility.",
            "support": {
                "chrome": {
                    "notes": "Since April 2014 this method is a <a href='https://src.chromium.org/viewvc/blink?revision=173010&view=revision'>no-op in Chrome</a>.",
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting in Firefox 15.0, this method is a no-op and has no effect.",
                    "version_added": "4",
                    "version_removed": "15"
                },
                "firefox_android": {
                    "notes": "Starting in Firefox 15.0, this method is a no-op and has no effect.",
                    "version_added": "4",
                    "version_removed": "15"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "notes": "Since August 2015 this method is a no-op in <a href='https://bugs.webkit.org/show_bug.cgi?id=148454'>WebKit-based browsers</a>.",
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "Since August 2015 this method is a no-op in <a href='https://bugs.webkit.org/show_bug.cgi?id=148454'>WebKit-based browsers</a>.",
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.detach()"
        }
    ],
    "dom-range-endcontainer": [
        {
            "slug": "API/Range/endContainer",
            "summary": "The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.endContainer"
        },
        {
            "slug": "API/StaticRange/endContainer",
            "summary": "The endContainer property of the StaticRange interface returns the end Node for the range.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "StaticRange.endContainer"
        }
    ],
    "dom-range-endoffset": [
        {
            "slug": "API/Range/endOffset",
            "summary": "The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.endOffset"
        },
        {
            "slug": "API/StaticRange/endOffset",
            "summary": "The endOffset property of the StaticRange interface returns the offset into the end node of the range's end position.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "StaticRange.endOffset"
        }
    ],
    "dom-range-extractcontents": [
        {
            "slug": "API/Range/extractContents",
            "summary": "The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.extractContents()"
        }
    ],
    "dom-range-insertnode": [
        {
            "slug": "API/Range/insertNode",
            "summary": "The Range.insertNode() method inserts a node at the start of the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.insertNode()"
        }
    ],
    "dom-range-intersectsnode": [
        {
            "slug": "API/Range/intersectsNode",
            "summary": "The Range.intersectsNode() method returns a boolean indicating whether the given Node intersects the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": {
                    "version_added": "19"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.intersectsNode()"
        }
    ],
    "dom-range-ispointinrange": [
        {
            "slug": "API/Range/isPointInRange",
            "summary": "The Range.isPointInRange() method returns a boolean indicating whether the given point is in the Range. It returns true if the point (cursor position) at offset within ReferenceNode is within this range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.isPointInRange()"
        }
    ],
    "dom-range-selectnode": [
        {
            "slug": "API/Range/selectNode",
            "summary": "The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.selectNode()"
        }
    ],
    "dom-range-selectnodecontents": [
        {
            "slug": "API/Range/selectNodeContents",
            "summary": "The Range.selectNodeContents() sets the Range to contain the contents of a Node.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.selectNodeContents()"
        }
    ],
    "dom-range-setend": [
        {
            "slug": "API/Range/setEnd",
            "summary": "The Range.setEnd() method sets the end position of a Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.setEnd()"
        }
    ],
    "dom-range-setendafter": [
        {
            "slug": "API/Range/setEndAfter",
            "summary": "The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.setEndAfter()"
        }
    ],
    "dom-range-setendbefore": [
        {
            "slug": "API/Range/setEndBefore",
            "summary": "The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.setEndBefore()"
        }
    ],
    "dom-range-setstart": [
        {
            "slug": "API/Range/setStart",
            "summary": "The Range.setStart() method sets the start position of a Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.setStart()"
        }
    ],
    "dom-range-setstartafter": [
        {
            "slug": "API/Range/setStartAfter",
            "summary": "The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.setStartAfter()"
        }
    ],
    "dom-range-setstartbefore": [
        {
            "slug": "API/Range/setStartBefore",
            "summary": "The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.setStartBefore()"
        }
    ],
    "dom-range-startcontainer": [
        {
            "slug": "API/Range/startContainer",
            "summary": "The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.startContainer"
        },
        {
            "slug": "API/StaticRange/startContainer",
            "summary": "The startContainer property of the StaticRange interface returns the start Node for the range.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "StaticRange.startContainer"
        }
    ],
    "dom-range-startoffset": [
        {
            "slug": "API/Range/startOffset",
            "summary": "The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.startOffset"
        },
        {
            "slug": "API/StaticRange/startOffset",
            "summary": "The startOffset property of the StaticRange interface returns the offset into the start node of the range's start position.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "StaticRange.startOffset"
        }
    ],
    "dom-range-stringifier": [
        {
            "slug": "API/Range/toString",
            "summary": "The Range.toString() method is a stringifier returning the text of the Range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.toString()"
        }
    ],
    "dom-range-surroundcontents": [
        {
            "slug": "API/Range/surroundContents",
            "summary": "The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range.surroundContents()"
        }
    ],
    "dom-shadowroot-host": [
        {
            "slug": "API/ShadowRoot/host",
            "summary": "The host read-only property of the ShadowRoot returns a reference to the DOM element the ShadowRoot is attached to.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/shadowdom/'>In Development</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/shadowdom/'>In Development</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "See <a href='https://bugzil.la/1205323'>bug 1205323</a>",
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "See <a href='https://bugzil.la/1205323'>bug 1205323</a>",
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "ShadowRoot.host"
        }
    ],
    "dom-shadowroot-mode": [
        {
            "slug": "API/ShadowRoot/mode",
            "summary": "The mode property of the ShadowRoot specifies its mode \u2014 either open or closed. This defines whether or not the shadow root's internal features are accessible from JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/shadowdom/'>In Development</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/shadowdom/'>In Development</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "See <a href='https://bugzil.la/1205323'>bug 1205323</a>",
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "notes": "See <a href='https://bugzil.la/1205323'>bug 1205323</a>",
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "ShadowRoot.mode"
        }
    ],
    "dom-slotable-assignedslot": [
        {
            "slug": "API/Text/assignedSlot",
            "summary": "The assignedSlot property of the Text interface returns the HTMLSlotElement object associated with the element.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "HTMLSlotElement.assignedSlot"
        }
    ],
    "dom-text-splittext": [
        {
            "slug": "API/Text/splitText",
            "summary": "The Text.splitText() method breaks the Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings.",
            "support": {
                "chrome": {
                    "notes": [
                        "Before Chrome 30, the <code>offset</code> argument was optional."
                    ],
                    "version_added": "1"
                },
                "chrome_android": {
                    "notes": [
                        "Before Chrome 30, the <code>offset</code> argument was optional."
                    ],
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "notes": [
                        "Before Opera 17, the <code>offset</code> argument was optional."
                    ],
                    "version_added": true
                },
                "opera_android": {
                    "notes": [
                        "Before Opera 17, the <code>offset</code> argument was optional."
                    ],
                    "version_added": true
                },
                "safari": {
                    "notes": [
                        "The <code>offset</code> argument is optional."
                    ],
                    "version_added": true
                },
                "safari_ios": {
                    "notes": [
                        "The <code>offset</code> argument is optional."
                    ],
                    "version_added": true
                },
                "webview_android": {
                    "notes": [
                        "Before version 4.4, the <code>offset</code> argument was optional."
                    ],
                    "version_added": true
                }
            },
            "title": "Text.splitText()"
        }
    ],
    "dom-text-text": [
        {
            "slug": "API/Text/Text",
            "summary": "The Text() constructor returns a newly created Text object with the optional DOMString given in parameter as its textual content.",
            "support": {
                "chrome": {
                    "version_added": "28"
                },
                "chrome_android": {
                    "version_added": "28"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": {
                    "version_added": "24"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": {
                    "version_added": "8"
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Text()"
        }
    ],
    "dom-text-wholetext": [
        {
            "slug": "API/Text/wholeText",
            "summary": "The Text.wholeText read-only property returns the full text of all Text nodes logically adjacent to the node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Text.wholeText"
        }
    ],
    "dom-treewalker-currentnode": [
        {
            "slug": "API/TreeWalker/currentNode",
            "summary": "The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.currentNode"
        }
    ],
    "dom-treewalker-filter": [
        {
            "slug": "API/TreeWalker/filter",
            "summary": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.filter"
        }
    ],
    "dom-treewalker-firstchild": [
        {
            "slug": "API/TreeWalker/firstChild",
            "summary": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.firstChild()"
        }
    ],
    "dom-treewalker-lastchild": [
        {
            "slug": "API/TreeWalker/lastChild",
            "summary": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.lastChild()"
        }
    ],
    "dom-treewalker-nextnode": [
        {
            "slug": "API/TreeWalker/nextNode",
            "summary": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.nextNode()"
        }
    ],
    "dom-treewalker-nextsibling": [
        {
            "slug": "API/TreeWalker/nextSibling",
            "summary": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.nextSibling()"
        }
    ],
    "dom-treewalker-parentnode": [
        {
            "slug": "API/TreeWalker/parentNode",
            "summary": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker's root node, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.parentNode()"
        }
    ],
    "dom-treewalker-previousnode": [
        {
            "slug": "API/TreeWalker/previousNode",
            "summary": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.previousNode()"
        }
    ],
    "dom-treewalker-previoussibling": [
        {
            "slug": "API/TreeWalker/previousSibling",
            "summary": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, return null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.previousSibling()"
        }
    ],
    "dom-treewalker-root": [
        {
            "slug": "API/TreeWalker/root",
            "summary": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.root"
        }
    ],
    "dom-treewalker-whattoshow": [
        {
            "slug": "API/TreeWalker/whatToShow",
            "summary": "The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker.whatToShow"
        }
    ],
    "domimplementation": [
        {
            "slug": "API/DOMImplementation",
            "summary": "The DOMImplementation interface represent an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "6"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMImplementation"
        }
    ],
    "htmlcollection": [
        {
            "slug": "API/HTMLCollection",
            "summary": "The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "HTMLCollection"
        }
    ],
    "interface-AbortSignal": [
        {
            "slug": "API/AbortSignal",
            "summary": "The AbortSignal interface represents a signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "edge_mobile": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "53"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.1"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "AbortSignal"
        }
    ],
    "interface-abortcontroller": [
        {
            "slug": "API/AbortController",
            "summary": "The AbortController interface represents a controller object that allows you to abort one or more DOM requests as and when desired.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": {
                    "version_added": "66"
                },
                "edge": {
                    "version_added": "16"
                },
                "edge_mobile": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "53"
                },
                "opera_android": {
                    "version_added": "53"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.1"
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": "66"
                }
            },
            "title": "AbortController"
        }
    ],
    "interface-attr": [
        {
            "slug": "API/Attr",
            "summary": "This type represents a DOM element's attribute as an object. In most DOM methods, you will probably directly retrieve the attribute as a string (e.g., Element.getAttribute(), but certain functions (e.g., Element.getAttributeNode()) or means of iterating give Attr types.",
            "support": {
                "chrome": {
                    "notes": "As of Chrome 45, this property no longer inherits from Node.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "As of Chrome 45, this property no longer inherits from Node.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "notes": "As of Opera 32, this property no longer inherits from Node.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "As of Opera 32, this property no longer inherits from Node.",
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "As of Chrome 45, this property no longer inherits from Node.",
                    "version_added": true
                }
            },
            "title": "Attr"
        }
    ],
    "interface-cdatasection": [
        {
            "slug": "API/CDATASection",
            "summary": "The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. The symbols  and  don\u2019t need escaping as they normally do when inside a CDATA section.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CDATASection"
        }
    ],
    "interface-childnode": [
        {
            "slug": "API/ChildNode",
            "summary": "The ChildNode interface contains methods that are particular to Node objects that can have a parent.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "23"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ChildNode"
        },
        {
            "slug": "API/NonDocumentTypeChildNode",
            "summary": "The NonDocumentTypeChildNode interface contains methods that are particular to Node objects that can have a parent, but not suitable for DocumentType.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NonDocumentTypeChildNode"
        }
    ],
    "interface-customevent": [
        {
            "slug": "API/CustomEvent",
            "summary": "This interface inherits properties from its parent, Event:",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "CustomEvent"
        }
    ],
    "interface-document": [
        {
            "slug": "API/Document",
            "summary": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Document"
        }
    ],
    "interface-documentfragment": [
        {
            "slug": "API/DocumentFragment",
            "summary": "The DocumentFragment interface represents a minimal document object that has no parent. It is used as a lightweight version of Document that stores a segment of a document structure comprised of nodes just like a standard document. The key difference is that because the document fragment isn't part of the active document tree structure, changes made to the fragment don't affect the document, cause reflow, or incur any performance impact that can occur when changes are made.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DocumentFragment"
        }
    ],
    "interface-domtokenList": [
        {
            "slug": "API/DOMTokenList/keys",
            "summary": "The keys() method of the DOMTokenList interface returns an iterator allowing to go through all keys contained in this object. The keys are of type unsigned integer.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "DOMTokenList.keys()"
        },
        {
            "slug": "API/DOMTokenList/values",
            "summary": "The values() method of the DOMTokenList interface returns an iterator allowing developers to go through all values contained in the DOMTokenList. The individual values are DOMString objects.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "DOMTokenList.values()"
        }
    ],
    "interface-domtokenlist": [
        {
            "slug": "API/DOMTokenList",
            "summary": "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList, HTMLLinkElement.relList, HTMLAnchorElement.relList, HTMLAreaElement.relList, HTMLIframeElement.sandbox, or HTMLOutputElement.htmlFor. It is indexed beginning with 0 as with JavaScript Array objects. DOMTokenList is always case-sensitive.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "DOMTokenList"
        },
        {
            "slug": "API/DOMTokenList/entries",
            "summary": "The DOMTokenList.entries() method returns an iterator allowing you to go through all key/value pairs contained in this object. The values are DOMString objects, each representing a single token.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "DOMTokenList.entries()"
        },
        {
            "slug": "API/DOMTokenList/foreach",
            "summary": "The forEach() method of the DOMTokenList interface calls the callback given in parameter once for each value pair in the list, in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "45"
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "32"
                },
                "opera_android": {
                    "version_added": "32"
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "45"
                }
            },
            "title": "DOMTokenList.forEach()"
        }
    ],
    "interface-element": [
        {
            "slug": "API/Element",
            "summary": "Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Element"
        }
    ],
    "interface-event": [
        {
            "slug": "API/Event",
            "summary": "The Event interface represents an event which takes place in the DOM; some are user-generated (such as mouse or keyboard events), while others are generated by APIs (such as events that indicate an animation has finished running, a video has been paused, and so forth). While events are usually triggered by such \"external\" sources, they can also be triggered programmatically, such as by calling the HTMLElement.click() method of an element, or by defining the event, then sending it to a specified target using EventTarget.dispatchEvent(). There are many types of events, some of which use other interfaces based on the main Event interface. Event itself contains the properties and methods which are common to all events.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Event"
        }
    ],
    "interface-eventtarget": [
        {
            "slug": "API/EventTarget",
            "summary": "EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "7"
                },
                "safari": [
                    {
                        "version_added": "10.1"
                    },
                    {
                        "notes": "<code>Window.EventTarget</code> did not exist on versions of Safari before 10.1.",
                        "version_added": "1",
                        "version_removed": "10.1"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "10.1"
                    },
                    {
                        "notes": "<code>Window.EventTarget</code> did not exist on versions of Safari iOS before 10.1.",
                        "version_added": "1",
                        "version_removed": "10.1"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "EventTarget"
        }
    ],
    "interface-namednodemap": [
        {
            "slug": "API/NamedNodeMap",
            "summary": "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": [
                    {
                        "version_added": "34"
                    },
                    {
                        "alternative_name": "mozNamedAttrMap",
                        "version_added": "22",
                        "version_removed": "34"
                    },
                    {
                        "version_added": true,
                        "version_removed": "22"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "34"
                    },
                    {
                        "alternative_name": "mozNamedAttrMap",
                        "version_added": "22",
                        "version_removed": "34"
                    },
                    {
                        "version_added": true,
                        "version_removed": "22"
                    }
                ],
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NamedNodeMap"
        }
    ],
    "interface-node": [
        {
            "slug": "API/Node",
            "summary": "Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.",
            "support": {
                "chrome": {
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>.",
                    "version_added": true
                },
                "chrome_android": {
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>.",
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>.",
                    "version_added": true
                },
                "opera_android": {
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>.",
                    "version_added": true
                },
                "safari": {
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>.",
                    "version_added": true
                },
                "safari_ios": {
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>.",
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>.",
                    "version_added": true
                }
            },
            "title": "Node"
        }
    ],
    "interface-nodefilter": [
        {
            "slug": "API/NodeFilter",
            "summary": "A NodeFilter interface represents an object used to filter the nodes in a NodeIterator or TreeWalker. They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeFilter"
        }
    ],
    "interface-nodelist": [
        {
            "slug": "API/NodeList",
            "summary": "NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeList"
        }
    ],
    "interface-nonelementparentnode": [
        {
            "slug": "API/Document/getElementById",
            "summary": "The Document method getElementById() returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "6"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "webview_android": {
                    "version_added": "1"
                }
            },
            "title": "Document.getElementById()"
        }
    ],
    "interface-range": [
        {
            "slug": "API/Range",
            "summary": "The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "notes": "Starting with Firefox 13, the <code>Range</code> object throws a <code>DOMException</code> as defined in DOM 4, instead of a <code>RangeException</code> defined in prior specifications.",
                    "version_added": "4"
                },
                "firefox_android": {
                    "notes": "Starting with Firefox 13, the <code>Range</code> object throws a <code>DOMException</code> as defined in DOM 4, instead of a <code>RangeException</code> defined in prior specifications.",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Range"
        }
    ],
    "interface-shadowroot": [
        {
            "slug": "API/ShadowRoot",
            "summary": "The ShadowRoot interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/shadowdom/?q=web%20components'>In Development</a>",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "<a href='https://developer.microsoft.com/en-us/microsoft-edge/platform/status/shadowdom/?q=web%20components'>In Development</a>",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "ShadowRoot"
        }
    ],
    "interface-staticrange": [
        {
            "slug": "API/StaticRange",
            "summary": "The StaticRange interface provides attributes that track the start and end position of a range, and a boolean attribute indicating whether the current range is collapsed into a single position.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": {
                    "version_added": "60"
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": "47"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": "60"
                }
            },
            "title": "StaticRange"
        }
    ],
    "interface-treewalker": [
        {
            "slug": "API/TreeWalker",
            "summary": "The TreeWalker object represents the nodes of a document subtree and a position within them.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "webview_android": {
                    "version_added": "3"
                }
            },
            "title": "TreeWalker"
        }
    ],
    "mixin-documentorshadowroot": [
        {
            "slug": "API/DocumentOrShadowRoot",
            "summary": "The DocumentOrShadowRoot mixin of the Shadow DOM API provides APIs that are shared between documents and shadow roots. The following features are included in both Document and ShadowRoot. ",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "DocumentOrShadowRoot"
        },
        {
            "slug": "API/DocumentOrShadowRoot/styleSheets",
            "summary": "The DocumentOrShadowRoot mixin of the Shadow DOM API provides APIs that are shared between documents and shadow roots.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "DocumentOrShadowRoot.styleSheets"
        }
    ],
    "mutationobserver": [
        {
            "slug": "API/MutationObserver",
            "summary": "The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature which was part of the DOM3 Events specification.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "chrome_android": [
                    {
                        "version_added": "26"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "18",
                        "version_removed": "26"
                    }
                ],
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": {
                    "version_added": "14"
                },
                "ie": {
                    "version_added": "11"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "7"
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": "6",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": [
                    {
                        "version_added": true
                    },
                    {
                        "prefix": "Webkit",
                        "version_added": true,
                        "version_removed": true
                    }
                ]
            },
            "title": "MutationObserver"
        }
    ],
    "mutationrecord": [
        {
            "slug": "API/MutationRecord",
            "summary": "A MutationRecord represents an individual DOM mutation. It is the object that is passed to MutationObserver's callback.",
            "support": {
                "chrome": {
                    "version_added": null
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "edge_mobile": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": null
                },
                "firefox_android": {
                    "version_added": null
                },
                "ie": {
                    "version_added": null
                },
                "opera": {
                    "version_added": null
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "MutationRecord"
        }
    ],
    "nodeFilter": [
        {
            "slug": "API/NodeFilter/acceptNode",
            "summary": "The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeFilter.acceptNode()"
        }
    ],
    "nodeiterator": [
        {
            "slug": "API/NodeIterator",
            "summary": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "9"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "NodeIterator"
        }
    ],
    "parentnode": [
        {
            "slug": "API/ParentNode",
            "summary": "The ParentNode mixin contains methods and properties that are common to all types of Node objects that can have children.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "ParentNode"
        }
    ],
    "ref-for-dom-window-event": [
        {
            "slug": "API/Window/event",
            "summary": "The read-only Window property event returns the Event which is currently being handled by the site's code. Outside the context of an event handler, the value is always undefined.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "flags": [
                        {
                            "name": "dom.window.event.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "63"
                },
                "firefox_android": {
                    "flags": [
                        {
                            "name": "dom.window.event.enabled",
                            "type": "preference",
                            "value_to_set": "true"
                        }
                    ],
                    "version_added": "63"
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": {
                    "version_added": null
                },
                "webview_android": {
                    "version_added": null
                }
            },
            "title": "Window.event"
        }
    ],
    "shadow-tree-slots": [
        {
            "slug": "HTML/Element/slot",
            "summary": "The HTML slot element\u2014part of the Web Components technology suite\u2014is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "version_added": false
                },
                "edge_mobile": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "<slot>"
        }
    ],
    "slotable": [
        {
            "slug": "API/Slotable",
            "summary": "The Slotable mixin defines features that allow nodes to become the contents of a slot element \u2014 the following features are included in both Element and Text.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": {
                    "version_added": "53"
                },
                "edge": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "edge_mobile": {
                    "notes": "Under consideration",
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "63"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": "59",
                        "version_removed": "65"
                    },
                    {
                        "flags": [
                            {
                                "name": "dom.webcomponents.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            },
                            {
                                "name": "dom.webcomponents.shadowdom.enabled",
                                "type": "preference",
                                "value_to_set": "true"
                            }
                        ],
                        "version_added": true,
                        "version_removed": "59"
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "40"
                },
                "opera_android": {
                    "version_added": "40"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.1"
                },
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": {
                    "version_added": "53"
                }
            },
            "title": "Slotable"
        }
    ],
    "text": [
        {
            "slug": "API/Text",
            "summary": "The Text interface represents the textual content of Element or Attr.  If an element has no markup within its content, it has a single child implementing Text that contains the element's text.  However, if the element contains markup, it is parsed into information items and Text nodes that form its children.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "edge": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": true
                },
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": true
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": true
                },
                "webview_android": {
                    "version_added": true
                }
            },
            "title": "Text"
        }
    ],
    "xmldocument": [
        {
            "slug": "API/XMLDocument",
            "summary": "The XMLDocument interface represent an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": true
                },
                "edge_mobile": {
                    "version_added": true
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": {
                    "version_added": false
                },
                "webview_android": {
                    "version_added": false
                }
            },
            "title": "XMLDocument"
        }
    ]
}
